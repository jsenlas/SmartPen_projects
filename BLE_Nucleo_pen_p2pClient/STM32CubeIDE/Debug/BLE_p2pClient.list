
BLE_p2pClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9d4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  0800bb14  0800bb14  0001bb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c354  0800c354  0001c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c35c  0800c35c  0001c35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c360  0800c360  0001c360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000004  0800c364  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000094  0800c3f4  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 0000009c  20000130  0800c48d  00020130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000003c  200001cc  0800c529  000201cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000208  0800c565  00020208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000013e8  2000021c  0800c576  0002021c  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  20001604  0800c576  00021604  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0003ed9d  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007751  00000000  00000000  0005efe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002898  00000000  00000000  00066738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000025c0  00000000  00000000  00068fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002d8e4  00000000  00000000  0006b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00030c24  00000000  00000000  00098e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f82e6  00000000  00000000  000c9a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001c1d7e  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000afb4  00000000  00000000  001c1dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000021c 	.word	0x2000021c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800bafc 	.word	0x0800bafc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000220 	.word	0x20000220
 800017c:	0800bafc 	.word	0x0800bafc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000532:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000536:	4905      	ldr	r1, [pc, #20]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	58000800 	.word	0x58000800

08000550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000582:	b480      	push	{r7}
 8000584:	b085      	sub	sp, #20
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800058a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800058e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800059e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4013      	ands	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ac:	68fb      	ldr	r3, [r7, #12]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005be:	f003 fcd5 	bl	8003f6c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005c2:	f003 fcd9 	bl	8003f78 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005ca:	f7ff ffad 	bl	8000528 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005ce:	f008 fbcf 	bl	8008d70 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005d2:	f000 f821 	bl	8000618 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005d6:	f000 f8c3 	bl	8000760 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005da:	bf00      	nop
}
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <APPD_EnableCPU2+0x34>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	c403      	stmia	r4!, {r0, r1}
 80005f6:	8022      	strh	r2, [r4, #0]
 80005f8:	3402      	adds	r4, #2
 80005fa:	0c13      	lsrs	r3, r2, #16
 80005fc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80005fe:	f009 ff29 	bl	800a454 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f008 fe26 	bl	8009256 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800060a:	bf00      	nop
}
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bdb0      	pop	{r4, r5, r7, pc}
 8000612:	bf00      	nop
 8000614:	0800bb14 	.word	0x0800bb14

08000618 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000638:	2300      	movs	r3, #0
 800063a:	77fb      	strb	r3, [r7, #31]
 800063c:	e038      	b.n	80006b0 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	4a44      	ldr	r2, [pc, #272]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	799b      	ldrb	r3, [r3, #6]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d02b      	beq.n	80006a4 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800064c:	7ffb      	ldrb	r3, [r7, #31]
 800064e:	4a41      	ldr	r2, [pc, #260]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000654:	4a40      	ldr	r2, [pc, #256]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d01b      	beq.n	8000692 <APPD_SetCPU2GpioConfig+0x7a>
 800065a:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d823      	bhi.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
 8000660:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000664:	d003      	beq.n	800066e <APPD_SetCPU2GpioConfig+0x56>
 8000666:	4a3d      	ldr	r2, [pc, #244]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d009      	beq.n	8000680 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 800066c:	e01c      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	4a38      	ldr	r2, [pc, #224]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	4413      	add	r3, r2
 8000676:	889a      	ldrh	r2, [r3, #4]
 8000678:	8bbb      	ldrh	r3, [r7, #28]
 800067a:	4313      	orrs	r3, r2
 800067c:	83bb      	strh	r3, [r7, #28]
          break;
 800067e:	e014      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	4a34      	ldr	r2, [pc, #208]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4413      	add	r3, r2
 8000688:	889a      	ldrh	r2, [r3, #4]
 800068a:	8b7b      	ldrh	r3, [r7, #26]
 800068c:	4313      	orrs	r3, r2
 800068e:	837b      	strh	r3, [r7, #26]
          break;
 8000690:	e00b      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000692:	7ffb      	ldrb	r3, [r7, #31]
 8000694:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	889a      	ldrh	r2, [r3, #4]
 800069c:	8b3b      	ldrh	r3, [r7, #24]
 800069e:	4313      	orrs	r3, r2
 80006a0:	833b      	strh	r3, [r7, #24]
          break;
 80006a2:	e002      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
          break;
 80006a8:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
 80006ac:	3301      	adds	r3, #1
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	2b21      	cmp	r3, #33	; 0x21
 80006b4:	d9c3      	bls.n	800063e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d014      	beq.n	80006f2 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006c8:	8bbb      	ldrh	r3, [r7, #28]
 80006ca:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff3f 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff55 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f004 f95c 	bl	800499c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006e4:	8bbb      	ldrh	r3, [r7, #28]
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f004 fac5 	bl	8004c7c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006f2:	8b7b      	ldrh	r3, [r7, #26]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d012      	beq.n	800071e <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80006f8:	8b7b      	ldrh	r3, [r7, #26]
 80006fa:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff27 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff3d 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800070e:	f004 f945 	bl	800499c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000712:	8b7b      	ldrh	r3, [r7, #26]
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800071a:	f004 faaf 	bl	8004c7c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800071e:	8b3b      	ldrh	r3, [r7, #24]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d013      	beq.n	800074c <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000724:	8b3b      	ldrh	r3, [r7, #24]
 8000726:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	2004      	movs	r0, #4
 800072a:	f7ff ff11 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800072e:	2004      	movs	r0, #4
 8000730:	f7ff ff27 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800073a:	f004 f92f 	bl	800499c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800073e:	8b3b      	ldrh	r3, [r7, #24]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000746:	f004 fa99 	bl	8004c7c <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800074a:	bf00      	nop
 800074c:	bf00      	nop
}
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800c098 	.word	0x0800c098
 8000758:	48000800 	.word	0x48000800
 800075c:	48000400 	.word	0x48000400

08000760 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000764:	bf00      	nop
}
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000772:	f001 fa7f 	bl	8001c74 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000776:	bf00      	nop
}
 8000778:	bd80      	pop	{r7, pc}

0800077a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	460b      	mov	r3, r1
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000788:	897a      	ldrh	r2, [r7, #10]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	2000      	movs	r0, #0
 8000790:	f000 ffbc 	bl	800170c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000794:	bf00      	nop
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007aa:	f023 0207 	bic.w	r2, r3, #7
 80007ae:	4905      	ldr	r1, [pc, #20]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	58000400 	.word	0x58000400

080007c8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80007d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80007da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	608b      	str	r3, [r1, #8]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80007f4:	f000 f814 	bl	8000820 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80007f8:	4908      	ldr	r1, [pc, #32]	; (800081c <APPE_Init+0x2c>)
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fd04 	bl	8001208 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000800:	f7ff fedb 	bl	80005ba <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000804:	2101      	movs	r1, #1
 8000806:	2001      	movs	r0, #1
 8000808:	f009 fec2 	bl	800a590 <UTIL_LPM_SetOffMode>

  Led_Init();
 800080c:	f000 f867 	bl	80008de <Led_Init>

  Button_Init();
 8000810:	f000 f875 	bl	80008fe <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000814:	f000 f812 	bl	800083c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000818:	bf00      	nop
}
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20001554 	.word	0x20001554

08000820 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000824:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000828:	f7ff ffce 	bl	80007c8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800082c:	f009 fe9e 	bl	800a56c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000830:	2004      	movs	r0, #4
 8000832:	f7ff ffb3 	bl	800079c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000836:	bf00      	nop
}
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000842:	f009 fc51 	bl	800a0e8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <appe_Tl_Init+0x50>)
 8000848:	2100      	movs	r1, #0
 800084a:	2040      	movs	r0, #64	; 0x40
 800084c:	f009 ffb4 	bl	800a7b8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <appe_Tl_Init+0x54>)
 8000852:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <appe_Tl_Init+0x58>)
 8000856:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	480e      	ldr	r0, [pc, #56]	; (8000898 <appe_Tl_Init+0x5c>)
 800085e:	f008 fd11 	bl	8009284 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <appe_Tl_Init+0x60>)
 8000864:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <appe_Tl_Init+0x64>)
 8000868:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <appe_Tl_Init+0x68>)
 800086c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800086e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000872:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	4618      	mov	r0, r3
 800087a:	f009 fd77 	bl	800a36c <TL_MM_Init>

  TL_Enable();
 800087e:	f009 fc2d 	bl	800a0dc <TL_Enable>

  return;
 8000882:	bf00      	nop
}
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	080092bd 	.word	0x080092bd
 8000890:	20030724 	.word	0x20030724
 8000894:	080008a9 	.word	0x080008a9
 8000898:	080008bf 	.word	0x080008bf
 800089c:	2003093c 	.word	0x2003093c
 80008a0:	20030830 	.word	0x20030830
 80008a4:	200301e8 	.word	0x200301e8

080008a8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80008b2:	bf00      	nop
}
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80008c6:	f7ff fe8b 	bl	80005e0 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80008ca:	f001 fe05 	bl	80024d8 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2001      	movs	r0, #1
 80008d2:	f009 fe5d 	bl	800a590 <UTIL_LPM_SetOffMode>
  return;
 80008d6:	bf00      	nop
}
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f003 f95a 	bl	8003b9c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f003 f957 	bl	8003b9c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008ee:	2002      	movs	r0, #2
 80008f0:	f003 f954 	bl	8003b9c <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f003 f98b 	bl	8003c10 <BSP_LED_On>
#endif

  return;
 80008fa:	bf00      	nop
}
 80008fc:	bd80      	pop	{r7, pc}

080008fe <Button_Init>:

static void Button_Init( void )
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000902:	2101      	movs	r1, #1
 8000904:	2000      	movs	r0, #0
 8000906:	f003 f9b7 	bl	8003c78 <BSP_PB_Init>
#endif

  return;
 800090a:	bf00      	nop
}
 800090c:	bd80      	pop	{r7, pc}

0800090e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000912:	bf00      	nop
}
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800092a:	f009 fe61 	bl	800a5f0 <UTIL_SEQ_Run>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800093e:	2100      	movs	r1, #0
 8000940:	2040      	movs	r0, #64	; 0x40
 8000942:	f009 ff5b 	bl	800a7fc <UTIL_SEQ_SetTask>
  return;
 8000946:	bf00      	nop
}
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000956:	2002      	movs	r0, #2
 8000958:	f009 ffbc 	bl	800a8d4 <UTIL_SEQ_SetEvt>
  return;
 800095c:	bf00      	nop
}
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800096c:	2002      	movs	r0, #2
 800096e:	f009 ffd1 	bl	800a914 <UTIL_SEQ_WaitEvt>
  return;
 8000972:	bf00      	nop
}
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	2b10      	cmp	r3, #16
 8000988:	d006      	beq.n	8000998 <HAL_GPIO_EXTI_Callback+0x1e>
 800098a:	2b10      	cmp	r3, #16
 800098c:	dc0d      	bgt.n	80009aa <HAL_GPIO_EXTI_Callback+0x30>
 800098e:	2b01      	cmp	r3, #1
 8000990:	d005      	beq.n	800099e <HAL_GPIO_EXTI_Callback+0x24>
 8000992:	2b02      	cmp	r3, #2
 8000994:	d006      	beq.n	80009a4 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000996:	e008      	b.n	80009aa <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 8000998:	f001 ffa2 	bl	80028e0 <APP_BLE_Key_Button1_Action>
      break; 
 800099c:	e006      	b.n	80009ac <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 800099e:	f001 ffaf 	bl	8002900 <APP_BLE_Key_Button2_Action>
      break; 
 80009a2:	e003      	b.n	80009ac <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80009a4:	f001 ffb3 	bl	800290e <APP_BLE_Key_Button3_Action>
      break;
 80009a8:	e000      	b.n	80009ac <HAL_GPIO_EXTI_Callback+0x32>
      break;
 80009aa:	bf00      	nop

  }
  return;
 80009ac:	bf00      	nop
}
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <LL_EXTI_EnableIT_0_31>:
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80009be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80009c2:	4905      	ldr	r1, [pc, #20]	; (80009d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	58000800 	.word	0x58000800

080009dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4904      	ldr	r1, [pc, #16]	; (80009fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	600b      	str	r3, [r1, #0]

}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	58000800 	.word	0x58000800

08000a00 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <ReadRtcSsrValue+0x3c>)
 8000a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <ReadRtcSsrValue+0x3c>)
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a16:	e005      	b.n	8000a24 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <ReadRtcSsrValue+0x3c>)
 8000a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d1f5      	bne.n	8000a18 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a2c:	683b      	ldr	r3, [r7, #0]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40002800 	.word	0x40002800

08000a40 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	460a      	mov	r2, r1
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a50:	79ba      	ldrb	r2, [r7, #6]
 8000a52:	491d      	ldr	r1, [pc, #116]	; (8000ac8 <LinkTimerAfter+0x88>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	440b      	add	r3, r1
 8000a5e:	3315      	adds	r3, #21
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d009      	beq.n	8000a7e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a6a:	7bfa      	ldrb	r2, [r7, #15]
 8000a6c:	4916      	ldr	r1, [pc, #88]	; (8000ac8 <LinkTimerAfter+0x88>)
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	440b      	add	r3, r1
 8000a78:	3314      	adds	r3, #20
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	4911      	ldr	r1, [pc, #68]	; (8000ac8 <LinkTimerAfter+0x88>)
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	440b      	add	r3, r1
 8000a8c:	3315      	adds	r3, #21
 8000a8e:	7bfa      	ldrb	r2, [r7, #15]
 8000a90:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <LinkTimerAfter+0x88>)
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3314      	adds	r3, #20
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000aa6:	79ba      	ldrb	r2, [r7, #6]
 8000aa8:	4907      	ldr	r1, [pc, #28]	; (8000ac8 <LinkTimerAfter+0x88>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3315      	adds	r3, #21
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	701a      	strb	r2, [r3, #0]

  return;
 8000aba:	bf00      	nop
}
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000094 	.word	0x20000094

08000acc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	460a      	mov	r2, r1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <LinkTimerBefore+0xb8>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	79ba      	ldrb	r2, [r7, #6]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d032      	beq.n	8000b4e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000ae8:	79ba      	ldrb	r2, [r7, #6]
 8000aea:	4927      	ldr	r1, [pc, #156]	; (8000b88 <LinkTimerBefore+0xbc>)
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	440b      	add	r3, r1
 8000af6:	3314      	adds	r3, #20
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000afc:	7bfa      	ldrb	r2, [r7, #15]
 8000afe:	4922      	ldr	r1, [pc, #136]	; (8000b88 <LinkTimerBefore+0xbc>)
 8000b00:	4613      	mov	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	440b      	add	r3, r1
 8000b0a:	3315      	adds	r3, #21
 8000b0c:	79fa      	ldrb	r2, [r7, #7]
 8000b0e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b10:	79fa      	ldrb	r2, [r7, #7]
 8000b12:	491d      	ldr	r1, [pc, #116]	; (8000b88 <LinkTimerBefore+0xbc>)
 8000b14:	4613      	mov	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	4413      	add	r3, r2
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	440b      	add	r3, r1
 8000b1e:	3315      	adds	r3, #21
 8000b20:	79ba      	ldrb	r2, [r7, #6]
 8000b22:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	4918      	ldr	r1, [pc, #96]	; (8000b88 <LinkTimerBefore+0xbc>)
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	440b      	add	r3, r1
 8000b32:	3314      	adds	r3, #20
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b38:	79ba      	ldrb	r2, [r7, #6]
 8000b3a:	4913      	ldr	r1, [pc, #76]	; (8000b88 <LinkTimerBefore+0xbc>)
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	440b      	add	r3, r1
 8000b46:	3314      	adds	r3, #20
 8000b48:	79fa      	ldrb	r2, [r7, #7]
 8000b4a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b4c:	e014      	b.n	8000b78 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	490d      	ldr	r1, [pc, #52]	; (8000b88 <LinkTimerBefore+0xbc>)
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3315      	adds	r3, #21
 8000b5e:	79ba      	ldrb	r2, [r7, #6]
 8000b60:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b62:	79ba      	ldrb	r2, [r7, #6]
 8000b64:	4908      	ldr	r1, [pc, #32]	; (8000b88 <LinkTimerBefore+0xbc>)
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3314      	adds	r3, #20
 8000b72:	79fa      	ldrb	r2, [r7, #7]
 8000b74:	701a      	strb	r2, [r3, #0]
  return;
 8000b76:	bf00      	nop
}
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000124 	.word	0x20000124
 8000b88:	20000094 	.word	0x20000094

08000b8c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b96:	4b4e      	ldr	r3, [pc, #312]	; (8000cd0 <linkTimer+0x144>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	d118      	bne.n	8000bd2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ba0:	4b4b      	ldr	r3, [pc, #300]	; (8000cd0 <linkTimer+0x144>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <linkTimer+0x148>)
 8000ba8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000baa:	4a49      	ldr	r2, [pc, #292]	; (8000cd0 <linkTimer+0x144>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bb0:	79fa      	ldrb	r2, [r7, #7]
 8000bb2:	4949      	ldr	r1, [pc, #292]	; (8000cd8 <linkTimer+0x14c>)
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	440b      	add	r3, r1
 8000bbe:	3315      	adds	r3, #21
 8000bc0:	2206      	movs	r2, #6
 8000bc2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bc4:	4b45      	ldr	r3, [pc, #276]	; (8000cdc <linkTimer+0x150>)
 8000bc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	81fb      	strh	r3, [r7, #14]
 8000bd0:	e078      	b.n	8000cc4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bd2:	f000 f909 	bl	8000de8 <ReturnTimeElapsed>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000bda:	79fa      	ldrb	r2, [r7, #7]
 8000bdc:	493e      	ldr	r1, [pc, #248]	; (8000cd8 <linkTimer+0x14c>)
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	440b      	add	r3, r1
 8000be8:	3308      	adds	r3, #8
 8000bea:	6819      	ldr	r1, [r3, #0]
 8000bec:	89fb      	ldrh	r3, [r7, #14]
 8000bee:	79fa      	ldrb	r2, [r7, #7]
 8000bf0:	4419      	add	r1, r3
 8000bf2:	4839      	ldr	r0, [pc, #228]	; (8000cd8 <linkTimer+0x14c>)
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	4413      	add	r3, r2
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4403      	add	r3, r0
 8000bfe:	3308      	adds	r3, #8
 8000c00:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	4934      	ldr	r1, [pc, #208]	; (8000cd8 <linkTimer+0x14c>)
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	440b      	add	r3, r1
 8000c10:	3308      	adds	r3, #8
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <linkTimer+0x144>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4a2e      	ldr	r2, [pc, #184]	; (8000cd8 <linkTimer+0x14c>)
 8000c20:	460b      	mov	r3, r1
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	440b      	add	r3, r1
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	4413      	add	r3, r2
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d337      	bcc.n	8000ca4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <linkTimer+0x144>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c3a:	7b7a      	ldrb	r2, [r7, #13]
 8000c3c:	4926      	ldr	r1, [pc, #152]	; (8000cd8 <linkTimer+0x14c>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	3315      	adds	r3, #21
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c4e:	e013      	b.n	8000c78 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c50:	7b7a      	ldrb	r2, [r7, #13]
 8000c52:	4921      	ldr	r1, [pc, #132]	; (8000cd8 <linkTimer+0x14c>)
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	440b      	add	r3, r1
 8000c5e:	3315      	adds	r3, #21
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c64:	7b7a      	ldrb	r2, [r7, #13]
 8000c66:	491c      	ldr	r1, [pc, #112]	; (8000cd8 <linkTimer+0x14c>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3315      	adds	r3, #21
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c78:	7b3b      	ldrb	r3, [r7, #12]
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d00b      	beq.n	8000c96 <linkTimer+0x10a>
 8000c7e:	7b3a      	ldrb	r2, [r7, #12]
 8000c80:	4915      	ldr	r1, [pc, #84]	; (8000cd8 <linkTimer+0x14c>)
 8000c82:	4613      	mov	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68ba      	ldr	r2, [r7, #8]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d2dc      	bcs.n	8000c50 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000c96:	7b7a      	ldrb	r2, [r7, #13]
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fecf 	bl	8000a40 <LinkTimerAfter>
 8000ca2:	e00f      	b.n	8000cc4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <linkTimer+0x144>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff0c 	bl	8000acc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <linkTimer+0x144>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <linkTimer+0x148>)
 8000cbc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <linkTimer+0x144>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000cc4:	89fb      	ldrh	r3, [r7, #14]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000124 	.word	0x20000124
 8000cd4:	20000125 	.word	0x20000125
 8000cd8:	20000094 	.word	0x20000094
 8000cdc:	20000128 	.word	0x20000128

08000ce0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	460a      	mov	r2, r1
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	4613      	mov	r3, r2
 8000cee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000cf0:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <UnlinkTimer+0xf8>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	79fa      	ldrb	r2, [r7, #7]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d111      	bne.n	8000d20 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000cfc:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <UnlinkTimer+0xf8>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <UnlinkTimer+0xfc>)
 8000d04:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d06:	79fa      	ldrb	r2, [r7, #7]
 8000d08:	4935      	ldr	r1, [pc, #212]	; (8000de0 <UnlinkTimer+0x100>)
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	3315      	adds	r3, #21
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <UnlinkTimer+0xf8>)
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	e03e      	b.n	8000d9e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	492f      	ldr	r1, [pc, #188]	; (8000de0 <UnlinkTimer+0x100>)
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3314      	adds	r3, #20
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	492a      	ldr	r1, [pc, #168]	; (8000de0 <UnlinkTimer+0x100>)
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	440b      	add	r3, r1
 8000d42:	3315      	adds	r3, #21
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d48:	79f9      	ldrb	r1, [r7, #7]
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	4824      	ldr	r0, [pc, #144]	; (8000de0 <UnlinkTimer+0x100>)
 8000d4e:	460b      	mov	r3, r1
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	440b      	add	r3, r1
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4403      	add	r3, r0
 8000d58:	3315      	adds	r3, #21
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2d8      	uxtb	r0, r3
 8000d5e:	4920      	ldr	r1, [pc, #128]	; (8000de0 <UnlinkTimer+0x100>)
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	440b      	add	r3, r1
 8000d6a:	3315      	adds	r3, #21
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d013      	beq.n	8000d9e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000d76:	79f9      	ldrb	r1, [r7, #7]
 8000d78:	7bba      	ldrb	r2, [r7, #14]
 8000d7a:	4819      	ldr	r0, [pc, #100]	; (8000de0 <UnlinkTimer+0x100>)
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	440b      	add	r3, r1
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	4403      	add	r3, r0
 8000d86:	3314      	adds	r3, #20
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2d8      	uxtb	r0, r3
 8000d8c:	4914      	ldr	r1, [pc, #80]	; (8000de0 <UnlinkTimer+0x100>)
 8000d8e:	4613      	mov	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	440b      	add	r3, r1
 8000d98:	3314      	adds	r3, #20
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000d9e:	79fa      	ldrb	r2, [r7, #7]
 8000da0:	490f      	ldr	r1, [pc, #60]	; (8000de0 <UnlinkTimer+0x100>)
 8000da2:	4613      	mov	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	440b      	add	r3, r1
 8000dac:	330c      	adds	r3, #12
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <UnlinkTimer+0xf8>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b06      	cmp	r3, #6
 8000dba:	d107      	bne.n	8000dcc <UnlinkTimer+0xec>
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d104      	bne.n	8000dcc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <UnlinkTimer+0x104>)
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  return;
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
}
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	20000124 	.word	0x20000124
 8000ddc:	20000125 	.word	0x20000125
 8000de0:	20000094 	.word	0x20000094
 8000de4:	20000128 	.word	0x20000128

08000de8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <ReturnTimeElapsed+0x70>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df6:	d026      	beq.n	8000e46 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000df8:	f7ff fe02 	bl	8000a00 <ReadRtcSsrValue>
 8000dfc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <ReturnTimeElapsed+0x70>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d805      	bhi.n	8000e14 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <ReturnTimeElapsed+0x70>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	e00a      	b.n	8000e2a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <ReturnTimeElapsed+0x74>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <ReturnTimeElapsed+0x70>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <ReturnTimeElapsed+0x78>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	fb02 f303 	mul.w	r3, r2, r3
 8000e36:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <ReturnTimeElapsed+0x7c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	40d3      	lsrs	r3, r2
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	e001      	b.n	8000e4a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	b29b      	uxth	r3, r3
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000128 	.word	0x20000128
 8000e5c:	2000023e 	.word	0x2000023e
 8000e60:	2000023d 	.word	0x2000023d
 8000e64:	2000023c 	.word	0x2000023c

08000e68 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d108      	bne.n	8000e8a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e78:	f7ff fdc2 	bl	8000a00 <ReadRtcSsrValue>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a24      	ldr	r2, [pc, #144]	; (8000f10 <RestartWakeupCounter+0xa8>)
 8000e80:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e82:	2003      	movs	r0, #3
 8000e84:	f003 f9fb 	bl	800427e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000e88:	e03e      	b.n	8000f08 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d803      	bhi.n	8000e98 <RestartWakeupCounter+0x30>
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <RestartWakeupCounter+0xac>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d002      	beq.n	8000e9e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000e9e:	bf00      	nop
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <RestartWakeupCounter+0xb0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f7      	beq.n	8000ea0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <RestartWakeupCounter+0xb0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <RestartWakeupCounter+0xb0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ec4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <RestartWakeupCounter+0xb4>)
 8000ec8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ecc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f003 f9e3 	bl	800429a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <RestartWakeupCounter+0xb8>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	0c1b      	lsrs	r3, r3, #16
 8000eda:	041b      	lsls	r3, r3, #16
 8000edc:	88fa      	ldrh	r2, [r7, #6]
 8000ede:	4910      	ldr	r1, [pc, #64]	; (8000f20 <RestartWakeupCounter+0xb8>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ee4:	f7ff fd8c 	bl	8000a00 <ReadRtcSsrValue>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <RestartWakeupCounter+0xa8>)
 8000eec:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <RestartWakeupCounter+0xb0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <RestartWakeupCounter+0xb0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f00:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f02:	f3af 8000 	nop.w
  return ;
 8000f06:	bf00      	nop
}
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000128 	.word	0x20000128
 8000f14:	2000023c 	.word	0x2000023c
 8000f18:	20000238 	.word	0x20000238
 8000f1c:	58000800 	.word	0x58000800
 8000f20:	40002800 	.word	0x40002800

08000f24 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f2a:	4b47      	ldr	r3, [pc, #284]	; (8001048 <RescheduleTimerList+0x124>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f36:	d108      	bne.n	8000f4a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000f38:	bf00      	nop
 8000f3a:	4b44      	ldr	r3, [pc, #272]	; (800104c <RescheduleTimerList+0x128>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f7      	bne.n	8000f3a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000f4a:	4b40      	ldr	r3, [pc, #256]	; (800104c <RescheduleTimerList+0x128>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	4b3e      	ldr	r3, [pc, #248]	; (800104c <RescheduleTimerList+0x128>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f5c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f5e:	4b3c      	ldr	r3, [pc, #240]	; (8001050 <RescheduleTimerList+0x12c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	493b      	ldr	r1, [pc, #236]	; (8001054 <RescheduleTimerList+0x130>)
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	3308      	adds	r3, #8
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f78:	f7ff ff36 	bl	8000de8 <ReturnTimeElapsed>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d205      	bcs.n	8000f94 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <RescheduleTimerList+0x134>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e04d      	b.n	8001030 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	4a31      	ldr	r2, [pc, #196]	; (800105c <RescheduleTimerList+0x138>)
 8000f98:	8812      	ldrh	r2, [r2, #0]
 8000f9a:	b292      	uxth	r2, r2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d906      	bls.n	8000fb4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <RescheduleTimerList+0x138>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fac:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <RescheduleTimerList+0x134>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e03d      	b.n	8001030 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <RescheduleTimerList+0x134>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fc4:	e034      	b.n	8001030 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	4922      	ldr	r1, [pc, #136]	; (8001054 <RescheduleTimerList+0x130>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3308      	adds	r3, #8
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d20a      	bcs.n	8000ff4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	491c      	ldr	r1, [pc, #112]	; (8001054 <RescheduleTimerList+0x130>)
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	440b      	add	r3, r1
 8000fec:	3308      	adds	r3, #8
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e013      	b.n	800101c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	4917      	ldr	r1, [pc, #92]	; (8001054 <RescheduleTimerList+0x130>)
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	3308      	adds	r3, #8
 8001004:	6819      	ldr	r1, [r3, #0]
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	1ac9      	subs	r1, r1, r3
 800100c:	4811      	ldr	r0, [pc, #68]	; (8001054 <RescheduleTimerList+0x130>)
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4403      	add	r3, r0
 8001018:	3308      	adds	r3, #8
 800101a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	490d      	ldr	r1, [pc, #52]	; (8001054 <RescheduleTimerList+0x130>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	3315      	adds	r3, #21
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b06      	cmp	r3, #6
 8001034:	d1c7      	bne.n	8000fc6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001036:	89bb      	ldrh	r3, [r7, #12]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff15 	bl	8000e68 <RestartWakeupCounter>

  return ;
 800103e:	bf00      	nop
}
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40002800 	.word	0x40002800
 800104c:	20000238 	.word	0x20000238
 8001050:	20000124 	.word	0x20000124
 8001054:	20000094 	.word	0x20000094
 8001058:	2000012c 	.word	0x2000012c
 800105c:	20000240 	.word	0x20000240

08001060 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001066:	f3ef 8310 	mrs	r3, PRIMASK
 800106a:	617b      	str	r3, [r7, #20]
  return(result);
 800106c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001074:	4b5f      	ldr	r3, [pc, #380]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	22ca      	movs	r2, #202	; 0xca
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
 800107e:	4b5d      	ldr	r3, [pc, #372]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2253      	movs	r2, #83	; 0x53
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001088:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	4b58      	ldr	r3, [pc, #352]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800109a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800109c:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010a4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010a8:	4954      	ldr	r1, [pc, #336]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	440b      	add	r3, r1
 80010b4:	330c      	adds	r3, #12
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d172      	bne.n	80011a4 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010be:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010c2:	494e      	ldr	r1, [pc, #312]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010d2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010d6:	4949      	ldr	r1, [pc, #292]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	3310      	adds	r3, #16
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80010e8:	4b45      	ldr	r3, [pc, #276]	; (8001200 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d050      	beq.n	8001194 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80010f2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010f6:	4941      	ldr	r1, [pc, #260]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	330d      	adds	r3, #13
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d126      	bne.n	800115a <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800110c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001110:	2101      	movs	r1, #1
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fde4 	bl	8000ce0 <UnlinkTimer>
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	f383 8810 	msr	PRIMASK, r3
}
 8001122:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001124:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001128:	4934      	ldr	r1, [pc, #208]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	440b      	add	r3, r1
 8001134:	3304      	adds	r3, #4
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fa4e 	bl	80015e0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	22ca      	movs	r2, #202	; 0xca
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2253      	movs	r2, #83	; 0x53
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
 8001158:	e014      	b.n	8001184 <HW_TS_RTC_Wakeup_Handler+0x124>
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f383 8810 	msr	PRIMASK, r3
}
 8001164:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001166:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f9ac 	bl	80014c8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	22ca      	movs	r2, #202	; 0xca
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
 800117a:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2253      	movs	r2, #83	; 0x53
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	4619      	mov	r1, r3
 800118c:	69b8      	ldr	r0, [r7, #24]
 800118e:	f000 faaf 	bl	80016f0 <HW_TS_RTC_Int_AppNot>
 8001192:	e025      	b.n	80011e0 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001194:	f7ff fec6 	bl	8000f24 <RescheduleTimerList>
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f383 8810 	msr	PRIMASK, r3
}
 80011a2:	e01d      	b.n	80011e0 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011a4:	bf00      	nop
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f7      	beq.n	80011a6 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011ca:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80011ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f383 8810 	msr	PRIMASK, r3
}
 80011de:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	22ff      	movs	r2, #255	; 0xff
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80011ea:	bf00      	nop
}
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000238 	.word	0x20000238
 80011f8:	20000124 	.word	0x20000124
 80011fc:	20000094 	.word	0x20000094
 8001200:	2000012c 	.word	0x2000012c
 8001204:	58000800 	.word	0x58000800

08001208 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001214:	4a64      	ldr	r2, [pc, #400]	; (80013a8 <HW_TS_Init+0x1a0>)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800121a:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <HW_TS_Init+0x1a0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	22ca      	movs	r2, #202	; 0xca
 8001222:	625a      	str	r2, [r3, #36]	; 0x24
 8001224:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <HW_TS_Init+0x1a0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2253      	movs	r2, #83	; 0x53
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800122e:	4b5f      	ldr	r3, [pc, #380]	; (80013ac <HW_TS_Init+0x1a4>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	4a5e      	ldr	r2, [pc, #376]	; (80013ac <HW_TS_Init+0x1a4>)
 8001234:	f043 0320 	orr.w	r3, r3, #32
 8001238:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800123a:	4b5c      	ldr	r3, [pc, #368]	; (80013ac <HW_TS_Init+0x1a4>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f1c3 0304 	rsb	r3, r3, #4
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b58      	ldr	r3, [pc, #352]	; (80013b0 <HW_TS_Init+0x1a8>)
 800124e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001250:	4b56      	ldr	r3, [pc, #344]	; (80013ac <HW_TS_Init+0x1a4>)
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001258:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800125c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	fa92 f2a2 	rbit	r2, r2
 8001264:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	2a00      	cmp	r2, #0
 800126e:	d101      	bne.n	8001274 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001270:	2220      	movs	r2, #32
 8001272:	e003      	b.n	800127c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	fab2 f282 	clz	r2, r2
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	40d3      	lsrs	r3, r2
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3301      	adds	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b4b      	ldr	r3, [pc, #300]	; (80013b4 <HW_TS_Init+0x1ac>)
 8001286:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001288:	4b48      	ldr	r3, [pc, #288]	; (80013ac <HW_TS_Init+0x1a4>)
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	b29b      	uxth	r3, r3
 800128e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001292:	b29b      	uxth	r3, r3
 8001294:	3301      	adds	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <HW_TS_Init+0x1b0>)
 800129a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800129c:	4b46      	ldr	r3, [pc, #280]	; (80013b8 <HW_TS_Init+0x1b0>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	4a44      	ldr	r2, [pc, #272]	; (80013b4 <HW_TS_Init+0x1ac>)
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80012ae:	4a40      	ldr	r2, [pc, #256]	; (80013b0 <HW_TS_Init+0x1a8>)
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	40d3      	lsrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012bc:	4293      	cmp	r3, r2
 80012be:	d904      	bls.n	80012ca <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012c0:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <HW_TS_Init+0x1b4>)
 80012c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c6:	801a      	strh	r2, [r3, #0]
 80012c8:	e003      	b.n	80012d2 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <HW_TS_Init+0x1b4>)
 80012d0:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012d2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012d6:	f7ff fb81 	bl	80009dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012da:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012de:	f7ff fb69 	bl	80009b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d143      	bne.n	8001370 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012e8:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <HW_TS_Init+0x1b8>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012ee:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <HW_TS_Init+0x1bc>)
 80012f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	77fb      	strb	r3, [r7, #31]
 80012fa:	e00c      	b.n	8001316 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80012fc:	7ffa      	ldrb	r2, [r7, #31]
 80012fe:	4932      	ldr	r1, [pc, #200]	; (80013c8 <HW_TS_Init+0x1c0>)
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	330c      	adds	r3, #12
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001310:	7ffb      	ldrb	r3, [r7, #31]
 8001312:	3301      	adds	r3, #1
 8001314:	77fb      	strb	r3, [r7, #31]
 8001316:	7ffb      	ldrb	r3, [r7, #31]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d9ef      	bls.n	80012fc <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HW_TS_Init+0x1c4>)
 800131e:	2206      	movs	r2, #6
 8001320:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <HW_TS_Init+0x1a0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <HW_TS_Init+0x1a0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001334:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <HW_TS_Init+0x1a0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HW_TS_Init+0x1a0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800134a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HW_TS_Init+0x1c8>)
 800134e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001352:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001354:	2003      	movs	r0, #3
 8001356:	f002 ffa0 	bl	800429a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HW_TS_Init+0x1a0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HW_TS_Init+0x1a0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	e00a      	b.n	8001386 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HW_TS_Init+0x1a0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001380:	2003      	movs	r0, #3
 8001382:	f002 ff7c 	bl	800427e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HW_TS_Init+0x1a0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	22ff      	movs	r2, #255	; 0xff
 800138e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001390:	2200      	movs	r2, #0
 8001392:	2103      	movs	r1, #3
 8001394:	2003      	movs	r0, #3
 8001396:	f002 ff30 	bl	80041fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800139a:	2003      	movs	r0, #3
 800139c:	f002 ff47 	bl	800422e <HAL_NVIC_EnableIRQ>

  return;
 80013a0:	bf00      	nop
}
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000238 	.word	0x20000238
 80013ac:	40002800 	.word	0x40002800
 80013b0:	2000023c 	.word	0x2000023c
 80013b4:	2000023d 	.word	0x2000023d
 80013b8:	2000023e 	.word	0x2000023e
 80013bc:	20000240 	.word	0x20000240
 80013c0:	2000012c 	.word	0x2000012c
 80013c4:	20000128 	.word	0x20000128
 80013c8:	20000094 	.word	0x20000094
 80013cc:	20000124 	.word	0x20000124
 80013d0:	58000800 	.word	0x58000800

080013d4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b08b      	sub	sp, #44	; 0x2c
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	4613      	mov	r3, r2
 80013e2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013ea:	f3ef 8310 	mrs	r3, PRIMASK
 80013ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80013f0:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80013f8:	e004      	b.n	8001404 <HW_TS_Create+0x30>
  {
    loop++;
 80013fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013fe:	3301      	adds	r3, #1
 8001400:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001404:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001408:	2b05      	cmp	r3, #5
 800140a:	d80c      	bhi.n	8001426 <HW_TS_Create+0x52>
 800140c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001410:	492c      	ldr	r1, [pc, #176]	; (80014c4 <HW_TS_Create+0xf0>)
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	440b      	add	r3, r1
 800141c:	330c      	adds	r3, #12
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1e9      	bne.n	80013fa <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001426:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800142a:	2b06      	cmp	r3, #6
 800142c:	d038      	beq.n	80014a0 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800142e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001432:	4924      	ldr	r1, [pc, #144]	; (80014c4 <HW_TS_Create+0xf0>)
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	330c      	adds	r3, #12
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	f383 8810 	msr	PRIMASK, r3
}
 800144e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001450:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001454:	491b      	ldr	r1, [pc, #108]	; (80014c4 <HW_TS_Create+0xf0>)
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	3310      	adds	r3, #16
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001466:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800146a:	4916      	ldr	r1, [pc, #88]	; (80014c4 <HW_TS_Create+0xf0>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	330d      	adds	r3, #13
 8001478:	79fa      	ldrb	r2, [r7, #7]
 800147a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800147c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001480:	4910      	ldr	r1, [pc, #64]	; (80014c4 <HW_TS_Create+0xf0>)
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001496:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800149e:	e008      	b.n	80014b2 <HW_TS_Create+0xde>
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f383 8810 	msr	PRIMASK, r3
}
 80014aa:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80014b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	372c      	adds	r7, #44	; 0x2c
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000094 	.word	0x20000094

080014c8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014d2:	f3ef 8310 	mrs	r3, PRIMASK
 80014d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80014d8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014dc:	b672      	cpsid	i
}
 80014de:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014e0:	2003      	movs	r0, #3
 80014e2:	f002 feb2 	bl	800424a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <HW_TS_Stop+0x100>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	22ca      	movs	r2, #202	; 0xca
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
 80014f0:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HW_TS_Stop+0x100>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2253      	movs	r2, #83	; 0x53
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80014fa:	79fa      	ldrb	r2, [r7, #7]
 80014fc:	4933      	ldr	r1, [pc, #204]	; (80015cc <HW_TS_Stop+0x104>)
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	330c      	adds	r3, #12
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d148      	bne.n	80015a4 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fbe2 	bl	8000ce0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <HW_TS_Stop+0x108>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001522:	7cfb      	ldrb	r3, [r7, #19]
 8001524:	2b06      	cmp	r3, #6
 8001526:	d135      	bne.n	8001594 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <HW_TS_Stop+0x10c>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001534:	d108      	bne.n	8001548 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001536:	bf00      	nop
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <HW_TS_Stop+0x100>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f7      	bne.n	8001538 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <HW_TS_Stop+0x100>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HW_TS_Stop+0x100>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800155a:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800155c:	bf00      	nop
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <HW_TS_Stop+0x100>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f7      	beq.n	800155e <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HW_TS_Stop+0x100>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HW_TS_Stop+0x100>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001582:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HW_TS_Stop+0x110>)
 8001586:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800158a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800158c:	2003      	movs	r0, #3
 800158e:	f002 fe84 	bl	800429a <HAL_NVIC_ClearPendingIRQ>
 8001592:	e007      	b.n	80015a4 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HW_TS_Stop+0x114>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	7cfa      	ldrb	r2, [r7, #19]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80015a0:	f7ff fcc0 	bl	8000f24 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HW_TS_Stop+0x100>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	22ff      	movs	r2, #255	; 0xff
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015ae:	2003      	movs	r0, #3
 80015b0:	f002 fe3d 	bl	800422e <HAL_NVIC_EnableIRQ>
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f383 8810 	msr	PRIMASK, r3
}
 80015be:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015c0:	bf00      	nop
}
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000238 	.word	0x20000238
 80015cc:	20000094 	.word	0x20000094
 80015d0:	20000124 	.word	0x20000124
 80015d4:	40002800 	.word	0x40002800
 80015d8:	58000800 	.word	0x58000800
 80015dc:	20000125 	.word	0x20000125

080015e0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	493c      	ldr	r1, [pc, #240]	; (80016e0 <HW_TS_Start+0x100>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	330c      	adds	r3, #12
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d103      	bne.n	800160c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ff5e 	bl	80014c8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800160c:	f3ef 8310 	mrs	r3, PRIMASK
 8001610:	60fb      	str	r3, [r7, #12]
  return(result);
 8001612:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001614:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001616:	b672      	cpsid	i
}
 8001618:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800161a:	2003      	movs	r0, #3
 800161c:	f002 fe15 	bl	800424a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HW_TS_Start+0x104>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	22ca      	movs	r2, #202	; 0xca
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <HW_TS_Start+0x104>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2253      	movs	r2, #83	; 0x53
 8001632:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	492a      	ldr	r1, [pc, #168]	; (80016e0 <HW_TS_Start+0x100>)
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	330c      	adds	r3, #12
 8001644:	2202      	movs	r2, #2
 8001646:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001648:	79fa      	ldrb	r2, [r7, #7]
 800164a:	4925      	ldr	r1, [pc, #148]	; (80016e0 <HW_TS_Start+0x100>)
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	440b      	add	r3, r1
 8001656:	3308      	adds	r3, #8
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800165c:	79fa      	ldrb	r2, [r7, #7]
 800165e:	4920      	ldr	r1, [pc, #128]	; (80016e0 <HW_TS_Start+0x100>)
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	440b      	add	r3, r1
 800166a:	3304      	adds	r3, #4
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fa8a 	bl	8000b8c <linkTimer>
 8001678:	4603      	mov	r3, r0
 800167a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HW_TS_Start+0x108>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HW_TS_Start+0x10c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	7c7a      	ldrb	r2, [r7, #17]
 800168a:	429a      	cmp	r2, r3
 800168c:	d002      	beq.n	8001694 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800168e:	f7ff fc49 	bl	8000f24 <RescheduleTimerList>
 8001692:	e013      	b.n	80016bc <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001694:	79fa      	ldrb	r2, [r7, #7]
 8001696:	4912      	ldr	r1, [pc, #72]	; (80016e0 <HW_TS_Start+0x100>)
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	3308      	adds	r3, #8
 80016a4:	6819      	ldr	r1, [r3, #0]
 80016a6:	8a7b      	ldrh	r3, [r7, #18]
 80016a8:	79fa      	ldrb	r2, [r7, #7]
 80016aa:	1ac9      	subs	r1, r1, r3
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <HW_TS_Start+0x100>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4403      	add	r3, r0
 80016b8:	3308      	adds	r3, #8
 80016ba:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HW_TS_Start+0x104>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	22ff      	movs	r2, #255	; 0xff
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016c6:	2003      	movs	r0, #3
 80016c8:	f002 fdb1 	bl	800422e <HAL_NVIC_EnableIRQ>
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f383 8810 	msr	PRIMASK, r3
}
 80016d6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016d8:	bf00      	nop
}
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000094 	.word	0x20000094
 80016e4:	20000238 	.word	0x20000238
 80016e8:	20000124 	.word	0x20000124
 80016ec:	20000125 	.word	0x20000125

080016f0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	460b      	mov	r3, r1
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4798      	blx	r3

  return;
 8001702:	bf00      	nop
}
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	4613      	mov	r3, r2
 800171c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001722:	2300      	movs	r3, #0
 8001724:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10e      	bne.n	800174a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 800172c:	4a17      	ldr	r2, [pc, #92]	; (800178c <HW_UART_Transmit_DMA+0x80>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HW_UART_Transmit_DMA+0x84>)
 8001734:	4a17      	ldr	r2, [pc, #92]	; (8001794 <HW_UART_Transmit_DMA+0x88>)
 8001736:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001738:	89bb      	ldrh	r3, [r7, #12]
 800173a:	461a      	mov	r2, r3
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	4814      	ldr	r0, [pc, #80]	; (8001790 <HW_UART_Transmit_DMA+0x84>)
 8001740:	f005 faf2 	bl	8006d28 <HAL_UART_Transmit_DMA>
 8001744:	4603      	mov	r3, r0
 8001746:	75fb      	strb	r3, [r7, #23]
            break;
 8001748:	e000      	b.n	800174c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800174a:	bf00      	nop
    }

    switch (hal_status)
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d816      	bhi.n	8001780 <HW_UART_Transmit_DMA+0x74>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <HW_UART_Transmit_DMA+0x4c>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	08001769 	.word	0x08001769
 800175c:	0800176f 	.word	0x0800176f
 8001760:	08001775 	.word	0x08001775
 8001764:	0800177b 	.word	0x0800177b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001768:	2300      	movs	r3, #0
 800176a:	75bb      	strb	r3, [r7, #22]
            break;
 800176c:	e009      	b.n	8001782 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800176e:	2301      	movs	r3, #1
 8001770:	75bb      	strb	r3, [r7, #22]
            break;
 8001772:	e006      	b.n	8001782 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001774:	2302      	movs	r3, #2
 8001776:	75bb      	strb	r3, [r7, #22]
            break;
 8001778:	e003      	b.n	8001782 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800177a:	2303      	movs	r3, #3
 800177c:	75bb      	strb	r3, [r7, #22]
            break;
 800177e:	e000      	b.n	8001782 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001780:	bf00      	nop
    }

    return hw_status;
 8001782:	7dbb      	ldrb	r3, [r7, #22]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20001394 	.word	0x20001394
 8001790:	200014c4 	.word	0x200014c4
 8001794:	40013800 	.word	0x40013800

08001798 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_UART_TxCpltCallback+0x34>)
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d107      	bne.n	80017bc <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_UART_TxCpltCallback+0x38>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_UART_TxCpltCallback+0x38>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4798      	blx	r3
            }
            break;
 80017ba:	e001      	b.n	80017c0 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80017bc:	bf00      	nop
 80017be:	e000      	b.n	80017c2 <HAL_UART_TxCpltCallback+0x2a>
            break;
 80017c0:	bf00      	nop
    }

    return;
 80017c2:	bf00      	nop
}
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40013800 	.word	0x40013800
 80017d0:	20001394 	.word	0x20001394

080017d4 <LL_EXTI_DisableIT_0_31>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <LL_EXTI_DisableIT_0_31+0x28>)
 80017de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	4905      	ldr	r1, [pc, #20]	; (80017fc <LL_EXTI_DisableIT_0_31+0x28>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	58000800 	.word	0x58000800

08001800 <LL_EXTI_DisableIT_32_63>:
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <LL_EXTI_DisableIT_32_63+0x28>)
 800180a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	43db      	mvns	r3, r3
 8001812:	4905      	ldr	r1, [pc, #20]	; (8001828 <LL_EXTI_DisableIT_32_63+0x28>)
 8001814:	4013      	ands	r3, r2
 8001816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	58000800 	.word	0x58000800

0800182c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800183a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001846:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001852:	4313      	orrs	r3, r2
 8001854:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	cafecafe 	.word	0xcafecafe

08001868 <LL_RCC_LSE_SetDriveCapability>:
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001878:	f023 0218 	bic.w	r2, r3, #24
 800187c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4313      	orrs	r3, r2
 8001884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80018ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018ec:	d101      	bne.n	80018f2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001912:	d101      	bne.n	8001918 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_AHB1_GRP1_EnableClock>:
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001930:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4313      	orrs	r3, r2
 800193a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001948:	68fb      	ldr	r3, [r7, #12]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_AHB2_GRP1_EnableClock>:
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_AHB3_GRP1_EnableClock>:
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4313      	orrs	r3, r2
 800199e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	605a      	str	r2, [r3, #4]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	605a      	str	r2, [r3, #4]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	615a      	str	r2, [r3, #20]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	615a      	str	r2, [r3, #20]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	609a      	str	r2, [r3, #8]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	619a      	str	r2, [r3, #24]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <LL_LPM_EnableSleep+0x1c>)
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <LL_LPM_EnableSleep+0x1c>)
 8001a8a:	f023 0304 	bic.w	r3, r3, #4
 8001a8e:	6113      	str	r3, [r2, #16]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	22ff      	movs	r2, #255	; 0xff
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	22ca      	movs	r2, #202	; 0xca
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2253      	movs	r2, #83	; 0x53
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 0207 	bic.w	r2, r3, #7
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <main+0x48>)
 8001b06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b0a:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0c:	f002 f99c 	bl	8003e48 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8001b10:	f000 f97f 	bl	8001e12 <Reset_Device>
  Config_HSE();
 8001b14:	f000 f969 	bl	8001dea <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b18:	f000 f818 	bl	8001b4c <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001b1c:	f000 f896 	bl	8001c4c <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8001b20:	f000 f95c 	bl	8001ddc <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8001b24:	f000 f9b7 	bl	8001e96 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b28:	f000 f94b 	bl	8001dc2 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b2c:	f000 f92c 	bl	8001d88 <MX_DMA_Init>
  MX_RF_Init();
 8001b30:	f000 f8ee 	bl	8001d10 <MX_RF_Init>
  MX_RTC_Init();
 8001b34:	f000 f8f4 	bl	8001d20 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001b38:	f7fe fe5a 	bl	80007f0 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b40:	f008 fd56 	bl	800a5f0 <UTIL_SEQ_Run>
 8001b44:	e7fa      	b.n	8001b3c <main+0x3c>
 8001b46:	bf00      	nop
 8001b48:	58004000 	.word	0x58004000

08001b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0ae      	sub	sp, #184	; 0xb8
 8001b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b56:	2248      	movs	r2, #72	; 0x48
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f008 ff9c 	bl	800aa98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
 8001b70:	615a      	str	r2, [r3, #20]
 8001b72:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2250      	movs	r2, #80	; 0x50
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f008 ff8c 	bl	800aa98 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b80:	f003 f956 	bl	8004e30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff fe6f 	bl	8001868 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <SystemClock_Config+0xfc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b92:	4a2d      	ldr	r2, [pc, #180]	; (8001c48 <SystemClock_Config+0xfc>)
 8001b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <SystemClock_Config+0xfc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bba:	2340      	movs	r3, #64	; 0x40
 8001bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fcc4 	bl	8005558 <HAL_RCC_OscConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001bd6:	f000 f98f 	bl	8001ef8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001bda:	236f      	movs	r3, #111	; 0x6f
 8001bdc:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001bde:	2302      	movs	r3, #2
 8001be0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f004 f837 	bl	8005c70 <HAL_RCC_ClockConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c08:	f000 f976 	bl	8001ef8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001c0c:	f643 0303 	movw	r3, #14339	; 0x3803
 8001c10:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001c20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c24:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001c26:	2302      	movs	r3, #2
 8001c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001c2a:	2310      	movs	r3, #16
 8001c2c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	4618      	mov	r0, r3
 8001c32:	f004 fc5e 	bl	80064f2 <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001c3c:	f000 f95c 	bl	8001ef8 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8001c40:	bf00      	nop
 8001c42:	37b8      	adds	r7, #184	; 0xb8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	58000400 	.word	0x58000400

08001c4c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_IPCC_Init+0x20>)
 8001c52:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <MX_IPCC_Init+0x24>)
 8001c54:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_IPCC_Init+0x20>)
 8001c58:	f003 f864 	bl	8004d24 <HAL_IPCC_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001c62:	f000 f949 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20001398 	.word	0x20001398
 8001c70:	58000c00 	.word	0x58000c00

08001c74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001c7a:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <MX_USART1_UART_Init+0x98>)
 8001c7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001ca6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001caa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cbe:	4812      	ldr	r0, [pc, #72]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001cc0:	f004 ffe2 	bl	8006c88 <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001cca:	f000 f915 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	480d      	ldr	r0, [pc, #52]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001cd2:	f005 ffbf 	bl	8007c54 <HAL_UARTEx_SetTxFifoThreshold>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001cdc:	f000 f90c 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4809      	ldr	r0, [pc, #36]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001ce4:	f005 fff4 	bl	8007cd0 <HAL_UARTEx_SetRxFifoThreshold>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001cee:	f000 f903 	bl	8001ef8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_USART1_UART_Init+0x94>)
 8001cf4:	f005 ff75 	bl	8007be2 <HAL_UARTEx_DisableFifoMode>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001cfe:	f000 f8fb 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200014c4 	.word	0x200014c4
 8001d0c:	40013800 	.word	0x40013800

08001d10 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MX_RTC_Init+0x60>)
 8001d26:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <MX_RTC_Init+0x64>)
 8001d28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <MX_RTC_Init+0x60>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <MX_RTC_Init+0x60>)
 8001d32:	220f      	movs	r2, #15
 8001d34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_RTC_Init+0x60>)
 8001d38:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001d3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <MX_RTC_Init+0x60>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_RTC_Init+0x60>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <MX_RTC_Init+0x60>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <MX_RTC_Init+0x60>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d56:	480a      	ldr	r0, [pc, #40]	; (8001d80 <MX_RTC_Init+0x60>)
 8001d58:	f004 fe52 	bl	8006a00 <HAL_RTC_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001d62:	f000 f8c9 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001d66:	4807      	ldr	r0, [pc, #28]	; (8001d84 <MX_RTC_Init+0x64>)
 8001d68:	f7ff fea7 	bl	8001aba <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_RTC_Init+0x64>)
 8001d70:	f7ff feb3 	bl	8001ada <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <MX_RTC_Init+0x64>)
 8001d76:	f7ff fe93 	bl	8001aa0 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20001554 	.word	0x20001554
 8001d84:	40002800 	.word	0x40002800

08001d88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d8c:	2004      	movs	r0, #4
 8001d8e:	f7ff fdc9 	bl	8001924 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d92:	2002      	movs	r0, #2
 8001d94:	f7ff fdc6 	bl	8001924 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff fdc3 	bl	8001924 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	210f      	movs	r1, #15
 8001da2:	200e      	movs	r0, #14
 8001da4:	f002 fa29 	bl	80041fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001da8:	200e      	movs	r0, #14
 8001daa:	f002 fa40 	bl	800422e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	210f      	movs	r1, #15
 8001db2:	203a      	movs	r0, #58	; 0x3a
 8001db4:	f002 fa21 	bl	80041fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001db8:	203a      	movs	r0, #58	; 0x3a
 8001dba:	f002 fa38 	bl	800422e <HAL_NVIC_EnableIRQ>

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	2004      	movs	r0, #4
 8001dc8:	f7ff fdc5 	bl	8001956 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f7ff fdc2 	bl	8001956 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f7ff fdbf 	bl	8001956 <LL_AHB2_GRP1_EnableClock>

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001de0:	bf00      	nop
}
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f007 f9f1 	bl	80091d8 <OTP_Read>
 8001df6:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	799b      	ldrb	r3, [r3, #6]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fd12 	bl	800182c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
}  
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <Reset_Device>:


static void Reset_Device( void )
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001e16:	f000 f827 	bl	8001e68 <Reset_BackupDomain>

	Reset_IPCC();
 8001e1a:	f000 f803 	bl	8001e24 <Reset_IPCC>
#endif

	return;
 8001e1e:	bf00      	nop
}
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001e28:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e2c:	f7ff fdac 	bl	8001988 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001e30:	213f      	movs	r1, #63	; 0x3f
 8001e32:	480c      	ldr	r0, [pc, #48]	; (8001e64 <Reset_IPCC+0x40>)
 8001e34:	f7ff fe07 	bl	8001a46 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001e38:	213f      	movs	r1, #63	; 0x3f
 8001e3a:	480a      	ldr	r0, [pc, #40]	; (8001e64 <Reset_IPCC+0x40>)
 8001e3c:	f7ff fe11 	bl	8001a62 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001e40:	213f      	movs	r1, #63	; 0x3f
 8001e42:	4808      	ldr	r0, [pc, #32]	; (8001e64 <Reset_IPCC+0x40>)
 8001e44:	f7ff fdb9 	bl	80019ba <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001e48:	213f      	movs	r1, #63	; 0x3f
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <Reset_IPCC+0x40>)
 8001e4c:	f7ff fdd8 	bl	8001a00 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001e50:	213f      	movs	r1, #63	; 0x3f
 8001e52:	4804      	ldr	r0, [pc, #16]	; (8001e64 <Reset_IPCC+0x40>)
 8001e54:	f7ff fdc3 	bl	80019de <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001e58:	213f      	movs	r1, #63	; 0x3f
 8001e5a:	4802      	ldr	r0, [pc, #8]	; (8001e64 <Reset_IPCC+0x40>)
 8001e5c:	f7ff fde2 	bl	8001a24 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001e60:	bf00      	nop
}
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	58000c00 	.word	0x58000c00

08001e68 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001e6c:	f7ff fd34 	bl	80018d8 <LL_RCC_IsActiveFlag_PINRST>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00d      	beq.n	8001e92 <Reset_BackupDomain+0x2a>
 8001e76:	f7ff fd42 	bl	80018fe <LL_RCC_IsActiveFlag_SFTRST>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d108      	bne.n	8001e92 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001e80:	f002 ffd6 	bl	8004e30 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001e84:	f002 ffd4 	bl	8004e30 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001e88:	f7ff fd04 	bl	8001894 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001e8c:	f7ff fd13 	bl	80018b6 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
}
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <Init_Exti>:

static void Init_Exti( void )
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e9e:	f7ff fc99 	bl	80017d4 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001ea2:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001ea6:	f7ff fcab 	bl	8001800 <LL_EXTI_DisableIT_32_63>

  return;
 8001eaa:	bf00      	nop
}
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb6:	f002 f835 	bl	8003f24 <HAL_GetTick>
 8001eba:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ec6:	d00a      	beq.n	8001ede <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001ec8:	f002 f844 	bl	8003f54 <HAL_GetTickFreq>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed6:	e002      	b.n	8001ede <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001ed8:	f7ff fdd2 	bl	8001a80 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001edc:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001ede:	f002 f821 	bl	8003f24 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d8f4      	bhi.n	8001ed8 <HAL_Delay+0x2a>
  }
}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <LL_RCC_SetRTCClockSource>:
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_RCC_EnableRTC>:
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_AHB2_GRP1_EnableClock>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f78:	68fb      	ldr	r3, [r7, #12]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_AHB3_GRP1_EnableClock>:
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001faa:	68fb      	ldr	r3, [r7, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_APB1_GRP1_EnableClock>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_APB1_GRP2_EnableClock>:
{
 8001fea:	b480      	push	{r7}
 8001fec:	b085      	sub	sp, #20
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002006:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4013      	ands	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_APB2_GRP1_EnableClock>:
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800202a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4313      	orrs	r3, r2
 8002032:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002038:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002040:	68fb      	ldr	r3, [r7, #12]
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002052:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002056:	f7ff ff96 	bl	8001f86 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	202e      	movs	r0, #46	; 0x2e
 8002060:	f002 f8cb 	bl	80041fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002064:	202e      	movs	r0, #46	; 0x2e
 8002066:	f002 f8e2 	bl	800422e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_IPCC_MspInit+0x44>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d113      	bne.n	80020aa <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002082:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002086:	f7ff ff7e 	bl	8001f86 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	202c      	movs	r0, #44	; 0x2c
 8002090:	f002 f8b3 	bl	80041fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002094:	202c      	movs	r0, #44	; 0x2c
 8002096:	f002 f8ca 	bl	800422e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	202d      	movs	r0, #45	; 0x2d
 80020a0:	f002 f8ab 	bl	80041fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80020a4:	202d      	movs	r0, #45	; 0x2d
 80020a6:	f002 f8c2 	bl	800422e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	58000c00 	.word	0x58000c00

080020b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	; 0x30
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a59      	ldr	r2, [pc, #356]	; (800223c <HAL_UART_MspInit+0x184>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d15e      	bne.n	8002198 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020da:	2001      	movs	r0, #1
 80020dc:	f7ff ff85 	bl	8001fea <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e0:	2001      	movs	r0, #1
 80020e2:	f7ff ff37 	bl	8001f54 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020e6:	230c      	movs	r3, #12
 80020e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80020f6:	2308      	movs	r3, #8
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 031c 	add.w	r3, r7, #28
 80020fe:	4619      	mov	r1, r3
 8002100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002104:	f002 fc4a 	bl	800499c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002108:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <HAL_UART_MspInit+0x188>)
 800210a:	4a4e      	ldr	r2, [pc, #312]	; (8002244 <HAL_UART_MspInit+0x18c>)
 800210c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800210e:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_UART_MspInit+0x188>)
 8002110:	2211      	movs	r2, #17
 8002112:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002114:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_UART_MspInit+0x188>)
 8002116:	2210      	movs	r2, #16
 8002118:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800211a:	4b49      	ldr	r3, [pc, #292]	; (8002240 <HAL_UART_MspInit+0x188>)
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002120:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_UART_MspInit+0x188>)
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002126:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_UART_MspInit+0x188>)
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800212c:	4b44      	ldr	r3, [pc, #272]	; (8002240 <HAL_UART_MspInit+0x188>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002132:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_UART_MspInit+0x188>)
 8002134:	2200      	movs	r2, #0
 8002136:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002138:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_UART_MspInit+0x188>)
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800213e:	4840      	ldr	r0, [pc, #256]	; (8002240 <HAL_UART_MspInit+0x188>)
 8002140:	f002 f8ba 	bl	80042b8 <HAL_DMA_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 800214a:	f7ff fed5 	bl	8001ef8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 800214e:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002152:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 8002160:	2301      	movs	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	4619      	mov	r1, r3
 800216a:	4835      	ldr	r0, [pc, #212]	; (8002240 <HAL_UART_MspInit+0x188>)
 800216c:	f002 fbd6 	bl	800491c <HAL_DMAEx_ConfigMuxSync>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002176:	f7ff febf 	bl	8001ef8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a30      	ldr	r2, [pc, #192]	; (8002240 <HAL_UART_MspInit+0x188>)
 800217e:	679a      	str	r2, [r3, #120]	; 0x78
 8002180:	4a2f      	ldr	r2, [pc, #188]	; (8002240 <HAL_UART_MspInit+0x188>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	2025      	movs	r0, #37	; 0x25
 800218c:	f002 f835 	bl	80041fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002190:	2025      	movs	r0, #37	; 0x25
 8002192:	f002 f84c 	bl	800422e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002196:	e04c      	b.n	8002232 <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <HAL_UART_MspInit+0x190>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d147      	bne.n	8002232 <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021a6:	f7ff ff39 	bl	800201c <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021aa:	2002      	movs	r0, #2
 80021ac:	f7ff fed2 	bl	8001f54 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021b0:	23c0      	movs	r3, #192	; 0xc0
 80021b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021c0:	2307      	movs	r3, #7
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	4820      	ldr	r0, [pc, #128]	; (800224c <HAL_UART_MspInit+0x194>)
 80021cc:	f002 fbe6 	bl	800499c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <HAL_UART_MspInit+0x198>)
 80021d2:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_UART_MspInit+0x19c>)
 80021d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80021d6:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_UART_MspInit+0x198>)
 80021d8:	220f      	movs	r2, #15
 80021da:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_UART_MspInit+0x198>)
 80021de:	2210      	movs	r2, #16
 80021e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_UART_MspInit+0x198>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_UART_MspInit+0x198>)
 80021ea:	2280      	movs	r2, #128	; 0x80
 80021ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_UART_MspInit+0x198>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_UART_MspInit+0x198>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_UART_MspInit+0x198>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_UART_MspInit+0x198>)
 8002202:	2200      	movs	r2, #0
 8002204:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002206:	4812      	ldr	r0, [pc, #72]	; (8002250 <HAL_UART_MspInit+0x198>)
 8002208:	f002 f856 	bl	80042b8 <HAL_DMA_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_UART_MspInit+0x15e>
      Error_Handler();
 8002212:	f7ff fe71 	bl	8001ef8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <HAL_UART_MspInit+0x198>)
 800221a:	679a      	str	r2, [r3, #120]	; 0x78
 800221c:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <HAL_UART_MspInit+0x198>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2024      	movs	r0, #36	; 0x24
 8002228:	f001 ffe7 	bl	80041fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800222c:	2024      	movs	r0, #36	; 0x24
 800222e:	f001 fffe 	bl	800422e <HAL_NVIC_EnableIRQ>
}
 8002232:	bf00      	nop
 8002234:	3730      	adds	r7, #48	; 0x30
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40008000 	.word	0x40008000
 8002240:	20001578 	.word	0x20001578
 8002244:	40020044 	.word	0x40020044
 8002248:	40013800 	.word	0x40013800
 800224c:	48000400 	.word	0x48000400
 8002250:	20001464 	.word	0x20001464
 8002254:	40020444 	.word	0x40020444

08002258 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_RTC_MspInit+0x3c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d110      	bne.n	800228c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800226a:	f002 fde1 	bl	8004e30 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 800226e:	f002 fddf 	bl	8004e30 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002272:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002276:	f7ff fe46 	bl	8001f06 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800227a:	f7ff fe5a 	bl	8001f32 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800227e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002282:	f7ff fe99 	bl	8001fb8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f004 fca8 	bl	8006bdc <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40002800 	.word	0x40002800

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ec:	f001 fe06 	bl	8003efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <DMA1_Channel4_IRQHandler+0x10>)
 80022fa:	f002 f9be 	bl	800467a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20001578 	.word	0x20001578

08002308 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <USART1_IRQHandler+0x10>)
 800230e:	f004 fd8b 	bl	8006e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200014c4 	.word	0x200014c4

0800231c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <LPUART1_IRQHandler+0x10>)
 8002322:	f004 fd81 	bl	8006e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200013d4 	.word	0x200013d4

08002330 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002334:	f001 fa8e 	bl	8003854 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002340:	f001 fac0 	bl	80038c4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}

08002348 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800234c:	f002 fcc6 	bl	8004cdc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}

08002354 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <DMA2_Channel4_IRQHandler+0x10>)
 800235a:	f002 f98e 	bl	800467a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20001464 	.word	0x20001464

08002368 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800236c:	2010      	movs	r0, #16
 800236e:	f002 fc9d 	bl	8004cac <HAL_GPIO_EXTI_IRQHandler>
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}

08002376 <RTC_WKUP_IRQHandler>:
{

}

void RTC_WKUP_IRQHandler(void)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800237a:	f7fe fe71 	bl	8001060 <HW_TS_RTC_Wakeup_Handler>
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}

08002382 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e00a      	b.n	80023aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002394:	f3af 8000 	nop.w
 8002398:	4601      	mov	r1, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	60ba      	str	r2, [r7, #8]
 80023a0:	b2ca      	uxtb	r2, r1
 80023a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3301      	adds	r3, #1
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	dbf0      	blt.n	8002394 <_read+0x12>
	}

return len;
 80023b2:	687b      	ldr	r3, [r7, #4]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_close>:
	}
	return len;
}

int _close(int file)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	return -1;
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e4:	605a      	str	r2, [r3, #4]
	return 0;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_isatty>:

int _isatty(int file)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	return 1;
 80023fc:	2301      	movs	r3, #1
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
	return 0;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <_sbrk+0x5c>)
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <_sbrk+0x60>)
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <_sbrk+0x64>)
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <_sbrk+0x68>)
 8002444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	429a      	cmp	r2, r3
 8002452:	d207      	bcs.n	8002464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002454:	f008 fae8 	bl	800aa28 <__errno>
 8002458:	4603      	mov	r3, r0
 800245a:	220c      	movs	r2, #12
 800245c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002462:	e009      	b.n	8002478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <_sbrk+0x64>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <_sbrk+0x64>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	4a05      	ldr	r2, [pc, #20]	; (8002488 <_sbrk+0x64>)
 8002474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20030000 	.word	0x20030000
 8002484:	00001000 	.word	0x00001000
 8002488:	20000244 	.word	0x20000244
 800248c:	20001608 	.word	0x20001608

08002490 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <LL_FLASH_GetUDN+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	1fff7580 	.word	0x1fff7580

080024a8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <LL_FLASH_GetDeviceID+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	1fff7584 	.word	0x1fff7584

080024c0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <LL_FLASH_GetSTCompanyID+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0a1b      	lsrs	r3, r3, #8
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	1fff7584 	.word	0x1fff7584

080024d8 <APP_BLE_Init>:

/* USER CODE END 0 */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80024d8:	b5b0      	push	{r4, r5, r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <APP_BLE_Init+0x88>)
 80024e0:	463c      	mov	r4, r7
 80024e2:	461d      	mov	r5, r3
 80024e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80024f4:	f000 fa12 	bl	800291c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80024f8:	2101      	movs	r1, #1
 80024fa:	2002      	movs	r0, #2
 80024fc:	f008 f848 	bl	800a590 <UTIL_LPM_SetOffMode>

/**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002500:	4a18      	ldr	r2, [pc, #96]	; (8002564 <APP_BLE_Init+0x8c>)
 8002502:	2100      	movs	r1, #0
 8002504:	2020      	movs	r0, #32
 8002506:	f008 f957 	bl	800a7b8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800250a:	463b      	mov	r3, r7
 800250c:	4618      	mov	r0, r3
 800250e:	f006 fe8b 	bl	8009228 <SHCI_C2_BLE_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8002518:	f7ff fcee 	bl	8001ef8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800251c:	f000 fa14 	bl	8002948 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002520:	f007 fd1c 	bl	8009f5c <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 8002524:	4a10      	ldr	r2, [pc, #64]	; (8002568 <APP_BLE_Init+0x90>)
 8002526:	2100      	movs	r1, #0
 8002528:	2001      	movs	r0, #1
 800252a:	f008 f945 	bl	800a7b8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 800252e:	4a0f      	ldr	r2, [pc, #60]	; (800256c <APP_BLE_Init+0x94>)
 8002530:	2100      	movs	r1, #0
 8002532:	2002      	movs	r0, #2
 8002534:	f008 f940 	bl	800a7b8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */

      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002538:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <APP_BLE_Init+0x98>)
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  aci_hal_set_radio_activity_mask(0x0020);
 8002540:	2020      	movs	r0, #32
 8002542:	f006 fac6 	bl	8008ad2 <aci_hal_set_radio_activity_mask>
#endif
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 8002546:	f000 fbb3 	bl	8002cb0 <P2PC_APP_Init>

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <APP_BLE_Init+0x9c>)
 800254c:	2200      	movs	r2, #0
 800254e:	490a      	ldr	r1, [pc, #40]	; (8002578 <APP_BLE_Init+0xa0>)
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe ff3f 	bl	80013d4 <HW_TS_Create>
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif
/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8002556:	bf00      	nop
}
 8002558:	3730      	adds	r7, #48	; 0x30
 800255a:	46bd      	mov	sp, r7
 800255c:	bdb0      	pop	{r4, r5, r7, pc}
 800255e:	bf00      	nop
 8002560:	0800bb30 	.word	0x0800bb30
 8002564:	08008ea5 	.word	0x08008ea5
 8002568:	08002a8d 	.word	0x08002a8d
 800256c:	08002ae9 	.word	0x08002ae9
 8002570:	20000130 	.word	0x20000130
 8002574:	08002b65 	.word	0x08002b65
 8002578:	200001b1 	.word	0x200001b1

0800257c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	b097      	sub	sp, #92	; 0x5c
 8002580:	af06      	add	r7, sp, #24
 8002582:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blecore_aci *blecore_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3301      	adds	r3, #1
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258c:	3302      	adds	r3, #2
 800258e:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;

  switch (event_pckt->evt)
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2bff      	cmp	r3, #255	; 0xff
 800259a:	d009      	beq.n	80025b0 <SVCCTL_App_Notification+0x34>
 800259c:	2bff      	cmp	r3, #255	; 0xff
 800259e:	f300 817f 	bgt.w	80028a0 <SVCCTL_App_Notification+0x324>
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	f000 8098 	beq.w	80026d8 <SVCCTL_App_Notification+0x15c>
 80025a8:	2b3e      	cmp	r3, #62	; 0x3e
 80025aa:	f000 80b3 	beq.w	8002714 <SVCCTL_App_Notification+0x198>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 80025ae:	e177      	b.n	80028a0 <SVCCTL_App_Notification+0x324>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 80025b0:	4ba7      	ldr	r3, [pc, #668]	; (8002850 <SVCCTL_App_Notification+0x2d4>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	3302      	adds	r3, #2
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
      switch (blecore_evt->ecode)
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f640 0202 	movw	r2, #2050	; 0x802
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d029      	beq.n	800261e <SVCCTL_App_Notification+0xa2>
 80025ca:	f640 0202 	movw	r2, #2050	; 0x802
 80025ce:	4293      	cmp	r3, r2
 80025d0:	dc7e      	bgt.n	80026d0 <SVCCTL_App_Notification+0x154>
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d071      	beq.n	80026ba <SVCCTL_App_Notification+0x13e>
 80025d6:	f240 4207 	movw	r2, #1031	; 0x407
 80025da:	4293      	cmp	r3, r2
 80025dc:	d178      	bne.n	80026d0 <SVCCTL_App_Notification+0x154>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blecore_evt->data;
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	3302      	adds	r3, #2
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d173      	bne.n	80026d4 <SVCCTL_App_Notification+0x158>
              && gap_evt_proc_complete->Status == 0x00)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	785b      	ldrb	r3, [r3, #1]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d16f      	bne.n	80026d4 <SVCCTL_App_Notification+0x158>
            BSP_LED_Off(LED_BLUE);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f001 fb25 	bl	8003c44 <BSP_LED_Off>
            APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n");
 80025fa:	4896      	ldr	r0, [pc, #600]	; (8002854 <SVCCTL_App_Notification+0x2d8>)
 80025fc:	f008 faf0 	bl	800abe0 <puts>
            if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8002600:	4b95      	ldr	r3, [pc, #596]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 8002602:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002606:	2b01      	cmp	r3, #1
 8002608:	d164      	bne.n	80026d4 <SVCCTL_App_Notification+0x158>
 800260a:	4b93      	ldr	r3, [pc, #588]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 800260c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002610:	2b06      	cmp	r3, #6
 8002612:	d05f      	beq.n	80026d4 <SVCCTL_App_Notification+0x158>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 8002614:	2100      	movs	r1, #0
 8002616:	2002      	movs	r0, #2
 8002618:	f008 f8f0 	bl	800a7fc <UTIL_SEQ_SetTask>
        break;
 800261c:	e05a      	b.n	80026d4 <SVCCTL_App_Notification+0x158>
          aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blecore_evt->data;
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	3302      	adds	r3, #2
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
          aci_hal_set_radio_activity_mask(0x0000);
 8002624:	2000      	movs	r0, #0
 8002626:	f006 fa54 	bl	8008ad2 <aci_hal_set_radio_activity_mask>
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	789a      	ldrb	r2, [r3, #2]
 800262e:	4b8b      	ldr	r3, [pc, #556]	; (800285c <SVCCTL_App_Notification+0x2e0>)
 8002630:	701a      	strb	r2, [r3, #0]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8002638:	b29a      	uxth	r2, r3
 800263a:	4b88      	ldr	r3, [pc, #544]	; (800285c <SVCCTL_App_Notification+0x2e0>)
 800263c:	805a      	strh	r2, [r3, #2]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002644:	b29a      	uxth	r2, r3
 8002646:	4b85      	ldr	r3, [pc, #532]	; (800285c <SVCCTL_App_Notification+0x2e0>)
 8002648:	809a      	strh	r2, [r3, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8002650:	b29a      	uxth	r2, r3
 8002652:	4b82      	ldr	r3, [pc, #520]	; (800285c <SVCCTL_App_Notification+0x2e0>)
 8002654:	80da      	strh	r2, [r3, #6]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800265c:	b29a      	uxth	r2, r3
 800265e:	4b7f      	ldr	r3, [pc, #508]	; (800285c <SVCCTL_App_Notification+0x2e0>)
 8002660:	811a      	strh	r2, [r3, #8]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8002668:	b29a      	uxth	r2, r3
 800266a:	4b7c      	ldr	r3, [pc, #496]	; (800285c <SVCCTL_App_Notification+0x2e0>)
 800266c:	815a      	strh	r2, [r3, #10]
          result = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800266e:	4b7a      	ldr	r3, [pc, #488]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 8002670:	8ad8      	ldrh	r0, [r3, #22]
 8002672:	4b7a      	ldr	r3, [pc, #488]	; (800285c <SVCCTL_App_Notification+0x2e0>)
 8002674:	8899      	ldrh	r1, [r3, #4]
 8002676:	4b79      	ldr	r3, [pc, #484]	; (800285c <SVCCTL_App_Notification+0x2e0>)
 8002678:	88dc      	ldrh	r4, [r3, #6]
 800267a:	4b78      	ldr	r3, [pc, #480]	; (800285c <SVCCTL_App_Notification+0x2e0>)
 800267c:	891d      	ldrh	r5, [r3, #8]
 800267e:	4b77      	ldr	r3, [pc, #476]	; (800285c <SVCCTL_App_Notification+0x2e0>)
 8002680:	895b      	ldrh	r3, [r3, #10]
 8002682:	4a76      	ldr	r2, [pc, #472]	; (800285c <SVCCTL_App_Notification+0x2e0>)
 8002684:	7812      	ldrb	r2, [r2, #0]
 8002686:	2601      	movs	r6, #1
 8002688:	9604      	str	r6, [sp, #16]
 800268a:	9203      	str	r2, [sp, #12]
 800268c:	2210      	movs	r2, #16
 800268e:	9202      	str	r2, [sp, #8]
 8002690:	2210      	movs	r2, #16
 8002692:	9201      	str	r2, [sp, #4]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	462b      	mov	r3, r5
 8002698:	4622      	mov	r2, r4
 800269a:	f006 fa88 	bl	8008bae <aci_l2cap_connection_parameter_update_resp>
 800269e:	4603      	mov	r3, r0
 80026a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          if(result != BLE_STATUS_SUCCESS) {
 80026a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <SVCCTL_App_Notification+0x136>
              BSP_LED_On(LED_RED);
 80026ac:	2002      	movs	r0, #2
 80026ae:	f001 faaf 	bl	8003c10 <BSP_LED_On>
          aci_hal_set_radio_activity_mask(0x0020);
 80026b2:	2020      	movs	r0, #32
 80026b4:	f006 fa0d 	bl	8008ad2 <aci_hal_set_radio_activity_mask>
        break;
 80026b8:	e00d      	b.n	80026d6 <SVCCTL_App_Notification+0x15a>
          BSP_LED_On(LED_GREEN);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f001 faa8 	bl	8003c10 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 80026c0:	4b65      	ldr	r3, [pc, #404]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 80026c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80026c6:	210a      	movs	r1, #10
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe ff89 	bl	80015e0 <HW_TS_Start>
        break;
 80026ce:	e002      	b.n	80026d6 <SVCCTL_App_Notification+0x15a>
          break;
 80026d0:	bf00      	nop
 80026d2:	e0e8      	b.n	80028a6 <SVCCTL_App_Notification+0x32a>
        break;
 80026d4:	bf00      	nop
    break;
 80026d6:	e0e6      	b.n	80028a6 <SVCCTL_App_Notification+0x32a>
      if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	4b5d      	ldr	r3, [pc, #372]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 80026e2:	8adb      	ldrh	r3, [r3, #22]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f040 80dd 	bne.w	80028a4 <SVCCTL_App_Notification+0x328>
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80026ea:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	82da      	strh	r2, [r3, #22]
            BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80026f0:	4b59      	ldr	r3, [pc, #356]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n");
 80026f8:	4859      	ldr	r0, [pc, #356]	; (8002860 <SVCCTL_App_Notification+0x2e4>)
 80026fa:	f008 fa71 	bl	800abe0 <puts>
            handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 80026fe:	4b54      	ldr	r3, [pc, #336]	; (8002850 <SVCCTL_App_Notification+0x2d4>)
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002704:	4b54      	ldr	r3, [pc, #336]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 8002706:	8ada      	ldrh	r2, [r3, #22]
 8002708:	4b51      	ldr	r3, [pc, #324]	; (8002850 <SVCCTL_App_Notification+0x2d4>)
 800270a:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 800270c:	4850      	ldr	r0, [pc, #320]	; (8002850 <SVCCTL_App_Notification+0x2d4>)
 800270e:	f000 fb15 	bl	8002d3c <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8002712:	e0c7      	b.n	80028a4 <SVCCTL_App_Notification+0x328>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	3302      	adds	r3, #2
 8002718:	623b      	str	r3, [r7, #32]
      switch (meta_evt->subevent)
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d002      	beq.n	8002728 <SVCCTL_App_Notification+0x1ac>
 8002722:	2b02      	cmp	r3, #2
 8002724:	d031      	beq.n	800278a <SVCCTL_App_Notification+0x20e>
          break;
 8002726:	e0ba      	b.n	800289e <SVCCTL_App_Notification+0x322>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	3301      	adds	r3, #1
 800272c:	60fb      	str	r3, [r7, #12]
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002734:	b29a      	uxth	r2, r3
 8002736:	4b48      	ldr	r3, [pc, #288]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 8002738:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800273a:	4b47      	ldr	r3, [pc, #284]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 800273c:	2206      	movs	r2, #6
 800273e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG("\r\n\r** CONNECTION EVENT WITH SERVER \n");
 8002742:	4848      	ldr	r0, [pc, #288]	; (8002864 <SVCCTL_App_Notification+0x2e8>)
 8002744:	f008 fa4c 	bl	800abe0 <puts>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002748:	4b41      	ldr	r3, [pc, #260]	; (8002850 <SVCCTL_App_Notification+0x2d4>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800274e:	4b42      	ldr	r3, [pc, #264]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 8002750:	8ada      	ldrh	r2, [r3, #22]
 8002752:	4b3f      	ldr	r3, [pc, #252]	; (8002850 <SVCCTL_App_Notification+0x2d4>)
 8002754:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 8002756:	483e      	ldr	r0, [pc, #248]	; (8002850 <SVCCTL_App_Notification+0x2d4>)
 8002758:	f000 faf0 	bl	8002d3c <P2PC_APP_Notification>
          result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800275c:	4b3e      	ldr	r3, [pc, #248]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 800275e:	8adb      	ldrh	r3, [r3, #22]
 8002760:	4618      	mov	r0, r3
 8002762:	f005 fecb 	bl	80084fc <aci_gatt_disc_all_primary_services>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          if (result == BLE_STATUS_SUCCESS)
 800276c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <SVCCTL_App_Notification+0x206>
            APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n");
 8002774:	483c      	ldr	r0, [pc, #240]	; (8002868 <SVCCTL_App_Notification+0x2ec>)
 8002776:	f008 fa33 	bl	800abe0 <puts>
            APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 800277a:	483c      	ldr	r0, [pc, #240]	; (800286c <SVCCTL_App_Notification+0x2f0>)
 800277c:	f008 f994 	bl	800aaa8 <iprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002780:	e08d      	b.n	800289e <SVCCTL_App_Notification+0x322>
            APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 8002782:	483b      	ldr	r0, [pc, #236]	; (8002870 <SVCCTL_App_Notification+0x2f4>)
 8002784:	f008 f990 	bl	800aaa8 <iprintf>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002788:	e089      	b.n	800289e <SVCCTL_App_Notification+0x322>
          le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	785b      	ldrb	r3, [r3, #1]
 8002794:	76fb      	strb	r3, [r7, #27]
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	7a5b      	ldrb	r3, [r3, #9]
 800279a:	76bb      	strb	r3, [r7, #26]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	3309      	adds	r3, #9
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
          k = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          if (event_type == ADV_IND)
 80027a8:	7efb      	ldrb	r3, [r7, #27]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d176      	bne.n	800289c <SVCCTL_App_Notification+0x320>
            while(k < event_data_size)
 80027ae:	e071      	b.n	8002894 <SVCCTL_App_Notification+0x318>
              adlength = adv_report_data[k];
 80027b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4413      	add	r3, r2
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	74fb      	strb	r3, [r7, #19]
              adtype = adv_report_data[k + 1];
 80027ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027bc:	3301      	adds	r3, #1
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4413      	add	r3, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	74bb      	strb	r3, [r7, #18]
              switch (adtype)
 80027c6:	7cbb      	ldrb	r3, [r7, #18]
 80027c8:	2bff      	cmp	r3, #255	; 0xff
 80027ca:	d009      	beq.n	80027e0 <SVCCTL_App_Notification+0x264>
 80027cc:	2bff      	cmp	r3, #255	; 0xff
 80027ce:	dc57      	bgt.n	8002880 <SVCCTL_App_Notification+0x304>
 80027d0:	2b16      	cmp	r3, #22
 80027d2:	d057      	beq.n	8002884 <SVCCTL_App_Notification+0x308>
 80027d4:	2b16      	cmp	r3, #22
 80027d6:	dc53      	bgt.n	8002880 <SVCCTL_App_Notification+0x304>
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d055      	beq.n	8002888 <SVCCTL_App_Notification+0x30c>
 80027dc:	2b0a      	cmp	r3, #10
                break;
 80027de:	e054      	b.n	800288a <SVCCTL_App_Notification+0x30e>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b06      	cmp	r3, #6
 80027e4:	d930      	bls.n	8002848 <SVCCTL_App_Notification+0x2cc>
 80027e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e8:	3302      	adds	r3, #2
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4413      	add	r3, r2
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d129      	bne.n	8002848 <SVCCTL_App_Notification+0x2cc>
                    APP_DBG_MSG("--- ST MANUFACTURER ID --- \n");
 80027f4:	481f      	ldr	r0, [pc, #124]	; (8002874 <SVCCTL_App_Notification+0x2f8>)
 80027f6:	f008 f9f3 	bl	800abe0 <puts>
                    switch (adv_report_data[k + 3])
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fc:	3303      	adds	r3, #3
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4413      	add	r3, r2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b83      	cmp	r3, #131	; 0x83
 8002806:	d121      	bne.n	800284c <SVCCTL_App_Notification+0x2d0>
                        APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n");
 8002808:	481b      	ldr	r0, [pc, #108]	; (8002878 <SVCCTL_App_Notification+0x2fc>)
 800280a:	f008 f9e9 	bl	800abe0 <puts>
                        BleApplicationContext.DeviceServerFound = 0x01;
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <SVCCTL_App_Notification+0x2dc>)
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                        SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	78da      	ldrb	r2, [r3, #3]
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <SVCCTL_App_Notification+0x300>)
 800281c:	701a      	strb	r2, [r3, #0]
                        SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	791a      	ldrb	r2, [r3, #4]
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <SVCCTL_App_Notification+0x300>)
 8002824:	705a      	strb	r2, [r3, #1]
                        SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	795a      	ldrb	r2, [r3, #5]
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <SVCCTL_App_Notification+0x300>)
 800282c:	709a      	strb	r2, [r3, #2]
                        SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	799a      	ldrb	r2, [r3, #6]
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <SVCCTL_App_Notification+0x300>)
 8002834:	70da      	strb	r2, [r3, #3]
                        SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	79da      	ldrb	r2, [r3, #7]
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <SVCCTL_App_Notification+0x300>)
 800283c:	711a      	strb	r2, [r3, #4]
                        SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	7a1a      	ldrb	r2, [r3, #8]
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <SVCCTL_App_Notification+0x300>)
 8002844:	715a      	strb	r2, [r3, #5]
                        break;
 8002846:	e002      	b.n	800284e <SVCCTL_App_Notification+0x2d2>
                  }
 8002848:	bf00      	nop
 800284a:	e01e      	b.n	800288a <SVCCTL_App_Notification+0x30e>
                        break;
 800284c:	bf00      	nop
                  break;
 800284e:	e01c      	b.n	800288a <SVCCTL_App_Notification+0x30e>
 8002850:	200015d8 	.word	0x200015d8
 8002854:	0800bb60 	.word	0x0800bb60
 8002858:	20000130 	.word	0x20000130
 800285c:	200015e4 	.word	0x200015e4
 8002860:	0800bb90 	.word	0x0800bb90
 8002864:	0800bbb8 	.word	0x0800bbb8
 8002868:	0800bbdc 	.word	0x0800bbdc
 800286c:	0800bc10 	.word	0x0800bc10
 8002870:	0800bc40 	.word	0x0800bc40
 8002874:	0800bc80 	.word	0x0800bc80
 8002878:	0800bc9c 	.word	0x0800bc9c
 800287c:	200015dc 	.word	0x200015dc
                  break;
 8002880:	bf00      	nop
 8002882:	e002      	b.n	800288a <SVCCTL_App_Notification+0x30e>
                  break;
 8002884:	bf00      	nop
 8002886:	e000      	b.n	800288a <SVCCTL_App_Notification+0x30e>
                  break;
 8002888:	bf00      	nop
              k += adlength + 1;
 800288a:	7cfb      	ldrb	r3, [r7, #19]
 800288c:	3301      	adds	r3, #1
 800288e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002890:	4413      	add	r3, r2
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
            while(k < event_data_size)
 8002894:	7ebb      	ldrb	r3, [r7, #26]
 8002896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002898:	429a      	cmp	r2, r3
 800289a:	db89      	blt.n	80027b0 <SVCCTL_App_Notification+0x234>
          break;
 800289c:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800289e:	e002      	b.n	80028a6 <SVCCTL_App_Notification+0x32a>
      break;
 80028a0:	bf00      	nop
 80028a2:	e000      	b.n	80028a6 <SVCCTL_App_Notification+0x32a>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80028a4:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3744      	adds	r7, #68	; 0x44
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028b0 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status( uint16_t Connection_Handle )
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	80fb      	strh	r3, [r7, #6]

  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <APP_BLE_Get_Client_Connection_Status+0x2c>)
 80028bc:	8adb      	ldrh	r3, [r3, #22]
 80028be:	88fa      	ldrh	r2, [r7, #6]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d103      	bne.n	80028cc <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <APP_BLE_Get_Client_Connection_Status+0x2c>)
 80028c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80028ca:	e000      	b.n	80028ce <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000130 	.word	0x20000130

080028e0 <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0 
      P2PC_APP_SW1_Button_Action();
#else 
      if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 80028e4:	f000 fd74 	bl	80033d0 <P2P_Client_APP_Get_State>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d004      	beq.n	80028f8 <APP_BLE_Key_Button1_Action+0x18>
      {
        UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 80028ee:	2100      	movs	r1, #0
 80028f0:	2001      	movs	r0, #1
 80028f2:	f007 ff83 	bl	800a7fc <UTIL_SEQ_SetTask>
      else 
      {
        P2PC_APP_SW1_Button_Action();
      }   
#endif 
}
 80028f6:	e001      	b.n	80028fc <APP_BLE_Key_Button1_Action+0x1c>
        P2PC_APP_SW1_Button_Action();
 80028f8:	f000 fa52 	bl	8002da0 <P2PC_APP_SW1_Button_Action>
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}

08002900 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <Ble_Tl_Init+0x20>)
 8002924:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <Ble_Tl_Init+0x24>)
 8002928:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800292a:	463b      	mov	r3, r7
 800292c:	4619      	mov	r1, r3
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <Ble_Tl_Init+0x28>)
 8002930:	f006 fa9c 	bl	8008e6c <hci_init>

  return;
 8002934:	bf00      	nop
}
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20030028 	.word	0x20030028
 8002940:	08002c79 	.word	0x08002c79
 8002944:	08002c41 	.word	0x08002c41

08002948 <Ble_Hci_Gap_Gatt_Init>:

 static void Ble_Hci_Gap_Gatt_Init(void){
 8002948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294a:	b08f      	sub	sp, #60	; 0x3c
 800294c:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800294e:	2300      	movs	r3, #0
 8002950:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
   hci_reset();
 8002952:	f006 f908 	bl	8008b66 <hci_reset>

   /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8002956:	f000 f90d 	bl	8002b74 <BleGetBdAddress>
 800295a:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	2106      	movs	r1, #6
 8002960:	2000      	movs	r0, #0
 8002962:	f005 fff6 	bl	8008952 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8002966:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800296a:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800296c:	f7ff fd90 	bl	8002490 <LL_FLASH_GetUDN>
 8002970:	4603      	mov	r3, r0
 8002972:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	461a      	mov	r2, r3
 8002978:	2106      	movs	r1, #6
 800297a:	202e      	movs	r0, #46	; 0x2e
 800297c:	f005 ffe9 	bl	8008952 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002980:	4a3d      	ldr	r2, [pc, #244]	; (8002a78 <Ble_Hci_Gap_Gatt_Init+0x130>)
 8002982:	2110      	movs	r1, #16
 8002984:	2018      	movs	r0, #24
 8002986:	f005 ffe4 	bl	8008952 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800298a:	4a3c      	ldr	r2, [pc, #240]	; (8002a7c <Ble_Hci_Gap_Gatt_Init+0x134>)
 800298c:	2110      	movs	r1, #16
 800298e:	2008      	movs	r0, #8
 8002990:	f005 ffdf 	bl	8008952 <aci_hal_write_config_data>

  /**
     * Set TX Power to 0dBm.
     */
    aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002994:	2118      	movs	r1, #24
 8002996:	2001      	movs	r0, #1
 8002998:	f006 f844 	bl	8008a24 <aci_hal_set_tx_power_level>

/**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800299c:	f005 fd02 	bl	80083a4 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	76fb      	strb	r3, [r7, #27]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 80029a4:	7efb      	ldrb	r3, [r7, #27]
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	76fb      	strb	r3, [r7, #27]
#endif

  if (role > 0)
 80029ac:	7efb      	ldrb	r3, [r7, #27]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01e      	beq.n	80029f0 <Ble_Hci_Gap_Gatt_Init+0xa8>
  {
    const char *name = "P2P_C";
 80029b2:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <Ble_Hci_Gap_Gatt_Init+0x138>)
 80029b4:	617b      	str	r3, [r7, #20]

    aci_gap_init(role, 0,
 80029b6:	f107 0212 	add.w	r2, r7, #18
 80029ba:	7ef8      	ldrb	r0, [r7, #27]
 80029bc:	f107 030e 	add.w	r3, r7, #14
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	2207      	movs	r2, #7
 80029cc:	2100      	movs	r1, #0
 80029ce:	f005 fafd 	bl	8007fcc <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80029d2:	8a7c      	ldrh	r4, [r7, #18]
 80029d4:	8a3d      	ldrh	r5, [r7, #16]
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f7fd fbd2 	bl	8000180 <strlen>
 80029dc:	4603      	mov	r3, r0
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	2200      	movs	r2, #0
 80029e8:	4629      	mov	r1, r5
 80029ea:	4620      	mov	r0, r4
 80029ec:	f005 fcff 	bl	80083ee <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

    if(aci_gatt_update_char_value(gap_service_handle,
 80029f0:	8a78      	ldrh	r0, [r7, #18]
 80029f2:	89f9      	ldrh	r1, [r7, #14]
 80029f4:	463b      	mov	r3, r7
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2302      	movs	r3, #2
 80029fa:	2200      	movs	r2, #0
 80029fc:	f005 fcf7 	bl	80083ee <aci_gatt_update_char_value>
    }

    /**
     * Initialize IO capability
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002a00:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
    aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002a06:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f005 f9ec 	bl	8007de8 <aci_gap_set_io_capability>

    /**
     * Initialize authentication
     */
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002a10:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	705a      	strb	r2, [r3, #1]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a18:	2208      	movs	r2, #8
 8002a1a:	711a      	strb	r2, [r3, #4]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a1e:	2210      	movs	r2, #16
 8002a20:	715a      	strb	r2, [r3, #5]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	70da      	strb	r2, [r3, #3]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002a28:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <Ble_Hci_Gap_Gatt_Init+0x140>)
 8002a2c:	609a      	str	r2, [r3, #8]
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	709a      	strb	r2, [r3, #2]

    aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a36:	789c      	ldrb	r4, [r3, #2]
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a3a:	785d      	ldrb	r5, [r3, #1]
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a3e:	791b      	ldrb	r3, [r3, #4]
 8002a40:	4a10      	ldr	r2, [pc, #64]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a42:	7952      	ldrb	r2, [r2, #5]
 8002a44:	490f      	ldr	r1, [pc, #60]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a46:	78c9      	ldrb	r1, [r1, #3]
 8002a48:	480e      	ldr	r0, [pc, #56]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a4a:	6880      	ldr	r0, [r0, #8]
 8002a4c:	2600      	movs	r6, #0
 8002a4e:	9604      	str	r6, [sp, #16]
 8002a50:	9003      	str	r0, [sp, #12]
 8002a52:	9102      	str	r1, [sp, #8]
 8002a54:	9201      	str	r2, [sp, #4]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f005 fa0c 	bl	8007e7c <aci_gap_set_authentication_requirement>
                                           );

    /**
     * Initialize whitelist
     */
    if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <Ble_Hci_Gap_Gatt_Init+0x13c>)
 8002a66:	789b      	ldrb	r3, [r3, #2]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <Ble_Hci_Gap_Gatt_Init+0x128>
    {
      aci_gap_configure_whitelist();
 8002a6c:	f005 fb39 	bl	80080e2 <aci_gap_configure_whitelist>
    }

}
 8002a70:	bf00      	nop
 8002a72:	3724      	adds	r7, #36	; 0x24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a78:	0800c1b0 	.word	0x0800c1b0
 8002a7c:	0800c1c0 	.word	0x0800c1c0
 8002a80:	0800bcc0 	.word	0x0800bcc0
 8002a84:	20000130 	.word	0x20000130
 8002a88:	0001b207 	.word	0x0001b207

08002a8c <Scan_Request>:

static void Scan_Request( void )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <Scan_Request+0x50>)
 8002a94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a98:	2b06      	cmp	r3, #6
 8002a9a:	d01a      	beq.n	8002ad2 <Scan_Request+0x46>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
    BSP_LED_On(LED_BLUE);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f001 f8b7 	bl	8003c10 <BSP_LED_On>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002aaa:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002aae:	f005 fb3c 	bl	800812a <aci_gap_start_general_discovery_proc>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d103      	bne.n	8002ac4 <Scan_Request+0x38>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 8002abc:	4808      	ldr	r0, [pc, #32]	; (8002ae0 <Scan_Request+0x54>)
 8002abe:	f007 fff3 	bl	800aaa8 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 8002ac2:	e006      	b.n	8002ad2 <Scan_Request+0x46>
      BSP_LED_On(LED_RED);
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f001 f8a3 	bl	8003c10 <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 8002aca:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <Scan_Request+0x58>)
 8002acc:	f007 ffec 	bl	800aaa8 <iprintf>
  return;
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
}
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000130 	.word	0x20000130
 8002ae0:	0800bcc8 	.word	0x0800bcc8
 8002ae4:	0800bcf8 	.word	0x0800bcf8

08002ae8 <Connect_Request>:

static void Connect_Request( void )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 8002aee:	481a      	ldr	r0, [pc, #104]	; (8002b58 <Connect_Request+0x70>)
 8002af0:	f007 ffda 	bl	800aaa8 <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <Connect_Request+0x74>)
 8002af6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d028      	beq.n	8002b50 <Connect_Request+0x68>
  {
    result = aci_gap_create_connection(SCAN_P,
 8002afe:	2310      	movs	r3, #16
 8002b00:	9306      	str	r3, [sp, #24]
 8002b02:	2310      	movs	r3, #16
 8002b04:	9305      	str	r3, [sp, #20]
 8002b06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b0a:	9304      	str	r3, [sp, #16]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9303      	str	r3, [sp, #12]
 8002b10:	2350      	movs	r3, #80	; 0x50
 8002b12:	9302      	str	r3, [sp, #8]
 8002b14:	2328      	movs	r3, #40	; 0x28
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <Connect_Request+0x78>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002b24:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002b28:	f005 fb77 	bl	800821a <aci_gap_create_connection>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d104      	bne.n	8002b40 <Connect_Request+0x58>
    {
    /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

    /* USER CODE END BLE_CONNECT_SUCCESS */
    BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <Connect_Request+0x74>)
 8002b38:	2204      	movs	r2, #4
 8002b3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 8002b3e:	e007      	b.n	8002b50 <Connect_Request+0x68>
      BSP_LED_On(LED_RED);
 8002b40:	2002      	movs	r0, #2
 8002b42:	f001 f865 	bl	8003c10 <BSP_LED_On>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <Connect_Request+0x74>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
}
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	0800bd28 	.word	0x0800bd28
 8002b5c:	20000130 	.word	0x20000130
 8002b60:	200015dc 	.word	0x200015dc

08002b64 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f001 f86b 	bl	8003c44 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002b7a:	f7ff fc89 	bl	8002490 <LL_FLASH_GetUDN>
 8002b7e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b86:	d023      	beq.n	8002bd0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002b88:	f7ff fc9a 	bl	80024c0 <LL_FLASH_GetSTCompanyID>
 8002b8c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002b8e:	f7ff fc8b 	bl	80024a8 <LL_FLASH_GetDeviceID>
 8002b92:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <BleGetBdAddress+0x80>)
 8002b9a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <BleGetBdAddress+0x80>)
 8002ba4:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <BleGetBdAddress+0x80>)
 8002bac:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <BleGetBdAddress+0x80>)
 8002bb4:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <BleGetBdAddress+0x80>)
 8002bbe:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <BleGetBdAddress+0x80>)
 8002bc8:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <BleGetBdAddress+0x80>)
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e00b      	b.n	8002be8 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f006 fb01 	bl	80091d8 <OTP_Read>
 8002bd6:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e001      	b.n	8002be8 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <BleGetBdAddress+0x84>)
 8002be6:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8002be8:	697b      	ldr	r3, [r7, #20]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000248 	.word	0x20000248
 8002bf8:	0800c1a8 	.word	0x0800c1a8

08002bfc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002c04:	2100      	movs	r1, #0
 8002c06:	2020      	movs	r0, #32
 8002c08:	f007 fdf8 	bl	800a7fc <UTIL_SEQ_SetTask>
  return;
 8002c0c:	bf00      	nop
}
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	f007 fe59 	bl	800a8d4 <UTIL_SEQ_SetEvt>
  return;
 8002c22:	bf00      	nop
}
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002c32:	2001      	movs	r0, #1
 8002c34:	f007 fe6e 	bl	800a914 <UTIL_SEQ_WaitEvt>
  return;
 8002c38:	bf00      	nop
}
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	3308      	adds	r3, #8
 8002c52:	4618      	mov	r0, r3
 8002c54:	f007 f9d2 	bl	8009ffc <SVCCTL_UserEvtRx>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002c5c:	7afb      	ldrb	r3, [r7, #11]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <BLE_UserEvtRx+0x2a>
{
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
}
  else
{
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8002c68:	e002      	b.n	8002c70 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <BLE_StatusNot+0x16>
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d006      	beq.n	8002c9a <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8002c8c:	e00b      	b.n	8002ca6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002c8e:	233f      	movs	r3, #63	; 0x3f
 8002c90:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f007 fdde 	bl	800a854 <UTIL_SEQ_PauseTask>
      break;
 8002c98:	e005      	b.n	8002ca6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002c9a:	233f      	movs	r3, #63	; 0x3f
 8002c9c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f007 fdf8 	bl	800a894 <UTIL_SEQ_ResumeTask>
      break;
 8002ca4:	bf00      	nop
  }
  return;
 8002ca6:	bf00      	nop
}
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
  uint8_t index =0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 8002cba:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <P2PC_APP_Init+0x74>)
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2004      	movs	r0, #4
 8002cc0:	f007 fd7a 	bl	800a7b8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
 8002cc4:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <P2PC_APP_Init+0x78>)
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	2008      	movs	r0, #8
 8002cca:	f007 fd75 	bl	800a7b8 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Client_App_Context.Notification_Status=0;
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <P2PC_APP_Init+0x7c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
  P2P_Client_App_Context.ConnectionHandle =  0x00;
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <P2PC_APP_Init+0x7c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	80da      	strh	r2, [r3, #6]

  P2P_Client_App_Context.LedControl.Device_Led_Selection=0x00;/* device Led */
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <P2PC_APP_Init+0x7c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	705a      	strb	r2, [r3, #1]
  P2P_Client_App_Context.LedControl.Led1=0x00; /* led OFF */
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <P2PC_APP_Init+0x7c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	709a      	strb	r2, [r3, #2]
  P2P_Client_App_Context.ButtonStatus.Device_Button_Selection=0x01;/* Device1 */
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <P2PC_APP_Init+0x7c>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	70da      	strb	r2, [r3, #3]
  P2P_Client_App_Context.ButtonStatus.Button1=0x00;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <P2PC_APP_Init+0x7c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	711a      	strb	r2, [r3, #4]
/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	71fb      	strb	r3, [r7, #7]
 8002cf6:	e008      	b.n	8002d0a <P2PC_APP_Init+0x5a>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <P2PC_APP_Init+0x80>)
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	4413      	add	r3, r2
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	3301      	adds	r3, #1
 8002d08:	71fb      	strb	r3, [r7, #7]
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f3      	beq.n	8002cf8 <P2PC_APP_Init+0x48>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 8002d10:	4808      	ldr	r0, [pc, #32]	; (8002d34 <P2PC_APP_Init+0x84>)
 8002d12:	f007 f959 	bl	8009fc8 <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 8002d16:	4808      	ldr	r0, [pc, #32]	; (8002d38 <P2PC_APP_Init+0x88>)
 8002d18:	f007 ff62 	bl	800abe0 <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 8002d1c:	bf00      	nop
}
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	080034a5 	.word	0x080034a5
 8002d28:	0800345d 	.word	0x0800345d
 8002d2c:	200001c4 	.word	0x200001c4
 8002d30:	200001b4 	.word	0x200001b4
 8002d34:	08002db1 	.word	0x08002db1
 8002d38:	0800bd54 	.word	0x0800bd54

08002d3c <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <P2PC_APP_Notification+0x16>
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d005      	beq.n	8002d5c <P2PC_APP_Notification+0x20>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 8002d50:	e01e      	b.n	8002d90 <P2PC_APP_Notification+0x54>
    P2P_Client_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	885a      	ldrh	r2, [r3, #2]
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <P2PC_APP_Notification+0x5c>)
 8002d58:	80da      	strh	r2, [r3, #6]
      break;
 8002d5a:	e019      	b.n	8002d90 <P2PC_APP_Notification+0x54>
      uint8_t index = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73fb      	strb	r3, [r7, #15]
      P2P_Client_App_Context.ConnectionHandle =  0x00;
 8002d60:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <P2PC_APP_Notification+0x5c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	80da      	strh	r2, [r3, #6]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002d66:	e005      	b.n	8002d74 <P2PC_APP_Notification+0x38>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <P2PC_APP_Notification+0x60>)
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	4413      	add	r3, r2
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <P2PC_APP_Notification+0x4c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <P2PC_APP_Notification+0x60>)
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	4413      	add	r3, r2
 8002d82:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ef      	bne.n	8002d68 <P2PC_APP_Notification+0x2c>
      BSP_LED_Off(LED_BLUE); 
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f000 ff5b 	bl	8003c44 <BSP_LED_Off>
      break;
 8002d8e:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 8002d90:	bf00      	nop
}
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200001c4 	.word	0x200001c4
 8002d9c:	200001b4 	.word	0x200001b4

08002da0 <P2PC_APP_SW1_Button_Action>:
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0

  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8002da4:	2100      	movs	r1, #0
 8002da6:	2008      	movs	r0, #8
 8002da8:	f007 fd28 	bl	800a7fc <UTIL_SEQ_SetTask>

}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b094      	sub	sp, #80	; 0x50
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2bff      	cmp	r3, #255	; 0xff
 8002dca:	f040 82b5 	bne.w	8003338 <Event_Handler+0x588>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8002dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blecore_evt->ecode)
 8002dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	f200 829e 	bhi.w	8003320 <Event_Handler+0x570>
 8002de4:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <Event_Handler+0x3c>)
 8002de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dea:	bf00      	nop
 8002dec:	08003121 	.word	0x08003121
 8002df0:	08003321 	.word	0x08003321
 8002df4:	08002fd7 	.word	0x08002fd7
 8002df8:	08003321 	.word	0x08003321
 8002dfc:	08003321 	.word	0x08003321
 8002e00:	08003321 	.word	0x08003321
 8002e04:	08002e21 	.word	0x08002e21
 8002e08:	08003321 	.word	0x08003321
 8002e0c:	08003321 	.word	0x08003321
 8002e10:	08003321 	.word	0x08003321
 8002e14:	08003321 	.word	0x08003321
 8002e18:	0800324f 	.word	0x0800324f
 8002e1c:	080032cb 	.word	0x080032cb
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8002e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e22:	3302      	adds	r3, #2
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	781a      	ldrb	r2, [r3, #0]
 8002e2a:	785b      	ldrb	r3, [r3, #1]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002e38:	e02e      	b.n	8002e98 <Event_Handler+0xe8>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 8002e3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e3e:	4abc      	ldr	r2, [pc, #752]	; (8003130 <Event_Handler+0x380>)
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	4413      	add	r3, r2
 8002e44:	3302      	adds	r3, #2
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fd31 	bl	80028b0 <APP_BLE_Get_Client_Connection_Status>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 8002e54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e58:	4ab5      	ldr	r2, [pc, #724]	; (8003130 <Event_Handler+0x380>)
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	4413      	add	r3, r2
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d114      	bne.n	8002e8e <Event_Handler+0xde>
 8002e64:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d110      	bne.n	8002e8e <Event_Handler+0xde>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 8002e6c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e70:	4aaf      	ldr	r2, [pc, #700]	; (8003130 <Event_Handler+0x380>)
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	4413      	add	r3, r2
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 8002e7a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e7e:	4aac      	ldr	r2, [pc, #688]	; (8003130 <Event_Handler+0x380>)
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	4413      	add	r3, r2
 8002e84:	3302      	adds	r3, #2
 8002e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e8a:	801a      	strh	r2, [r3, #0]
              break;
 8002e8c:	e010      	b.n	8002eb0 <Event_Handler+0x100>
            }
            index++;
 8002e8e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e92:	3301      	adds	r3, #1
 8002e94:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002e98:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 8002ea0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ea4:	4aa2      	ldr	r2, [pc, #648]	; (8003130 <Event_Handler+0x380>)
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	4413      	add	r3, r2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1c4      	bne.n	8002e3a <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8002eb0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f040 8235 	bne.w	8003324 <Event_Handler+0x574>
          {
            aP2PClientContext[index].connHandle= handle;
 8002eba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ebe:	4a9c      	ldr	r2, [pc, #624]	; (8003130 <Event_Handler+0x380>)
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002ec8:	801a      	strh	r2, [r3, #0]

            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	78da      	ldrb	r2, [r3, #3]
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	789b      	ldrb	r3, [r3, #2]
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)
          if (pr->Attribute_Data_Length == 20)
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	789b      	ldrb	r3, [r3, #2]
 8002ede:	2b14      	cmp	r3, #20
 8002ee0:	f040 8220 	bne.w	8003324 <Event_Handler+0x574>
          {
            idx = 16;
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
#else
          if (pr->Attribute_Data_Length == 6)
          {
            idx = 4;
#endif
              for (i=0; i<numServ; i++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002ef0:	e06a      	b.n	8002fc8 <Event_Handler+0x218>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 8002ef2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef8:	4413      	add	r3, r2
 8002efa:	791b      	ldrb	r3, [r3, #4]
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002f02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f04:	440b      	add	r3, r1
 8002f06:	3304      	adds	r3, #4
 8002f08:	3301      	adds	r3, #1
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	4313      	orrs	r3, r2
 8002f14:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 8002f16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f18:	f64f 6240 	movw	r2, #65088	; 0xfe40
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d149      	bne.n	8002fb4 <Event_Handler+0x204>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 8002f20:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f24:	4a82      	ldr	r2, [pc, #520]	; (8003130 <Event_Handler+0x380>)
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	4413      	add	r3, r2
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4880      	ldr	r0, [pc, #512]	; (8003134 <Event_Handler+0x384>)
 8002f32:	f007 fdb9 	bl	800aaa8 <iprintf>
#endif
#if (UUID_128BIT_FORMAT==1)
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 8002f36:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002f3a:	3b10      	subs	r3, #16
 8002f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3e:	4413      	add	r3, r2
 8002f40:	791b      	ldrb	r3, [r3, #4]
 8002f42:	b299      	uxth	r1, r3
 8002f44:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002f48:	3b10      	subs	r3, #16
 8002f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3304      	adds	r3, #4
 8002f50:	3301      	adds	r3, #1
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	b291      	uxth	r1, r2
 8002f62:	4a73      	ldr	r2, [pc, #460]	; (8003130 <Event_Handler+0x380>)
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	4413      	add	r3, r2
 8002f68:	3304      	adds	r3, #4
 8002f6a:	460a      	mov	r2, r1
 8002f6c:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 8002f6e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002f72:	3b0e      	subs	r3, #14
 8002f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f76:	4413      	add	r3, r2
 8002f78:	791b      	ldrb	r3, [r3, #4]
 8002f7a:	b299      	uxth	r1, r3
 8002f7c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002f80:	3b0e      	subs	r3, #14
 8002f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	3301      	adds	r3, #1
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f96:	430a      	orrs	r2, r1
 8002f98:	b291      	uxth	r1, r2
 8002f9a:	4a65      	ldr	r2, [pc, #404]	; (8003130 <Event_Handler+0x380>)
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3306      	adds	r3, #6
 8002fa2:	460a      	mov	r2, r1
 8002fa4:	801a      	strh	r2, [r3, #0]
#else
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 8002fa6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002faa:	4a61      	ldr	r2, [pc, #388]	; (8003130 <Event_Handler+0x380>)
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	4413      	add	r3, r2
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	701a      	strb	r2, [r3, #0]
                }
                idx += 6;
 8002fb4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002fb8:	3306      	adds	r3, #6
 8002fba:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 8002fbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002fc8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002fcc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d38e      	bcc.n	8002ef2 <Event_Handler+0x142>
              }
            }
          }
        }
        break;
 8002fd4:	e1a6      	b.n	8003324 <Event_Handler+0x574>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8002fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd8:	3302      	adds	r3, #2
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002fe2:	e004      	b.n	8002fee <Event_Handler+0x23e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 8002fe4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8002fee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <Event_Handler+0x25e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8002ff6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002ffa:	4a4d      	ldr	r2, [pc, #308]	; (8003130 <Event_Handler+0x380>)
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4413      	add	r3, r2
 8003000:	3302      	adds	r3, #2
 8003002:	881a      	ldrh	r2, [r3, #0]
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800300a:	429a      	cmp	r2, r3
 800300c:	d1ea      	bne.n	8002fe4 <Event_Handler+0x234>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800300e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 8188 	bne.w	8003328 <Event_Handler+0x578>
          {

            /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
            idx = 17;
 8003018:	2311      	movs	r3, #17
 800301a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	789b      	ldrb	r3, [r3, #2]
 8003022:	2b15      	cmp	r3, #21
 8003024:	f040 8180 	bne.w	8003328 <Event_Handler+0x578>
#else
              idx = 5;
            if (pr->Handle_Value_Pair_Length == 7)
#endif
            {
              pr->Data_Length -= 1;
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	78db      	ldrb	r3, [r3, #3]
 800302c:	3b01      	subs	r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 8003034:	e06f      	b.n	8003116 <Event_Handler+0x366>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 8003036:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	4413      	add	r3, r2
 800303e:	791b      	ldrb	r3, [r3, #4]
 8003040:	b29a      	uxth	r2, r3
 8003042:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003048:	440b      	add	r3, r1
 800304a:	3304      	adds	r3, #4
 800304c:	3301      	adds	r3, #1
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	b29b      	uxth	r3, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	847b      	strh	r3, [r7, #34]	; 0x22
                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800305a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800305e:	3b0e      	subs	r3, #14
 8003060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003062:	4413      	add	r3, r2
 8003064:	791b      	ldrb	r3, [r3, #4]
 8003066:	b29a      	uxth	r2, r3
 8003068:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800306c:	3b0e      	subs	r3, #14
 800306e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003070:	440b      	add	r3, r1
 8003072:	3304      	adds	r3, #4
 8003074:	3301      	adds	r3, #1
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	b29b      	uxth	r3, r3
 800307e:	4313      	orrs	r3, r2
 8003080:	843b      	strh	r3, [r7, #32]
#else
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                if(uuid == P2P_WRITE_CHAR_UUID)
 8003082:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003084:	f64f 6241 	movw	r2, #65089	; 0xfe41
 8003088:	4293      	cmp	r3, r2
 800308a:	d11a      	bne.n	80030c2 <Event_Handler+0x312>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800308c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003090:	4a27      	ldr	r2, [pc, #156]	; (8003130 <Event_Handler+0x380>)
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	4413      	add	r3, r2
 8003096:	3302      	adds	r3, #2
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	4619      	mov	r1, r3
 800309c:	4826      	ldr	r0, [pc, #152]	; (8003138 <Event_Handler+0x388>)
 800309e:	f007 fd03 	bl	800aaa8 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 80030a2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80030a6:	4a22      	ldr	r2, [pc, #136]	; (8003130 <Event_Handler+0x380>)
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	4413      	add	r3, r2
 80030ac:	2209      	movs	r2, #9
 80030ae:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 80030b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80030b4:	4a1e      	ldr	r2, [pc, #120]	; (8003130 <Event_Handler+0x380>)
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	4413      	add	r3, r2
 80030ba:	3308      	adds	r3, #8
 80030bc:	8c3a      	ldrh	r2, [r7, #32]
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	e01e      	b.n	8003100 <Event_Handler+0x350>
                }

                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 80030c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80030c4:	f64f 6242 	movw	r2, #65090	; 0xfe42
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d119      	bne.n	8003100 <Event_Handler+0x350>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 80030cc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80030d0:	4a17      	ldr	r2, [pc, #92]	; (8003130 <Event_Handler+0x380>)
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	4413      	add	r3, r2
 80030d6:	3302      	adds	r3, #2
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	4619      	mov	r1, r3
 80030dc:	4817      	ldr	r0, [pc, #92]	; (800313c <Event_Handler+0x38c>)
 80030de:	f007 fce3 	bl	800aaa8 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 80030e2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80030e6:	4a12      	ldr	r2, [pc, #72]	; (8003130 <Event_Handler+0x380>)
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	4413      	add	r3, r2
 80030ec:	220a      	movs	r2, #10
 80030ee:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 80030f0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80030f4:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <Event_Handler+0x380>)
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	4413      	add	r3, r2
 80030fa:	330c      	adds	r3, #12
 80030fc:	8c3a      	ldrh	r2, [r7, #32]
 80030fe:	801a      	strh	r2, [r3, #0]
                }
#if (UUID_128BIT_FORMAT==1)
                pr->Data_Length -= 21;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	78db      	ldrb	r3, [r3, #3]
 8003104:	3b15      	subs	r3, #21
 8003106:	b2da      	uxtb	r2, r3
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800310c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003110:	3315      	adds	r3, #21
 8003112:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	78db      	ldrb	r3, [r3, #3]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d18b      	bne.n	8003036 <Event_Handler+0x286>
#endif
              }
            }
          }
        }
        break;
 800311e:	e103      	b.n	8003328 <Event_Handler+0x578>

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8003120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003122:	3302      	adds	r3, #2
 8003124:	61fb      	str	r3, [r7, #28]
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800312c:	e00d      	b.n	800314a <Event_Handler+0x39a>
 800312e:	bf00      	nop
 8003130:	200001b4 	.word	0x200001b4
 8003134:	0800bd70 	.word	0x0800bd70
 8003138:	0800bdac 	.word	0x0800bdac
 800313c:	0800bde4 	.word	0x0800bde4
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 8003140:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003144:	3301      	adds	r3, #1
 8003146:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800314a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10b      	bne.n	800316a <Event_Handler+0x3ba>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8003152:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003156:	4a7c      	ldr	r2, [pc, #496]	; (8003348 <Event_Handler+0x598>)
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	4413      	add	r3, r2
 800315c:	3302      	adds	r3, #2
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003166:	429a      	cmp	r2, r3
 8003168:	d1ea      	bne.n	8003140 <Event_Handler+0x390>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800316a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 80dc 	bne.w	800332c <Event_Handler+0x57c>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	78db      	ldrb	r3, [r3, #3]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	76fb      	strb	r3, [r7, #27]
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	789b      	ldrb	r3, [r3, #2]
 8003186:	2b01      	cmp	r3, #1
 8003188:	f040 80d0 	bne.w	800332c <Event_Handler+0x57c>
            {
              for (i=0; i<numDesc; i++)
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003192:	e056      	b.n	8003242 <Event_Handler+0x492>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 8003194:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	4413      	add	r3, r2
 800319c:	791b      	ldrb	r3, [r3, #4]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80031a4:	69f9      	ldr	r1, [r7, #28]
 80031a6:	440b      	add	r3, r1
 80031a8:	3304      	adds	r3, #4
 80031aa:	3301      	adds	r3, #1
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4313      	orrs	r3, r2
 80031b6:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 80031b8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80031bc:	3302      	adds	r3, #2
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	4413      	add	r3, r2
 80031c2:	791b      	ldrb	r3, [r3, #4]
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80031ca:	3302      	adds	r3, #2
 80031cc:	69f9      	ldr	r1, [r7, #28]
 80031ce:	440b      	add	r3, r1
 80031d0:	3304      	adds	r3, #4
 80031d2:	3301      	adds	r3, #1
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4313      	orrs	r3, r2
 80031de:	82fb      	strh	r3, [r7, #22]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 80031e0:	8afb      	ldrh	r3, [r7, #22]
 80031e2:	f642 1202 	movw	r2, #10498	; 0x2902
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d121      	bne.n	800322e <Event_Handler+0x47e>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 80031ea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80031ee:	4a56      	ldr	r2, [pc, #344]	; (8003348 <Event_Handler+0x598>)
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	4413      	add	r3, r2
 80031f4:	3302      	adds	r3, #2
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	4854      	ldr	r0, [pc, #336]	; (800334c <Event_Handler+0x59c>)
 80031fc:	f007 fc54 	bl	800aaa8 <iprintf>
#endif
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 8003200:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003204:	4a50      	ldr	r2, [pc, #320]	; (8003348 <Event_Handler+0x598>)
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	4413      	add	r3, r2
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b0a      	cmp	r3, #10
 800320e:	d10e      	bne.n	800322e <Event_Handler+0x47e>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 8003210:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003214:	4a4c      	ldr	r2, [pc, #304]	; (8003348 <Event_Handler+0x598>)
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	4413      	add	r3, r2
 800321a:	330e      	adds	r3, #14
 800321c:	8b3a      	ldrh	r2, [r7, #24]
 800321e:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 8003220:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003224:	4a48      	ldr	r2, [pc, #288]	; (8003348 <Event_Handler+0x598>)
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	4413      	add	r3, r2
 800322a:	220b      	movs	r2, #11
 800322c:	701a      	strb	r2, [r3, #0]

                  }
                }
                idx += 4;
 800322e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003232:	3304      	adds	r3, #4
 8003234:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 8003238:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800323c:	3301      	adds	r3, #1
 800323e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8003242:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8003246:	7efb      	ldrb	r3, [r7, #27]
 8003248:	429a      	cmp	r2, r3
 800324a:	d3a3      	bcc.n	8003194 <Event_Handler+0x3e4>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800324c:	e06e      	b.n	800332c <Event_Handler+0x57c>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
          aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 800324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003250:	3302      	adds	r3, #2
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
          uint8_t index;

          index = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800325a:	e004      	b.n	8003266 <Event_Handler+0x4b6>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800325c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003260:	3301      	adds	r3, #1
 8003262:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003266:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10b      	bne.n	8003286 <Event_Handler+0x4d6>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800326e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003272:	4a35      	ldr	r2, [pc, #212]	; (8003348 <Event_Handler+0x598>)
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	4413      	add	r3, r2
 8003278:	3302      	adds	r3, #2
 800327a:	881a      	ldrh	r2, [r3, #0]
 800327c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003282:	429a      	cmp	r2, r3
 8003284:	d1ea      	bne.n	800325c <Event_Handler+0x4ac>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8003286:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800328a:	2b00      	cmp	r3, #0
 800328c:	d150      	bne.n	8003330 <Event_Handler+0x580>
          {

            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	885b      	ldrh	r3, [r3, #2]
 8003292:	b29a      	uxth	r2, r3
 8003294:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003298:	492b      	ldr	r1, [pc, #172]	; (8003348 <Event_Handler+0x598>)
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	440b      	add	r3, r1
 800329e:	330c      	adds	r3, #12
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d144      	bne.n	8003330 <Event_Handler+0x580>
                    (pr->Attribute_Value_Length == (2)) )
 80032a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a8:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d140      	bne.n	8003330 <Event_Handler+0x580>
            {

              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 80032ae:	2302      	movs	r3, #2
 80032b0:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 80032b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b4:	791b      	ldrb	r3, [r3, #4]
 80032b6:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ba:	3305      	adds	r3, #5
 80032bc:	60fb      	str	r3, [r7, #12]

              Gatt_Notification(&Notification);
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f846 	bl	8003354 <Gatt_Notification>
              /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

            }
          }
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 80032c8:	e032      	b.n	8003330 <Event_Handler+0x580>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 80032ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032cc:	3302      	adds	r3, #2
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
#if(CFG_DEBUG_APP_TRACE != 0)
          APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE \n");
 80032d0:	481f      	ldr	r0, [pc, #124]	; (8003350 <Event_Handler+0x5a0>)
 80032d2:	f007 fc85 	bl	800abe0 <puts>
          APP_DBG_MSG("\n");
 80032d6:	200a      	movs	r0, #10
 80032d8:	f007 fbfe 	bl	800aad8 <putchar>
#endif

          uint8_t index;

          index = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80032e2:	e004      	b.n	80032ee <Event_Handler+0x53e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 80032e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80032e8:	3301      	adds	r3, #1
 80032ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80032ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <Event_Handler+0x55e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80032f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80032fa:	4a13      	ldr	r2, [pc, #76]	; (8003348 <Event_Handler+0x598>)
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	4413      	add	r3, r2
 8003300:	3302      	adds	r3, #2
 8003302:	881a      	ldrh	r2, [r3, #0]
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800330a:	429a      	cmp	r2, r3
 800330c:	d1ea      	bne.n	80032e4 <Event_Handler+0x534>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800330e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10e      	bne.n	8003334 <Event_Handler+0x584>
          {

            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 8003316:	2100      	movs	r1, #0
 8003318:	2004      	movs	r0, #4
 800331a:	f007 fa6f 	bl	800a7fc <UTIL_SEQ_SetTask>

          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800331e:	e009      	b.n	8003334 <Event_Handler+0x584>
        default:
          break;
 8003320:	bf00      	nop
 8003322:	e00a      	b.n	800333a <Event_Handler+0x58a>
        break;
 8003324:	bf00      	nop
 8003326:	e008      	b.n	800333a <Event_Handler+0x58a>
        break;
 8003328:	bf00      	nop
 800332a:	e006      	b.n	800333a <Event_Handler+0x58a>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800332c:	bf00      	nop
 800332e:	e004      	b.n	800333a <Event_Handler+0x58a>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 8003330:	bf00      	nop
 8003332:	e002      	b.n	800333a <Event_Handler+0x58a>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 8003334:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003336:	e000      	b.n	800333a <Event_Handler+0x58a>

    default:
      break;
 8003338:	bf00      	nop
  }

  return(return_value);
 800333a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800333e:	4618      	mov	r0, r3
 8003340:	3750      	adds	r7, #80	; 0x50
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200001b4 	.word	0x200001b4
 800334c:	0800be28 	.word	0x0800be28
 8003350:	0800be70 	.word	0x0800be70

08003354 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d127      	bne.n	80033b4 <Gatt_Notification+0x60>
/* USER CODE END P2P_Client_Evt_Opcode */

    case P2P_NOTIFICATION_INFO_RECEIVED_EVT:
/* USER CODE BEGIN P2P_NOTIFICATION_INFO_RECEIVED_EVT */
    {
      P2P_Client_App_Context.LedControl.Device_Led_Selection=pNotification->DataTransfered.pPayload[0];
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <Gatt_Notification+0x6c>)
 800336c:	705a      	strb	r2, [r3, #1]
      switch(P2P_Client_App_Context.LedControl.Device_Led_Selection) {
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <Gatt_Notification+0x6c>)
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d11c      	bne.n	80033b0 <Gatt_Notification+0x5c>

        case 0x01 : {

          P2P_Client_App_Context.LedControl.Led1=pNotification->DataTransfered.pPayload[1];
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	785a      	ldrb	r2, [r3, #1]
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <Gatt_Notification+0x6c>)
 800337e:	709a      	strb	r2, [r3, #2]

          if(P2P_Client_App_Context.LedControl.Led1==0x00){
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <Gatt_Notification+0x6c>)
 8003382:	789b      	ldrb	r3, [r3, #2]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <Gatt_Notification+0x48>
            BSP_LED_Off(LED_BLUE);
 8003388:	2000      	movs	r0, #0
 800338a:	f000 fc5b 	bl	8003c44 <BSP_LED_Off>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED OFF \n\r");
 800338e:	480d      	ldr	r0, [pc, #52]	; (80033c4 <Gatt_Notification+0x70>)
 8003390:	f007 fb8a 	bl	800aaa8 <iprintf>
            APP_DBG_MSG(" \n\r");
 8003394:	480c      	ldr	r0, [pc, #48]	; (80033c8 <Gatt_Notification+0x74>)
 8003396:	f007 fb87 	bl	800aaa8 <iprintf>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
            APP_DBG_MSG(" \n\r");
            BSP_LED_On(LED_BLUE);
          }

          break;
 800339a:	e00a      	b.n	80033b2 <Gatt_Notification+0x5e>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
 800339c:	480b      	ldr	r0, [pc, #44]	; (80033cc <Gatt_Notification+0x78>)
 800339e:	f007 fb83 	bl	800aaa8 <iprintf>
            APP_DBG_MSG(" \n\r");
 80033a2:	4809      	ldr	r0, [pc, #36]	; (80033c8 <Gatt_Notification+0x74>)
 80033a4:	f007 fb80 	bl	800aaa8 <iprintf>
            BSP_LED_On(LED_BLUE);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f000 fc31 	bl	8003c10 <BSP_LED_On>
          break;
 80033ae:	e000      	b.n	80033b2 <Gatt_Notification+0x5e>
        }
        default : break;
 80033b0:	bf00      	nop
      }

    }
/* USER CODE END P2P_NOTIFICATION_INFO_RECEIVED_EVT */
      break;
 80033b2:	e000      	b.n	80033b6 <Gatt_Notification+0x62>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 80033b4:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 80033b6:	bf00      	nop
}
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200001c4 	.word	0x200001c4
 80033c4:	0800bea0 	.word	0x0800bea0
 80033c8:	0800bee0 	.word	0x0800bee0
 80033cc:	0800bee4 	.word	0x0800bee4

080033d0 <P2P_Client_APP_Get_State>:

uint8_t P2P_Client_APP_Get_State( void ) {
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <P2P_Client_APP_Get_State+0x14>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	200001b4 	.word	0x200001b4

080033e8 <Write_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
tBleStatus Write_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	603a      	str	r2, [r7, #0]
 80033f2:	80fb      	strh	r3, [r7, #6]
 80033f4:	460b      	mov	r3, r1
 80033f6:	717b      	strb	r3, [r7, #5]

  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80033f8:	2342      	movs	r3, #66	; 0x42
 80033fa:	73fb      	strb	r3, [r7, #15]
  uint8_t index;

  index = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003400:	e01b      	b.n	800343a <Write_Char+0x52>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {

    switch(UUID)
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	f64f 6241 	movw	r2, #65089	; 0xfe41
 8003408:	4293      	cmp	r3, r2
 800340a:	d112      	bne.n	8003432 <Write_Char+0x4a>
    {
      case P2P_WRITE_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
        ret =aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 800340c:	7bbb      	ldrb	r3, [r7, #14]
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <Write_Char+0x70>)
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	4413      	add	r3, r2
 8003414:	3302      	adds	r3, #2
 8003416:	8818      	ldrh	r0, [r3, #0]
 8003418:	7bbb      	ldrb	r3, [r7, #14]
 800341a:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <Write_Char+0x70>)
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	4413      	add	r3, r2
 8003420:	3308      	adds	r3, #8
 8003422:	8819      	ldrh	r1, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2202      	movs	r2, #2
 8003428:	f005 fa11 	bl	800884e <aci_gatt_write_without_resp>
 800342c:	4603      	mov	r3, r0
 800342e:	73fb      	strb	r3, [r7, #15]
                                         aP2PClientContext[index].P2PWriteToServerCharHdle,
                                         2, /* charValueLen */
                                         (uint8_t *)  pPayload);

        break;
 8003430:	e000      	b.n	8003434 <Write_Char+0x4c>

      default:
        break;
 8003432:	bf00      	nop
    }
    index++;
 8003434:	7bbb      	ldrb	r3, [r7, #14]
 8003436:	3301      	adds	r3, #1
 8003438:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800343a:	7bbb      	ldrb	r3, [r7, #14]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d106      	bne.n	800344e <Write_Char+0x66>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003440:	7bbb      	ldrb	r3, [r7, #14]
 8003442:	4a05      	ldr	r2, [pc, #20]	; (8003458 <Write_Char+0x70>)
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1d9      	bne.n	8003402 <Write_Char+0x1a>
  }

  return ret;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
}/* end Write_Char() */
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	200001b4 	.word	0x200001b4

0800345c <Button_Trigger_Received>:

void Button_Trigger_Received(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0


  APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON PUSHED - WRITE TO SERVER \n ");
 8003460:	480c      	ldr	r0, [pc, #48]	; (8003494 <Button_Trigger_Received+0x38>)
 8003462:	f007 fb21 	bl	800aaa8 <iprintf>
  APP_DBG_MSG(" \n\r");
 8003466:	480c      	ldr	r0, [pc, #48]	; (8003498 <Button_Trigger_Received+0x3c>)
 8003468:	f007 fb1e 	bl	800aaa8 <iprintf>
  if(P2P_Client_App_Context.ButtonStatus.Button1==0x00){
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <Button_Trigger_Received+0x40>)
 800346e:	791b      	ldrb	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d103      	bne.n	800347c <Button_Trigger_Received+0x20>
    P2P_Client_App_Context.ButtonStatus.Button1=0x01;
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <Button_Trigger_Received+0x40>)
 8003476:	2201      	movs	r2, #1
 8003478:	711a      	strb	r2, [r3, #4]
 800347a:	e002      	b.n	8003482 <Button_Trigger_Received+0x26>
  }else {
    P2P_Client_App_Context.ButtonStatus.Button1=0x00;
 800347c:	4b07      	ldr	r3, [pc, #28]	; (800349c <Button_Trigger_Received+0x40>)
 800347e:	2200      	movs	r2, #0
 8003480:	711a      	strb	r2, [r3, #4]
  }

  Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.ButtonStatus);
 8003482:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <Button_Trigger_Received+0x44>)
 8003484:	2100      	movs	r1, #0
 8003486:	f64f 6041 	movw	r0, #65089	; 0xfe41
 800348a:	f7ff ffad 	bl	80033e8 <Write_Char>

  return;
 800348e:	bf00      	nop
}
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	0800bf24 	.word	0x0800bf24
 8003498:	0800bee0 	.word	0x0800bee0
 800349c:	200001c4 	.word	0x200001c4
 80034a0:	200001c7 	.word	0x200001c7

080034a4 <Update_Service>:

void Update_Service()
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 80034aa:	2301      	movs	r3, #1
 80034ac:	80bb      	strh	r3, [r7, #4]
  uint16_t disable = 0x0000;
 80034ae:	2300      	movs	r3, #0
 80034b0:	807b      	strh	r3, [r7, #2]

  uint8_t index;

  index = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80034b6:	e0a5      	b.n	8003604 <Update_Service+0x160>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {


    switch(aP2PClientContext[index].state)
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	4a5a      	ldr	r2, [pc, #360]	; (8003624 <Update_Service+0x180>)
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	4413      	add	r3, r2
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	3b07      	subs	r3, #7
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	f200 8099 	bhi.w	80035fc <Update_Service+0x158>
 80034ca:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <Update_Service+0x2c>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	080034e9 	.word	0x080034e9
 80034d4:	080034f1 	.word	0x080034f1
 80034d8:	08003523 	.word	0x08003523
 80034dc:	08003559 	.word	0x08003559
 80034e0:	0800358f 	.word	0x0800358f
 80034e4:	080035c9 	.word	0x080035c9
    {

      case APP_BLE_DISCOVER_SERVICES:
        APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
 80034e8:	484f      	ldr	r0, [pc, #316]	; (8003628 <Update_Service+0x184>)
 80034ea:	f007 fb79 	bl	800abe0 <puts>
        break;
 80034ee:	e086      	b.n	80035fe <Update_Service+0x15a>
      case APP_BLE_DISCOVER_CHARACS:
        APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
 80034f0:	484e      	ldr	r0, [pc, #312]	; (800362c <Update_Service+0x188>)
 80034f2:	f007 fb75 	bl	800abe0 <puts>
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	4a4a      	ldr	r2, [pc, #296]	; (8003624 <Update_Service+0x180>)
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	4413      	add	r3, r2
 80034fe:	3302      	adds	r3, #2
 8003500:	8818      	ldrh	r0, [r3, #0]
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	4a47      	ldr	r2, [pc, #284]	; (8003624 <Update_Service+0x180>)
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	4413      	add	r3, r2
 800350a:	3304      	adds	r3, #4
 800350c:	8819      	ldrh	r1, [r3, #0]
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	4a44      	ldr	r2, [pc, #272]	; (8003624 <Update_Service+0x180>)
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	4413      	add	r3, r2
 8003516:	3306      	adds	r3, #6
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	f005 f83c 	bl	8008598 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                          aP2PClientContext[index].P2PServiceEndHandle);

        break;
 8003520:	e06d      	b.n	80035fe <Update_Service+0x15a>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No decriptor */
        APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write Characteritic\n");
 8003522:	4843      	ldr	r0, [pc, #268]	; (8003630 <Update_Service+0x18c>)
 8003524:	f007 fb5c 	bl	800abe0 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	4a3e      	ldr	r2, [pc, #248]	; (8003624 <Update_Service+0x180>)
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	4413      	add	r3, r2
 8003530:	3302      	adds	r3, #2
 8003532:	8818      	ldrh	r0, [r3, #0]
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	4a3b      	ldr	r2, [pc, #236]	; (8003624 <Update_Service+0x180>)
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	4413      	add	r3, r2
 800353c:	3308      	adds	r3, #8
 800353e:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	4a38      	ldr	r2, [pc, #224]	; (8003624 <Update_Service+0x180>)
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	4413      	add	r3, r2
 8003548:	3308      	adds	r3, #8
 800354a:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800354c:	3302      	adds	r3, #2
 800354e:	b29b      	uxth	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	f005 f88c 	bl	800866e <aci_gatt_disc_all_char_desc>

        break;
 8003556:	e052      	b.n	80035fe <Update_Service+0x15a>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification Characteritic\n");
 8003558:	4836      	ldr	r0, [pc, #216]	; (8003634 <Update_Service+0x190>)
 800355a:	f007 fb41 	bl	800abe0 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	4a30      	ldr	r2, [pc, #192]	; (8003624 <Update_Service+0x180>)
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	4413      	add	r3, r2
 8003566:	3302      	adds	r3, #2
 8003568:	8818      	ldrh	r0, [r3, #0]
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	4a2d      	ldr	r2, [pc, #180]	; (8003624 <Update_Service+0x180>)
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	4413      	add	r3, r2
 8003572:	330c      	adds	r3, #12
 8003574:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	4a2a      	ldr	r2, [pc, #168]	; (8003624 <Update_Service+0x180>)
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	4413      	add	r3, r2
 800357e:	330c      	adds	r3, #12
 8003580:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8003582:	3302      	adds	r3, #2
 8003584:	b29b      	uxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	f005 f871 	bl	800866e <aci_gatt_disc_all_char_desc>

        break;
 800358c:	e037      	b.n	80035fe <Update_Service+0x15a>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        APP_DBG_MSG("* GATT : Enable Server Notification\n");
 800358e:	482a      	ldr	r0, [pc, #168]	; (8003638 <Update_Service+0x194>)
 8003590:	f007 fb26 	bl	800abe0 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	4a23      	ldr	r2, [pc, #140]	; (8003624 <Update_Service+0x180>)
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	4413      	add	r3, r2
 800359c:	3302      	adds	r3, #2
 800359e:	8818      	ldrh	r0, [r3, #0]
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	4a20      	ldr	r2, [pc, #128]	; (8003624 <Update_Service+0x180>)
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	4413      	add	r3, r2
 80035a8:	330e      	adds	r3, #14
 80035aa:	8819      	ldrh	r1, [r3, #0]
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	2202      	movs	r2, #2
 80035b0:	f005 f8c8 	bl	8008744 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <Update_Service+0x180>)
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	4413      	add	r3, r2
 80035bc:	2206      	movs	r2, #6
 80035be:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_RED);
 80035c0:	2002      	movs	r0, #2
 80035c2:	f000 fb3f 	bl	8003c44 <BSP_LED_Off>

        break;
 80035c6:	e01a      	b.n	80035fe <Update_Service+0x15a>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        APP_DBG_MSG("* GATT : Disable Server Notification\n");
 80035c8:	481c      	ldr	r0, [pc, #112]	; (800363c <Update_Service+0x198>)
 80035ca:	f007 fb09 	bl	800abe0 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	4a14      	ldr	r2, [pc, #80]	; (8003624 <Update_Service+0x180>)
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	4413      	add	r3, r2
 80035d6:	3302      	adds	r3, #2
 80035d8:	8818      	ldrh	r0, [r3, #0]
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	4a11      	ldr	r2, [pc, #68]	; (8003624 <Update_Service+0x180>)
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	4413      	add	r3, r2
 80035e2:	330e      	adds	r3, #14
 80035e4:	8819      	ldrh	r1, [r3, #0]
 80035e6:	1cbb      	adds	r3, r7, #2
 80035e8:	2202      	movs	r2, #2
 80035ea:	f005 f8ab 	bl	8008744 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&disable);

        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <Update_Service+0x180>)
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	4413      	add	r3, r2
 80035f6:	2206      	movs	r2, #6
 80035f8:	701a      	strb	r2, [r3, #0]

        break;
 80035fa:	e000      	b.n	80035fe <Update_Service+0x15a>
      default:
        break;
 80035fc:	bf00      	nop
    }
    index++;
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	3301      	adds	r3, #1
 8003602:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d108      	bne.n	800361c <Update_Service+0x178>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	4a05      	ldr	r2, [pc, #20]	; (8003624 <Update_Service+0x180>)
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	4413      	add	r3, r2
 8003612:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003614:	2b00      	cmp	r3, #0
 8003616:	f47f af4f 	bne.w	80034b8 <Update_Service+0x14>
  }
  return;
 800361a:	bf00      	nop
 800361c:	bf00      	nop
}
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	200001b4 	.word	0x200001b4
 8003628:	0800bf64 	.word	0x0800bf64
 800362c:	0800bf7c 	.word	0x0800bf7c
 8003630:	0800bfa4 	.word	0x0800bfa4
 8003634:	0800bfe0 	.word	0x0800bfe0
 8003638:	0800c020 	.word	0x0800c020
 800363c:	0800c044 	.word	0x0800c044

08003640 <LL_PWR_EnableBootC2>:
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <LL_PWR_EnableBootC2+0x1c>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <LL_PWR_EnableBootC2+0x1c>)
 800364a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364e:	60d3      	str	r3, [r2, #12]
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	58000400 	.word	0x58000400

08003660 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800366a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800366e:	4905      	ldr	r1, [pc, #20]	; (8003684 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	58000800 	.word	0x58000800

08003688 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003692:	6a1a      	ldr	r2, [r3, #32]
 8003694:	4904      	ldr	r1, [pc, #16]	; (80036a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4313      	orrs	r3, r2
 800369a:	620b      	str	r3, [r1, #32]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	58000800 	.word	0x58000800

080036ac <LL_AHB3_GRP1_EnableClock>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80036b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80036c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4013      	ands	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036d0:	68fb      	ldr	r3, [r7, #12]
}
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80036e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80036ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80036fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4013      	ands	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003708:	68fb      	ldr	r3, [r7, #12]
}
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_C1_IPCC_EnableIT_TXF>:
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <LL_C1_IPCC_EnableIT_RXO>:
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	601a      	str	r2, [r3, #0]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	43db      	mvns	r3, r3
 800376a:	401a      	ands	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	605a      	str	r2, [r3, #4]
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	605a      	str	r2, [r3, #4]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	401a      	ands	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	609a      	str	r2, [r3, #8]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_C1_IPCC_SetFlag_CHx>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	041a      	lsls	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	609a      	str	r2, [r3, #8]
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	4013      	ands	r3, r2
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d101      	bne.n	800381a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	4013      	ands	r3, r2
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d101      	bne.n	8003844 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003858:	2102      	movs	r1, #2
 800385a:	4819      	ldr	r0, [pc, #100]	; (80038c0 <HW_IPCC_Rx_Handler+0x6c>)
 800385c:	f7ff ffe4 	bl	8003828 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <HW_IPCC_Rx_Handler+0x26>
 8003866:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <HW_IPCC_Rx_Handler+0x6c>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	43db      	mvns	r3, r3
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003874:	f000 f8ea 	bl	8003a4c <HW_IPCC_SYS_EvtHandler>
 8003878:	e01f      	b.n	80038ba <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800387a:	2101      	movs	r1, #1
 800387c:	4810      	ldr	r0, [pc, #64]	; (80038c0 <HW_IPCC_Rx_Handler+0x6c>)
 800387e:	f7ff ffd3 	bl	8003828 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HW_IPCC_Rx_Handler+0x46>
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <HW_IPCC_Rx_Handler+0x6c>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8003894:	f000 f89e 	bl	80039d4 <HW_IPCC_BLE_EvtHandler>
 8003898:	e00f      	b.n	80038ba <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800389a:	2108      	movs	r1, #8
 800389c:	4808      	ldr	r0, [pc, #32]	; (80038c0 <HW_IPCC_Rx_Handler+0x6c>)
 800389e:	f7ff ffc3 	bl	8003828 <LL_C2_IPCC_IsActiveFlag_CHx>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d009      	beq.n	80038bc <HW_IPCC_Rx_Handler+0x68>
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HW_IPCC_Rx_Handler+0x6c>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80038b6:	f000 f915 	bl	8003ae4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
}
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	58000c00 	.word	0x58000c00

080038c4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80038c8:	2102      	movs	r1, #2
 80038ca:	4822      	ldr	r0, [pc, #136]	; (8003954 <HW_IPCC_Tx_Handler+0x90>)
 80038cc:	f7ff ff97 	bl	80037fe <LL_C1_IPCC_IsActiveFlag_CHx>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HW_IPCC_Tx_Handler+0x26>
 80038d6:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <HW_IPCC_Tx_Handler+0x90>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	43db      	mvns	r3, r3
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80038e4:	f000 f8a6 	bl	8003a34 <HW_IPCC_SYS_CmdEvtHandler>
 80038e8:	e031      	b.n	800394e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80038ea:	2102      	movs	r1, #2
 80038ec:	4819      	ldr	r0, [pc, #100]	; (8003954 <HW_IPCC_Tx_Handler+0x90>)
 80038ee:	f7ff ff86 	bl	80037fe <LL_C1_IPCC_IsActiveFlag_CHx>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HW_IPCC_Tx_Handler+0x48>
 80038f8:	4b16      	ldr	r3, [pc, #88]	; (8003954 <HW_IPCC_Tx_Handler+0x90>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003906:	f000 f895 	bl	8003a34 <HW_IPCC_SYS_CmdEvtHandler>
 800390a:	e020      	b.n	800394e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800390c:	2108      	movs	r1, #8
 800390e:	4811      	ldr	r0, [pc, #68]	; (8003954 <HW_IPCC_Tx_Handler+0x90>)
 8003910:	f7ff ff75 	bl	80037fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HW_IPCC_Tx_Handler+0x6a>
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HW_IPCC_Tx_Handler+0x90>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	43db      	mvns	r3, r3
 8003920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003928:	f000 f8be 	bl	8003aa8 <HW_IPCC_MM_FreeBufHandler>
 800392c:	e00f      	b.n	800394e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800392e:	2120      	movs	r1, #32
 8003930:	4808      	ldr	r0, [pc, #32]	; (8003954 <HW_IPCC_Tx_Handler+0x90>)
 8003932:	f7ff ff64 	bl	80037fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HW_IPCC_Tx_Handler+0x8c>
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HW_IPCC_Tx_Handler+0x90>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	43db      	mvns	r3, r3
 8003942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800394a:	f000 f84f 	bl	80039ec <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800394e:	bf00      	nop
 8003950:	bf00      	nop
}
 8003952:	bd80      	pop	{r7, pc}
 8003954:	58000c00 	.word	0x58000c00

08003958 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800395c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003960:	f7ff febd 	bl	80036de <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003964:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003968:	f7ff fe7a 	bl	8003660 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800396c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003970:	f7ff fe8a 	bl	8003688 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003974:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003976:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003978:	f7ff fe62 	bl	8003640 <LL_PWR_EnableBootC2>

  return;
 800397c:	bf00      	nop
}
 800397e:	bd80      	pop	{r7, pc}

08003980 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003984:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003988:	f7ff fe90 	bl	80036ac <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800398c:	4806      	ldr	r0, [pc, #24]	; (80039a8 <HW_IPCC_Init+0x28>)
 800398e:	f7ff fed2 	bl	8003736 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8003992:	4805      	ldr	r0, [pc, #20]	; (80039a8 <HW_IPCC_Init+0x28>)
 8003994:	f7ff febf 	bl	8003716 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003998:	202c      	movs	r0, #44	; 0x2c
 800399a:	f000 fc48 	bl	800422e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800399e:	202d      	movs	r0, #45	; 0x2d
 80039a0:	f000 fc45 	bl	800422e <HAL_NVIC_EnableIRQ>

  return;
 80039a4:	bf00      	nop
}
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	58000c00 	.word	0x58000c00

080039ac <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80039b0:	2101      	movs	r1, #1
 80039b2:	4802      	ldr	r0, [pc, #8]	; (80039bc <HW_IPCC_BLE_Init+0x10>)
 80039b4:	f7ff fef4 	bl	80037a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80039b8:	bf00      	nop
}
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	58000c00 	.word	0x58000c00

080039c0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80039c4:	2101      	movs	r1, #1
 80039c6:	4802      	ldr	r0, [pc, #8]	; (80039d0 <HW_IPCC_BLE_SendCmd+0x10>)
 80039c8:	f7ff ff0a 	bl	80037e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80039cc:	bf00      	nop
}
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	58000c00 	.word	0x58000c00

080039d4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80039d8:	f006 fc10 	bl	800a1fc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80039dc:	2101      	movs	r1, #1
 80039de:	4802      	ldr	r0, [pc, #8]	; (80039e8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80039e0:	f7ff fef0 	bl	80037c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80039e4:	bf00      	nop
}
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	58000c00 	.word	0x58000c00

080039ec <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80039f0:	2120      	movs	r1, #32
 80039f2:	4803      	ldr	r0, [pc, #12]	; (8003a00 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80039f4:	f7ff fec2 	bl	800377c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80039f8:	f006 fc30 	bl	800a25c <HW_IPCC_BLE_AclDataAckNot>

  return;
 80039fc:	bf00      	nop
}
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	58000c00 	.word	0x58000c00

08003a04 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003a08:	2102      	movs	r1, #2
 8003a0a:	4802      	ldr	r0, [pc, #8]	; (8003a14 <HW_IPCC_SYS_Init+0x10>)
 8003a0c:	f7ff fec8 	bl	80037a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003a10:	bf00      	nop
}
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	58000c00 	.word	0x58000c00

08003a18 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	4804      	ldr	r0, [pc, #16]	; (8003a30 <HW_IPCC_SYS_SendCmd+0x18>)
 8003a20:	f7ff fede 	bl	80037e0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003a24:	2102      	movs	r1, #2
 8003a26:	4802      	ldr	r0, [pc, #8]	; (8003a30 <HW_IPCC_SYS_SendCmd+0x18>)
 8003a28:	f7ff fe95 	bl	8003756 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8003a2c:	bf00      	nop
}
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	58000c00 	.word	0x58000c00

08003a34 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003a38:	2102      	movs	r1, #2
 8003a3a:	4803      	ldr	r0, [pc, #12]	; (8003a48 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003a3c:	f7ff fe9e 	bl	800377c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003a40:	f006 fc5c 	bl	800a2fc <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003a44:	bf00      	nop
}
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	58000c00 	.word	0x58000c00

08003a4c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003a50:	f006 fc6a 	bl	800a328 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003a54:	2102      	movs	r1, #2
 8003a56:	4802      	ldr	r0, [pc, #8]	; (8003a60 <HW_IPCC_SYS_EvtHandler+0x14>)
 8003a58:	f7ff feb4 	bl	80037c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003a5c:	bf00      	nop
}
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	58000c00 	.word	0x58000c00

08003a64 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003a6c:	2108      	movs	r1, #8
 8003a6e:	480c      	ldr	r0, [pc, #48]	; (8003aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003a70:	f7ff fec5 	bl	80037fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d007      	beq.n	8003a8a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003a80:	2108      	movs	r1, #8
 8003a82:	4807      	ldr	r0, [pc, #28]	; (8003aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003a84:	f7ff fe67 	bl	8003756 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003a88:	e006      	b.n	8003a98 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003a8e:	2108      	movs	r1, #8
 8003a90:	4803      	ldr	r0, [pc, #12]	; (8003aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003a92:	f7ff fea5 	bl	80037e0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003a96:	bf00      	nop
}
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	58000c00 	.word	0x58000c00
 8003aa4:	20000250 	.word	0x20000250

08003aa8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003aac:	2108      	movs	r1, #8
 8003aae:	4806      	ldr	r0, [pc, #24]	; (8003ac8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003ab0:	f7ff fe64 	bl	800377c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003aba:	2108      	movs	r1, #8
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003abe:	f7ff fe8f 	bl	80037e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003ac2:	bf00      	nop
}
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	58000c00 	.word	0x58000c00
 8003acc:	20000250 	.word	0x20000250

08003ad0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003ad4:	2108      	movs	r1, #8
 8003ad6:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <HW_IPCC_TRACES_Init+0x10>)
 8003ad8:	f7ff fe62 	bl	80037a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003adc:	bf00      	nop
}
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	58000c00 	.word	0x58000c00

08003ae4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003ae8:	f006 fcc6 	bl	800a478 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003aec:	2108      	movs	r1, #8
 8003aee:	4802      	ldr	r0, [pc, #8]	; (8003af8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8003af0:	f7ff fe68 	bl	80037c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003af4:	bf00      	nop
}
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	58000c00 	.word	0x58000c00

08003afc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003afc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003afe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b00:	3304      	adds	r3, #4

08003b02 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b02:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b04:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003b06:	d3f9      	bcc.n	8003afc <CopyDataInit>
  bx lr
 8003b08:	4770      	bx	lr

08003b0a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003b0a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003b0c:	3004      	adds	r0, #4

08003b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003b0e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003b10:	d3fb      	bcc.n	8003b0a <FillZerobss>
  bx lr
 8003b12:	4770      	bx	lr

08003b14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b14:	480c      	ldr	r0, [pc, #48]	; (8003b48 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003b16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003b18:	480c      	ldr	r0, [pc, #48]	; (8003b4c <LoopForever+0x8>)
 8003b1a:	490d      	ldr	r1, [pc, #52]	; (8003b50 <LoopForever+0xc>)
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <LoopForever+0x10>)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f7ff ffef 	bl	8003b02 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003b24:	480c      	ldr	r0, [pc, #48]	; (8003b58 <LoopForever+0x14>)
 8003b26:	490d      	ldr	r1, [pc, #52]	; (8003b5c <LoopForever+0x18>)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f7ff fff0 	bl	8003b0e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003b2e:	480c      	ldr	r0, [pc, #48]	; (8003b60 <LoopForever+0x1c>)
 8003b30:	490c      	ldr	r1, [pc, #48]	; (8003b64 <LoopForever+0x20>)
 8003b32:	2300      	movs	r3, #0
 8003b34:	f7ff ffeb 	bl	8003b0e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b38:	f000 f910 	bl	8003d5c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003b3c:	f006 ff7a 	bl	800aa34 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003b40:	f7fd ffde 	bl	8001b00 <main>

08003b44 <LoopForever>:

LoopForever:
  b LoopForever
 8003b44:	e7fe      	b.n	8003b44 <LoopForever>
 8003b46:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003b48:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003b4c:	20000004 	.word	0x20000004
 8003b50:	20000094 	.word	0x20000094
 8003b54:	0800c364 	.word	0x0800c364
  INIT_BSS _sbss, _ebss
 8003b58:	2000021c 	.word	0x2000021c
 8003b5c:	20001604 	.word	0x20001604
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003b60:	200301e0 	.word	0x200301e0
 8003b64:	20030a57 	.word	0x20030a57

08003b68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b68:	e7fe      	b.n	8003b68 <ADC1_IRQHandler>

08003b6a <LL_AHB2_GRP1_EnableClock>:
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003ba6:	f107 030c 	add.w	r3, r7, #12
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	60da      	str	r2, [r3, #12]
 8003bb4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003bb6:	2002      	movs	r0, #2
 8003bb8:	f7ff ffd7 	bl	8003b6a <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <BSP_LED_Init+0x6c>)
 8003bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bc4:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <BSP_LED_Init+0x70>)
 8003bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bda:	f107 020c 	add.w	r2, r7, #12
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 fedb 	bl	800499c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	4a08      	ldr	r2, [pc, #32]	; (8003c0c <BSP_LED_Init+0x70>)
 8003bea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	4a05      	ldr	r2, [pc, #20]	; (8003c08 <BSP_LED_Init+0x6c>)
 8003bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f001 f83f 	bl	8004c7c <HAL_GPIO_WritePin>
}
 8003bfe:	bf00      	nop
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	0800c1d0 	.word	0x0800c1d0
 8003c0c:	20000004 	.word	0x20000004

08003c10 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	4a07      	ldr	r2, [pc, #28]	; (8003c3c <BSP_LED_On+0x2c>)
 8003c1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	4a06      	ldr	r2, [pc, #24]	; (8003c40 <BSP_LED_On+0x30>)
 8003c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f001 f825 	bl	8004c7c <HAL_GPIO_WritePin>
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000004 	.word	0x20000004
 8003c40:	0800c1d0 	.word	0x0800c1d0

08003c44 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <BSP_LED_Off+0x2c>)
 8003c52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	4a06      	ldr	r2, [pc, #24]	; (8003c74 <BSP_LED_Off+0x30>)
 8003c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	4619      	mov	r1, r3
 8003c62:	f001 f80b 	bl	8004c7c <HAL_GPIO_WritePin>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000004 	.word	0x20000004
 8003c74:	0800c1d0 	.word	0x0800c1d0

08003c78 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	460a      	mov	r2, r1
 8003c82:	71fb      	strb	r3, [r7, #7]
 8003c84:	4613      	mov	r3, r2
 8003c86:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003c88:	f107 030c 	add.w	r3, r7, #12
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	60da      	str	r2, [r3, #12]
 8003c96:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <BSP_PB_Init+0x2e>
 8003c9e:	2004      	movs	r0, #4
 8003ca0:	f7ff ff63 	bl	8003b6a <LL_AHB2_GRP1_EnableClock>
 8003ca4:	e00c      	b.n	8003cc0 <BSP_PB_Init+0x48>
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d103      	bne.n	8003cb4 <BSP_PB_Init+0x3c>
 8003cac:	2008      	movs	r0, #8
 8003cae:	f7ff ff5c 	bl	8003b6a <LL_AHB2_GRP1_EnableClock>
 8003cb2:	e005      	b.n	8003cc0 <BSP_PB_Init+0x48>
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d102      	bne.n	8003cc0 <BSP_PB_Init+0x48>
 8003cba:	2008      	movs	r0, #8
 8003cbc:	f7ff ff55 	bl	8003b6a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003cc0:	79bb      	ldrb	r3, [r7, #6]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d117      	bne.n	8003cf6 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <BSP_PB_Init+0xd4>)
 8003cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cce:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <BSP_PB_Init+0xd8>)
 8003ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce4:	f107 020c 	add.w	r2, r7, #12
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fe56 	bl	800499c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f7fe f8dc 	bl	8001eae <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003cf6:	79bb      	ldrb	r3, [r7, #6]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d122      	bne.n	8003d42 <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <BSP_PB_Init+0xd4>)
 8003d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d04:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003d06:	2301      	movs	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <BSP_PB_Init+0xdc>)
 8003d0c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	4a0f      	ldr	r2, [pc, #60]	; (8003d50 <BSP_PB_Init+0xd8>)
 8003d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d16:	f107 020c 	add.w	r2, r7, #12
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fe3d 	bl	800499c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <BSP_PB_Init+0xe0>)
 8003d26:	5cd3      	ldrb	r3, [r2, r3]
 8003d28:	b25b      	sxtb	r3, r3
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	210f      	movs	r1, #15
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fa63 	bl	80041fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <BSP_PB_Init+0xe0>)
 8003d38:	5cd3      	ldrb	r3, [r2, r3]
 8003d3a:	b25b      	sxtb	r3, r3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fa76 	bl	800422e <HAL_NVIC_EnableIRQ>
  }
}
 8003d42:	bf00      	nop
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	0800c1d8 	.word	0x0800c1d8
 8003d50:	20000010 	.word	0x20000010
 8003d54:	10210000 	.word	0x10210000
 8003d58:	0800c1e0 	.word	0x0800c1e0

08003d5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003d60:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <SystemInit+0xa0>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003d66:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <SystemInit+0xa0>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	4a23      	ldr	r2, [pc, #140]	; (8003dfc <SystemInit+0xa0>)
 8003d6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003d8e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9a:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <SystemInit+0xa4>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dac:	f023 0305 	bic.w	r3, r3, #5
 8003db0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dcc:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <SystemInit+0xa8>)
 8003dce:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <SystemInit+0xa8>)
 8003dd6:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dec:	2200      	movs	r2, #0
 8003dee:	619a      	str	r2, [r3, #24]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000ed00 	.word	0xe000ed00
 8003e00:	faf6fefb 	.word	0xfaf6fefb
 8003e04:	22041000 	.word	0x22041000

08003e08 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4a04      	ldr	r2, [pc, #16]	; (8003e24 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6053      	str	r3, [r2, #4]
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	e0042000 	.word	0xe0042000

08003e28 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003e32:	f043 0302 	orr.w	r3, r3, #2
 8003e36:	6053      	str	r3, [r2, #4]
}
 8003e38:	bf00      	nop
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	e0042000 	.word	0xe0042000

08003e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <HAL_Init+0x3c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a0b      	ldr	r2, [pc, #44]	; (8003e84 <HAL_Init+0x3c>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e5e:	2003      	movs	r0, #3
 8003e60:	f000 f9c0 	bl	80041e4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e64:	2000      	movs	r0, #0
 8003e66:	f000 f80f 	bl	8003e88 <HAL_InitTick>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	71fb      	strb	r3, [r7, #7]
 8003e74:	e001      	b.n	8003e7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e76:	f7fe f8ea 	bl	800204e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	58004000 	.word	0x58004000

08003e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003e94:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <HAL_InitTick+0x6c>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d024      	beq.n	8003ee6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e9c:	f002 f894 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <HAL_InitTick+0x6c>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eac:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f9d6 	bl	8004266 <HAL_SYSTICK_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10f      	bne.n	8003ee0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	d809      	bhi.n	8003eda <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ece:	f000 f994 	bl	80041fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_InitTick+0x70>)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e007      	b.n	8003eea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
 8003ede:	e004      	b.n	8003eea <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e001      	b.n	8003eea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000024 	.word	0x20000024
 8003ef8:	20000020 	.word	0x20000020

08003efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <HAL_IncTick+0x20>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_IncTick+0x24>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <HAL_IncTick+0x24>)
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000024 	.word	0x20000024
 8003f20:	200015f0 	.word	0x200015f0

08003f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  return uwTick;
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_GetTick+0x14>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	200015f0 	.word	0x200015f0

08003f3c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003f40:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <HAL_GetTickPrio+0x14>)
 8003f42:	681b      	ldr	r3, [r3, #0]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20000020 	.word	0x20000020

08003f54 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_GetTickFreq+0x14>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000024 	.word	0x20000024

08003f6c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003f70:	f7ff ff4a 	bl	8003e08 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003f7c:	f7ff ff54 	bl	8003e28 <LL_DBGMCU_EnableDBGStopMode>
}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fb6:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	60d3      	str	r3, [r2, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000ed00 	.word	0xe000ed00

08003fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	f003 0307 	and.w	r3, r3, #7
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	db0b      	blt.n	8004012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	f003 021f 	and.w	r2, r3, #31
 8004000:	4907      	ldr	r1, [pc, #28]	; (8004020 <__NVIC_EnableIRQ+0x38>)
 8004002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2001      	movs	r0, #1
 800400a:	fa00 f202 	lsl.w	r2, r0, r2
 800400e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000e100 	.word	0xe000e100

08004024 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	2b00      	cmp	r3, #0
 8004034:	db12      	blt.n	800405c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	f003 021f 	and.w	r2, r3, #31
 800403c:	490a      	ldr	r1, [pc, #40]	; (8004068 <__NVIC_DisableIRQ+0x44>)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	2001      	movs	r0, #1
 8004046:	fa00 f202 	lsl.w	r2, r0, r2
 800404a:	3320      	adds	r3, #32
 800404c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004050:	f3bf 8f4f 	dsb	sy
}
 8004054:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004056:	f3bf 8f6f 	isb	sy
}
 800405a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000e100 	.word	0xe000e100

0800406c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	2b00      	cmp	r3, #0
 800407c:	db0c      	blt.n	8004098 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	f003 021f 	and.w	r2, r3, #31
 8004084:	4907      	ldr	r1, [pc, #28]	; (80040a4 <__NVIC_SetPendingIRQ+0x38>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2001      	movs	r0, #1
 800408e:	fa00 f202 	lsl.w	r2, r0, r2
 8004092:	3340      	adds	r3, #64	; 0x40
 8004094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000e100 	.word	0xe000e100

080040a8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	db0c      	blt.n	80040d4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	f003 021f 	and.w	r2, r3, #31
 80040c0:	4907      	ldr	r1, [pc, #28]	; (80040e0 <__NVIC_ClearPendingIRQ+0x38>)
 80040c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	2001      	movs	r0, #1
 80040ca:	fa00 f202 	lsl.w	r2, r0, r2
 80040ce:	3360      	adds	r3, #96	; 0x60
 80040d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	e000e100 	.word	0xe000e100

080040e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	6039      	str	r1, [r7, #0]
 80040ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	db0a      	blt.n	800410e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	490c      	ldr	r1, [pc, #48]	; (8004130 <__NVIC_SetPriority+0x4c>)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	0112      	lsls	r2, r2, #4
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	440b      	add	r3, r1
 8004108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800410c:	e00a      	b.n	8004124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4908      	ldr	r1, [pc, #32]	; (8004134 <__NVIC_SetPriority+0x50>)
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	3b04      	subs	r3, #4
 800411c:	0112      	lsls	r2, r2, #4
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	440b      	add	r3, r1
 8004122:	761a      	strb	r2, [r3, #24]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000e100 	.word	0xe000e100
 8004134:	e000ed00 	.word	0xe000ed00

08004138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004138:	b480      	push	{r7}
 800413a:	b089      	sub	sp, #36	; 0x24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f1c3 0307 	rsb	r3, r3, #7
 8004152:	2b04      	cmp	r3, #4
 8004154:	bf28      	it	cs
 8004156:	2304      	movcs	r3, #4
 8004158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3304      	adds	r3, #4
 800415e:	2b06      	cmp	r3, #6
 8004160:	d902      	bls.n	8004168 <NVIC_EncodePriority+0x30>
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3b03      	subs	r3, #3
 8004166:	e000      	b.n	800416a <NVIC_EncodePriority+0x32>
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800416c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43da      	mvns	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	401a      	ands	r2, r3
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004180:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	43d9      	mvns	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004190:	4313      	orrs	r3, r2
         );
}
 8004192:	4618      	mov	r0, r3
 8004194:	3724      	adds	r7, #36	; 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041b0:	d301      	bcc.n	80041b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041b2:	2301      	movs	r3, #1
 80041b4:	e00f      	b.n	80041d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <SysTick_Config+0x40>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041be:	210f      	movs	r1, #15
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041c4:	f7ff ff8e 	bl	80040e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <SysTick_Config+0x40>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ce:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <SysTick_Config+0x40>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	e000e010 	.word	0xe000e010

080041e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff fec9 	bl	8003f84 <__NVIC_SetPriorityGrouping>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	4603      	mov	r3, r0
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004208:	f7ff fee0 	bl	8003fcc <__NVIC_GetPriorityGrouping>
 800420c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	6978      	ldr	r0, [r7, #20]
 8004214:	f7ff ff90 	bl	8004138 <NVIC_EncodePriority>
 8004218:	4602      	mov	r2, r0
 800421a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff ff5f 	bl	80040e4 <__NVIC_SetPriority>
}
 8004226:	bf00      	nop
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	4603      	mov	r3, r0
 8004236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fed3 	bl	8003fe8 <__NVIC_EnableIRQ>
}
 8004242:	bf00      	nop
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	4603      	mov	r3, r0
 8004252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fee3 	bl	8004024 <__NVIC_DisableIRQ>
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff ff96 	bl	80041a0 <SysTick_Config>
 8004274:	4603      	mov	r3, r0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff feed 	bl	800406c <__NVIC_SetPendingIRQ>
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	4603      	mov	r3, r0
 80042a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80042a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fefd 	bl	80040a8 <__NVIC_ClearPendingIRQ>
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e08e      	b.n	80043e8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <HAL_DMA_Init+0x138>)
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d80f      	bhi.n	80042f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	4b45      	ldr	r3, [pc, #276]	; (80043f4 <HAL_DMA_Init+0x13c>)
 80042de:	4413      	add	r3, r2
 80042e0:	4a45      	ldr	r2, [pc, #276]	; (80043f8 <HAL_DMA_Init+0x140>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	009a      	lsls	r2, r3, #2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a42      	ldr	r2, [pc, #264]	; (80043fc <HAL_DMA_Init+0x144>)
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40
 80042f4:	e00e      	b.n	8004314 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	4b40      	ldr	r3, [pc, #256]	; (8004400 <HAL_DMA_Init+0x148>)
 80042fe:	4413      	add	r3, r2
 8004300:	4a3d      	ldr	r2, [pc, #244]	; (80043f8 <HAL_DMA_Init+0x140>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	009a      	lsls	r2, r3, #2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a3c      	ldr	r2, [pc, #240]	; (8004404 <HAL_DMA_Init+0x14c>)
 8004312:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa74 	bl	8004854 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004374:	d102      	bne.n	800437c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004384:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004388:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004392:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d010      	beq.n	80043be <HAL_DMA_Init+0x106>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d80c      	bhi.n	80043be <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa93 	bl	80048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	e008      	b.n	80043d0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40020407 	.word	0x40020407
 80043f4:	bffdfff8 	.word	0xbffdfff8
 80043f8:	cccccccd 	.word	0xcccccccd
 80043fc:	40020000 	.word	0x40020000
 8004400:	bffdfbf8 	.word	0xbffdfbf8
 8004404:	40020400 	.word	0x40020400

08004408 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_DMA_Start_IT+0x20>
 8004424:	2302      	movs	r3, #2
 8004426:	e066      	b.n	80044f6 <HAL_DMA_Start_IT+0xee>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d155      	bne.n	80044e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f9b9 	bl	80047d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 020e 	orr.w	r2, r2, #14
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e00f      	b.n	80044a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0204 	bic.w	r2, r2, #4
 800448e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 020a 	orr.w	r2, r2, #10
 800449e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e005      	b.n	80044f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
 80044f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e04f      	b.n	80045b0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d008      	beq.n	800452e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2204      	movs	r2, #4
 8004520:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e040      	b.n	80045b0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 020e 	bic.w	r2, r2, #14
 800453c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800454c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	f003 021c 	and.w	r2, r3, #28
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	2101      	movs	r1, #1
 800456c:	fa01 f202 	lsl.w	r2, r1, r2
 8004570:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800457a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00c      	beq.n	800459e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004592:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800459c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d005      	beq.n	80045e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2204      	movs	r2, #4
 80045d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	e047      	b.n	8004670 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 020e 	bic.w	r2, r2, #14
 80045ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800460e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004614:	f003 021c 	and.w	r2, r3, #28
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	2101      	movs	r1, #1
 800461e:	fa01 f202 	lsl.w	r2, r1, r2
 8004622:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800462c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00c      	beq.n	8004650 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004644:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800464e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
    }
  }
  return status;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f003 031c 	and.w	r3, r3, #28
 800469a:	2204      	movs	r2, #4
 800469c:	409a      	lsls	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d026      	beq.n	80046f4 <HAL_DMA_IRQHandler+0x7a>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d021      	beq.n	80046f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d107      	bne.n	80046ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0204 	bic.w	r2, r2, #4
 80046cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f003 021c 	and.w	r2, r3, #28
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2104      	movs	r1, #4
 80046dc:	fa01 f202 	lsl.w	r2, r1, r2
 80046e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d071      	beq.n	80047ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80046f2:	e06c      	b.n	80047ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f8:	f003 031c 	and.w	r3, r3, #28
 80046fc:	2202      	movs	r2, #2
 80046fe:	409a      	lsls	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4013      	ands	r3, r2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d02e      	beq.n	8004766 <HAL_DMA_IRQHandler+0xec>
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d029      	beq.n	8004766 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 020a 	bic.w	r2, r2, #10
 800472e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473c:	f003 021c 	and.w	r2, r3, #28
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	2102      	movs	r1, #2
 8004746:	fa01 f202 	lsl.w	r2, r1, r2
 800474a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d038      	beq.n	80047ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004764:	e033      	b.n	80047ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f003 031c 	and.w	r3, r3, #28
 800476e:	2208      	movs	r2, #8
 8004770:	409a      	lsls	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4013      	ands	r3, r2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d02a      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x156>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	d025      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 020e 	bic.w	r2, r2, #14
 8004792:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	f003 021c 	and.w	r2, r3, #28
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	2101      	movs	r1, #1
 80047a2:	fa01 f202 	lsl.w	r2, r1, r2
 80047a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047ce:	bf00      	nop
 80047d0:	bf00      	nop
}
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004800:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	f003 021c 	and.w	r2, r3, #28
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2101      	movs	r1, #1
 8004810:	fa01 f202 	lsl.w	r2, r1, r2
 8004814:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b10      	cmp	r3, #16
 8004824:	d108      	bne.n	8004838 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004836:	e007      	b.n	8004848 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	60da      	str	r2, [r3, #12]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004864:	429a      	cmp	r2, r3
 8004866:	d80a      	bhi.n	800487e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004874:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6493      	str	r3, [r2, #72]	; 0x48
 800487c:	e007      	b.n	800488e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	089b      	lsrs	r3, r3, #2
 8004884:	009a      	lsls	r2, r3, #2
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004888:	4413      	add	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	3b08      	subs	r3, #8
 8004896:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80048a4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	2201      	movs	r2, #1
 80048ae:	409a      	lsls	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40020407 	.word	0x40020407
 80048c4:	4002081c 	.word	0x4002081c
 80048c8:	cccccccd 	.word	0xcccccccd
 80048cc:	40020880 	.word	0x40020880

080048d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	461a      	mov	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80048f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3b01      	subs	r3, #1
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2201      	movs	r2, #1
 8004900:	409a      	lsls	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	1000823f 	.word	0x1000823f
 8004918:	40020940 	.word	0x40020940

0800491c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b01      	cmp	r3, #1
 8004930:	d12b      	bne.n	800498a <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_DMAEx_ConfigMuxSync+0x24>
 800493c:	2302      	movs	r3, #2
 800493e:	e025      	b.n	800498c <HAL_DMAEx_ConfigMuxSync+0x70>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b12      	ldr	r3, [pc, #72]	; (8004998 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004950:	4013      	ands	r3, r2
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	6811      	ldr	r1, [r2, #0]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68d2      	ldr	r2, [r2, #12]
 800495a:	3a01      	subs	r2, #1
 800495c:	04d2      	lsls	r2, r2, #19
 800495e:	4311      	orrs	r1, r2
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	6852      	ldr	r2, [r2, #4]
 8004964:	4311      	orrs	r1, r2
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	7a12      	ldrb	r2, [r2, #8]
 800496a:	0412      	lsls	r2, r2, #16
 800496c:	4311      	orrs	r1, r2
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	7a52      	ldrb	r2, [r2, #9]
 8004972:	0252      	lsls	r2, r2, #9
 8004974:	4311      	orrs	r1, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800497a:	430b      	orrs	r3, r1
 800497c:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e000      	b.n	800498c <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
  }
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000fdff 	.word	0xe000fdff

0800499c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049aa:	e14c      	b.n	8004c46 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2101      	movs	r1, #1
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	fa01 f303 	lsl.w	r3, r1, r3
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 813e 	beq.w	8004c40 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d00b      	beq.n	80049e4 <HAL_GPIO_Init+0x48>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d007      	beq.n	80049e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049d8:	2b11      	cmp	r3, #17
 80049da:	d003      	beq.n	80049e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b12      	cmp	r3, #18
 80049e2:	d130      	bne.n	8004a46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	2203      	movs	r2, #3
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4013      	ands	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	43db      	mvns	r3, r3
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4013      	ands	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	f003 0201 	and.w	r2, r3, #1
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	2203      	movs	r2, #3
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d003      	beq.n	8004a86 <HAL_GPIO_Init+0xea>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b12      	cmp	r3, #18
 8004a84:	d123      	bne.n	8004ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	08da      	lsrs	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3208      	adds	r2, #8
 8004a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	220f      	movs	r2, #15
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	08da      	lsrs	r2, r3, #3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3208      	adds	r2, #8
 8004ac8:	6939      	ldr	r1, [r7, #16]
 8004aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	2203      	movs	r2, #3
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 0203 	and.w	r2, r3, #3
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8098 	beq.w	8004c40 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b10:	4a54      	ldr	r2, [pc, #336]	; (8004c64 <HAL_GPIO_Init+0x2c8>)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	089b      	lsrs	r3, r3, #2
 8004b16:	3302      	adds	r3, #2
 8004b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	220f      	movs	r2, #15
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4013      	ands	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b3a:	d019      	beq.n	8004b70 <HAL_GPIO_Init+0x1d4>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a4a      	ldr	r2, [pc, #296]	; (8004c68 <HAL_GPIO_Init+0x2cc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d013      	beq.n	8004b6c <HAL_GPIO_Init+0x1d0>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a49      	ldr	r2, [pc, #292]	; (8004c6c <HAL_GPIO_Init+0x2d0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00d      	beq.n	8004b68 <HAL_GPIO_Init+0x1cc>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a48      	ldr	r2, [pc, #288]	; (8004c70 <HAL_GPIO_Init+0x2d4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d007      	beq.n	8004b64 <HAL_GPIO_Init+0x1c8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a47      	ldr	r2, [pc, #284]	; (8004c74 <HAL_GPIO_Init+0x2d8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <HAL_GPIO_Init+0x1c4>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	e008      	b.n	8004b72 <HAL_GPIO_Init+0x1d6>
 8004b60:	2307      	movs	r3, #7
 8004b62:	e006      	b.n	8004b72 <HAL_GPIO_Init+0x1d6>
 8004b64:	2303      	movs	r3, #3
 8004b66:	e004      	b.n	8004b72 <HAL_GPIO_Init+0x1d6>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e002      	b.n	8004b72 <HAL_GPIO_Init+0x1d6>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <HAL_GPIO_Init+0x1d6>
 8004b70:	2300      	movs	r3, #0
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	f002 0203 	and.w	r2, r2, #3
 8004b78:	0092      	lsls	r2, r2, #2
 8004b7a:	4093      	lsls	r3, r2
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b82:	4938      	ldr	r1, [pc, #224]	; (8004c64 <HAL_GPIO_Init+0x2c8>)
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	089b      	lsrs	r3, r3, #2
 8004b88:	3302      	adds	r3, #2
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b90:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <HAL_GPIO_Init+0x2dc>)
 8004b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bb6:	4a30      	ldr	r2, [pc, #192]	; (8004c78 <HAL_GPIO_Init+0x2dc>)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004bbe:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <HAL_GPIO_Init+0x2dc>)
 8004bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004be4:	4a24      	ldr	r2, [pc, #144]	; (8004c78 <HAL_GPIO_Init+0x2dc>)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bec:	4b22      	ldr	r3, [pc, #136]	; (8004c78 <HAL_GPIO_Init+0x2dc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c10:	4a19      	ldr	r2, [pc, #100]	; (8004c78 <HAL_GPIO_Init+0x2dc>)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c16:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <HAL_GPIO_Init+0x2dc>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4013      	ands	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c3a:	4a0f      	ldr	r2, [pc, #60]	; (8004c78 <HAL_GPIO_Init+0x2dc>)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	3301      	adds	r3, #1
 8004c44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f47f aeab 	bne.w	80049ac <HAL_GPIO_Init+0x10>
  }
}
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	40010000 	.word	0x40010000
 8004c68:	48000400 	.word	0x48000400
 8004c6c:	48000800 	.word	0x48000800
 8004c70:	48000c00 	.word	0x48000c00
 8004c74:	48001000 	.word	0x48001000
 8004c78:	58000800 	.word	0x58000800

08004c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	807b      	strh	r3, [r7, #2]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c8c:	787b      	ldrb	r3, [r7, #1]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c92:	887a      	ldrh	r2, [r7, #2]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c98:	e002      	b.n	8004ca0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c9a:	887a      	ldrh	r2, [r7, #2]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d006      	beq.n	8004cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cc2:	4a05      	ldr	r2, [pc, #20]	; (8004cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fb fe55 	bl	800097a <HAL_GPIO_EXTI_Callback>
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	58000800 	.word	0x58000800

08004cdc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_HSEM_IRQHandler+0x30>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004ce8:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <HAL_HSEM_IRQHandler+0x30>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	4906      	ldr	r1, [pc, #24]	; (8004d0c <HAL_HSEM_IRQHandler+0x30>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004cf6:	4a05      	ldr	r2, [pc, #20]	; (8004d0c <HAL_HSEM_IRQHandler+0x30>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f807 	bl	8004d10 <HAL_HSEM_FreeCallback>
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	58001500 	.word	0x58001500

08004d10 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d01e      	beq.n	8004d74 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004d36:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <HAL_IPCC_Init+0x60>)
 8004d38:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fd f992 	bl	8002070 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004d4c:	68b8      	ldr	r0, [r7, #8]
 8004d4e:	f000 f85b 	bl	8004e08 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f82c 	bl	8004dbc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004d72:	e001      	b.n	8004d78 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	58000c00 	.word	0x58000c00

08004d88 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	4613      	mov	r3, r2
 8004dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e00f      	b.n	8004dea <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	4a0b      	ldr	r2, [pc, #44]	; (8004e00 <IPCC_SetDefaultCallbacks+0x44>)
 8004dd4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3306      	adds	r3, #6
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	4a08      	ldr	r2, [pc, #32]	; (8004e04 <IPCC_SetDefaultCallbacks+0x48>)
 8004de2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3301      	adds	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	d9ec      	bls.n	8004dca <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	08004d89 	.word	0x08004d89
 8004e04:	08004da3 	.word	0x08004da3

08004e08 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004e1c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	223f      	movs	r2, #63	; 0x3f
 8004e22:	609a      	str	r2, [r3, #8]
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3e:	6013      	str	r3, [r2, #0]
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	58000400 	.word	0x58000400

08004e50 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e54:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	58000400 	.word	0x58000400

08004e6c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7e:	d101      	bne.n	8004e84 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <LL_RCC_HSE_Enable>:
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea2:	6013      	str	r3, [r2, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <LL_RCC_HSE_Disable>:
{
 8004eae:	b480      	push	{r7}
 8004eb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec0:	6013      	str	r3, [r2, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <LL_RCC_HSE_IsReady>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ede:	d101      	bne.n	8004ee4 <LL_RCC_HSE_IsReady+0x18>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <LL_RCC_HSE_IsReady+0x1a>
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <LL_RCC_HSI_Enable>:
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f02:	6013      	str	r3, [r2, #0]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <LL_RCC_HSI_Disable>:
{
 8004f0e:	b480      	push	{r7}
 8004f10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f20:	6013      	str	r3, [r2, #0]
}
 8004f22:	bf00      	nop
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_HSI_IsReady>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3e:	d101      	bne.n	8004f44 <LL_RCC_HSI_IsReady+0x18>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <LL_RCC_HSI_IsReady+0x1a>
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	061b      	lsls	r3, r3, #24
 8004f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	604b      	str	r3, [r1, #4]
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <LL_RCC_HSI48_Enable>:
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004f92:	bf00      	nop
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <LL_RCC_HSI48_Disable>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fac:	f023 0301 	bic.w	r3, r3, #1
 8004fb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <LL_RCC_HSI48_IsReady>:
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d101      	bne.n	8004fd6 <LL_RCC_HSI48_IsReady+0x18>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <LL_RCC_HSI48_IsReady+0x1a>
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <LL_RCC_LSE_Enable>:
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ffa:	bf00      	nop
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <LL_RCC_LSE_Disable>:
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <LL_RCC_LSE_EnableBypass>:
{
 8005026:	b480      	push	{r7}
 8005028:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800502a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005036:	f043 0304 	orr.w	r3, r3, #4
 800503a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800503e:	bf00      	nop
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <LL_RCC_LSE_DisableBypass>:
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800504c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005058:	f023 0304 	bic.w	r3, r3, #4
 800505c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005060:	bf00      	nop
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <LL_RCC_LSE_IsReady>:
{
 800506a:	b480      	push	{r7}
 800506c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800506e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b02      	cmp	r3, #2
 800507c:	d101      	bne.n	8005082 <LL_RCC_LSE_IsReady+0x18>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <LL_RCC_LSE_IsReady+0x1a>
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <LL_RCC_LSI1_Enable>:
{
 800508e:	b480      	push	{r7}
 8005090:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800509a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80050a6:	bf00      	nop
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <LL_RCC_LSI1_Disable>:
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80050b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050c0:	f023 0301 	bic.w	r3, r3, #1
 80050c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80050c8:	bf00      	nop
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_LSI1_IsReady>:
{
 80050d2:	b480      	push	{r7}
 80050d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80050d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d101      	bne.n	80050ea <LL_RCC_LSI1_IsReady+0x18>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <LL_RCC_LSI1_IsReady+0x1a>
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <LL_RCC_LSI2_Enable>:
{
 80050f6:	b480      	push	{r7}
 80050f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80050fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005106:	f043 0304 	orr.w	r3, r3, #4
 800510a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800510e:	bf00      	nop
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <LL_RCC_LSI2_Disable>:
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800511c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005124:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005128:	f023 0304 	bic.w	r3, r3, #4
 800512c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005130:	bf00      	nop
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <LL_RCC_LSI2_IsReady>:
{
 800513a:	b480      	push	{r7}
 800513c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800513e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b08      	cmp	r3, #8
 800514c:	d101      	bne.n	8005152 <LL_RCC_LSI2_IsReady+0x18>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <LL_RCC_LSI2_IsReady+0x1a>
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <LL_RCC_LSI2_SetTrimming>:
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800516e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <LL_RCC_MSI_Enable>:
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	6013      	str	r3, [r2, #0]
}
 80051a0:	bf00      	nop
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <LL_RCC_MSI_Disable>:
{
 80051aa:	b480      	push	{r7}
 80051ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80051ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	6013      	str	r3, [r2, #0]
}
 80051be:	bf00      	nop
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <LL_RCC_MSI_IsReady>:
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80051cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d101      	bne.n	80051de <LL_RCC_MSI_IsReady+0x16>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <LL_RCC_MSI_IsReady+0x18>
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <LL_RCC_MSI_SetRange>:
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80051f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4313      	orrs	r3, r2
 8005204:	600b      	str	r3, [r1, #0]
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <LL_RCC_MSI_GetRange>:
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005222:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2bb0      	cmp	r3, #176	; 0xb0
 8005228:	d901      	bls.n	800522e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800522a:	23b0      	movs	r3, #176	; 0xb0
 800522c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800522e:	687b      	ldr	r3, [r7, #4]
}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <LL_RCC_MSI_SetCalibTrimming>:
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005256:	4313      	orrs	r3, r2
 8005258:	604b      	str	r3, [r1, #4]
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <LL_RCC_SetSysClkSource>:
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f023 0203 	bic.w	r2, r3, #3
 8005278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4313      	orrs	r3, r2
 8005280:	608b      	str	r3, [r1, #8]
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <LL_RCC_GetSysClkSource>:
{
 800528e:	b480      	push	{r7}
 8005290:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 030c 	and.w	r3, r3, #12
}
 800529c:	4618      	mov	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_RCC_SetAHBPrescaler>:
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80052ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4313      	orrs	r3, r2
 80052c0:	608b      	str	r3, [r1, #8]
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <LL_C2_RCC_SetAHBPrescaler>:
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <LL_RCC_SetAHB4Prescaler>:
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005306:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800530a:	f023 020f 	bic.w	r2, r3, #15
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LL_RCC_SetAPB1Prescaler>:
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800533a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4313      	orrs	r3, r2
 8005342:	608b      	str	r3, [r1, #8]
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <LL_RCC_SetAPB2Prescaler>:
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4313      	orrs	r3, r2
 800536a:	608b      	str	r3, [r1, #8]
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <LL_RCC_GetAHBPrescaler>:
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800537c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005386:	4618      	mov	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <LL_RCC_GetAHB4Prescaler>:
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005398:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <LL_RCC_GetAPB1Prescaler>:
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80053b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <LL_RCC_GetAPB2Prescaler>:
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80053c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <LL_RCC_PLL_Enable>:
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80053e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ee:	6013      	str	r3, [r2, #0]
}
 80053f0:	bf00      	nop
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <LL_RCC_PLL_Disable>:
{
 80053fa:	b480      	push	{r7}
 80053fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80053fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540c:	6013      	str	r3, [r2, #0]
}
 800540e:	bf00      	nop
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <LL_RCC_PLL_IsReady>:
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800542a:	d101      	bne.n	8005430 <LL_RCC_PLL_IsReady+0x18>
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <LL_RCC_PLL_IsReady+0x1a>
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <LL_RCC_PLL_GetN>:
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <LL_RCC_PLL_GetR>:
{
 8005456:	b480      	push	{r7}
 8005458:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800545a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005464:	4618      	mov	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <LL_RCC_PLL_GetDivider>:
{
 800546e:	b480      	push	{r7}
 8005470:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800547c:	4618      	mov	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <LL_RCC_PLL_GetMainSource>:
{
 8005486:	b480      	push	{r7}
 8005488:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0303 	and.w	r3, r3, #3
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <LL_RCC_IsActiveFlag_HPRE>:
{
 800549e:	b480      	push	{r7}
 80054a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80054a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b0:	d101      	bne.n	80054b6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80054c2:	b480      	push	{r7}
 80054c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80054c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054d6:	d101      	bne.n	80054dc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80054ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d101      	bne.n	8005502 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800550e:	b480      	push	{r7}
 8005510:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005520:	d101      	bne.n	8005526 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005532:	b480      	push	{r7}
 8005534:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005540:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005544:	d101      	bne.n	800554a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b08d      	sub	sp, #52	; 0x34
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e37e      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8092 	beq.w	800569c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005578:	f7ff fe89 	bl	800528e <LL_RCC_GetSysClkSource>
 800557c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800557e:	f7ff ff82 	bl	8005486 <LL_RCC_PLL_GetMainSource>
 8005582:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d005      	beq.n	8005596 <HAL_RCC_OscConfig+0x3e>
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	2b0c      	cmp	r3, #12
 800558e:	d14c      	bne.n	800562a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	2b01      	cmp	r3, #1
 8005594:	d149      	bne.n	800562a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005596:	f7ff fe17 	bl	80051c8 <LL_RCC_MSI_IsReady>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_RCC_OscConfig+0x54>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e35d      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80055b0:	f7ff fe2f 	bl	8005212 <LL_RCC_MSI_GetRange>
 80055b4:	4603      	mov	r3, r0
 80055b6:	429c      	cmp	r4, r3
 80055b8:	d914      	bls.n	80055e4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fd42 	bl	8006048 <RCC_SetFlashLatencyFromMSIRange>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e34c      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fe09 	bl	80051ea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fe2d 	bl	800523c <LL_RCC_MSI_SetCalibTrimming>
 80055e2:	e013      	b.n	800560c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff fdfe 	bl	80051ea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fe22 	bl	800523c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fd23 	bl	8006048 <RCC_SetFlashLatencyFromMSIRange>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e32d      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800560c:	f000 fcdc 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8005610:	4603      	mov	r3, r0
 8005612:	4ab3      	ldr	r2, [pc, #716]	; (80058e0 <HAL_RCC_OscConfig+0x388>)
 8005614:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005616:	4bb3      	ldr	r3, [pc, #716]	; (80058e4 <HAL_RCC_OscConfig+0x38c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fc34 	bl	8003e88 <HAL_InitTick>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d039      	beq.n	800569a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e31e      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01e      	beq.n	8005670 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005632:	f7ff fdab 	bl	800518c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005636:	f7fe fc75 	bl	8003f24 <HAL_GetTick>
 800563a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800563e:	f7fe fc71 	bl	8003f24 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e30b      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005650:	f7ff fdba 	bl	80051c8 <LL_RCC_MSI_IsReady>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f1      	beq.n	800563e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff fdc3 	bl	80051ea <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fde7 	bl	800523c <LL_RCC_MSI_SetCalibTrimming>
 800566e:	e015      	b.n	800569c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005670:	f7ff fd9b 	bl	80051aa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005674:	f7fe fc56 	bl	8003f24 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800567c:	f7fe fc52 	bl	8003f24 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e2ec      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800568e:	f7ff fd9b 	bl	80051c8 <LL_RCC_MSI_IsReady>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1f1      	bne.n	800567c <HAL_RCC_OscConfig+0x124>
 8005698:	e000      	b.n	800569c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800569a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d04e      	beq.n	8005746 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056a8:	f7ff fdf1 	bl	800528e <LL_RCC_GetSysClkSource>
 80056ac:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ae:	f7ff feea 	bl	8005486 <LL_RCC_PLL_GetMainSource>
 80056b2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d005      	beq.n	80056c6 <HAL_RCC_OscConfig+0x16e>
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	2b0c      	cmp	r3, #12
 80056be:	d10d      	bne.n	80056dc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d10a      	bne.n	80056dc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c6:	f7ff fc01 	bl	8004ecc <LL_RCC_HSE_IsReady>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d039      	beq.n	8005744 <HAL_RCC_OscConfig+0x1ec>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d135      	bne.n	8005744 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e2c5      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e4:	d102      	bne.n	80056ec <HAL_RCC_OscConfig+0x194>
 80056e6:	f7ff fbd3 	bl	8004e90 <LL_RCC_HSE_Enable>
 80056ea:	e001      	b.n	80056f0 <HAL_RCC_OscConfig+0x198>
 80056ec:	f7ff fbdf 	bl	8004eae <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d012      	beq.n	800571e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fe fc14 	bl	8003f24 <HAL_GetTick>
 80056fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005700:	f7fe fc10 	bl	8003f24 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e2aa      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005712:	f7ff fbdb 	bl	8004ecc <LL_RCC_HSE_IsReady>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f1      	beq.n	8005700 <HAL_RCC_OscConfig+0x1a8>
 800571c:	e013      	b.n	8005746 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571e:	f7fe fc01 	bl	8003f24 <HAL_GetTick>
 8005722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005726:	f7fe fbfd 	bl	8003f24 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b64      	cmp	r3, #100	; 0x64
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e297      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005738:	f7ff fbc8 	bl	8004ecc <LL_RCC_HSE_IsReady>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f1      	bne.n	8005726 <HAL_RCC_OscConfig+0x1ce>
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d051      	beq.n	80057f6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005752:	f7ff fd9c 	bl	800528e <LL_RCC_GetSysClkSource>
 8005756:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005758:	f7ff fe95 	bl	8005486 <LL_RCC_PLL_GetMainSource>
 800575c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b04      	cmp	r3, #4
 8005762:	d005      	beq.n	8005770 <HAL_RCC_OscConfig+0x218>
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2b0c      	cmp	r3, #12
 8005768:	d113      	bne.n	8005792 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d110      	bne.n	8005792 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005770:	f7ff fbdc 	bl	8004f2c <LL_RCC_HSI_IsReady>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <HAL_RCC_OscConfig+0x22e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e270      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff fbe0 	bl	8004f50 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005790:	e031      	b.n	80057f6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d019      	beq.n	80057ce <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800579a:	f7ff fba9 	bl	8004ef0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fe fbc1 	bl	8003f24 <HAL_GetTick>
 80057a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a6:	f7fe fbbd 	bl	8003f24 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e257      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80057b8:	f7ff fbb8 	bl	8004f2c <LL_RCC_HSI_IsReady>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0f1      	beq.n	80057a6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fbc2 	bl	8004f50 <LL_RCC_HSI_SetCalibTrimming>
 80057cc:	e013      	b.n	80057f6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ce:	f7ff fb9e 	bl	8004f0e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d2:	f7fe fba7 	bl	8003f24 <HAL_GetTick>
 80057d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057da:	f7fe fba3 	bl	8003f24 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e23d      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80057ec:	f7ff fb9e 	bl	8004f2c <LL_RCC_HSI_IsReady>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f1      	bne.n	80057da <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80a3 	beq.w	8005956 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d076      	beq.n	8005906 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d046      	beq.n	80058b2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005824:	f7ff fc55 	bl	80050d2 <LL_RCC_LSI1_IsReady>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d113      	bne.n	8005856 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800582e:	f7ff fc2e 	bl	800508e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005832:	f7fe fb77 	bl	8003f24 <HAL_GetTick>
 8005836:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800583a:	f7fe fb73 	bl	8003f24 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e20d      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800584c:	f7ff fc41 	bl	80050d2 <LL_RCC_LSI1_IsReady>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f1      	beq.n	800583a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005856:	f7ff fc4e 	bl	80050f6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585a:	f7fe fb63 	bl	8003f24 <HAL_GetTick>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005862:	f7fe fb5f 	bl	8003f24 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b03      	cmp	r3, #3
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e1f9      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005874:	f7ff fc61 	bl	800513a <LL_RCC_LSI2_IsReady>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f1      	beq.n	8005862 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fc6b 	bl	800515e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005888:	f7ff fc12 	bl	80050b0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588c:	f7fe fb4a 	bl	8003f24 <HAL_GetTick>
 8005890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005894:	f7fe fb46 	bl	8003f24 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e1e0      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80058a6:	f7ff fc14 	bl	80050d2 <LL_RCC_LSI1_IsReady>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f1      	bne.n	8005894 <HAL_RCC_OscConfig+0x33c>
 80058b0:	e051      	b.n	8005956 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80058b2:	f7ff fbec 	bl	800508e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fe fb35 	bl	8003f24 <HAL_GetTick>
 80058ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80058be:	f7fe fb31 	bl	8003f24 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e1cb      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80058d0:	f7ff fbff 	bl	80050d2 <LL_RCC_LSI1_IsReady>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f1      	beq.n	80058be <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80058da:	f7ff fc1d 	bl	8005118 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80058de:	e00c      	b.n	80058fa <HAL_RCC_OscConfig+0x3a2>
 80058e0:	2000001c 	.word	0x2000001c
 80058e4:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80058e8:	f7fe fb1c 	bl	8003f24 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e1b6      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80058fa:	f7ff fc1e 	bl	800513a <LL_RCC_LSI2_IsReady>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f1      	bne.n	80058e8 <HAL_RCC_OscConfig+0x390>
 8005904:	e027      	b.n	8005956 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005906:	f7ff fc07 	bl	8005118 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590a:	f7fe fb0b 	bl	8003f24 <HAL_GetTick>
 800590e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005912:	f7fe fb07 	bl	8003f24 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b03      	cmp	r3, #3
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e1a1      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005924:	f7ff fc09 	bl	800513a <LL_RCC_LSI2_IsReady>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f1      	bne.n	8005912 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800592e:	f7ff fbbf 	bl	80050b0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005932:	f7fe faf7 	bl	8003f24 <HAL_GetTick>
 8005936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800593a:	f7fe faf3 	bl	8003f24 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e18d      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800594c:	f7ff fbc1 	bl	80050d2 <LL_RCC_LSI1_IsReady>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f1      	bne.n	800593a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d05b      	beq.n	8005a1a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005962:	4bb5      	ldr	r3, [pc, #724]	; (8005c38 <HAL_RCC_OscConfig+0x6e0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d114      	bne.n	8005998 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800596e:	f7ff fa5f 	bl	8004e30 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005972:	f7fe fad7 	bl	8003f24 <HAL_GetTick>
 8005976:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597a:	f7fe fad3 	bl	8003f24 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e16d      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800598c:	4baa      	ldr	r3, [pc, #680]	; (8005c38 <HAL_RCC_OscConfig+0x6e0>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d102      	bne.n	80059a6 <HAL_RCC_OscConfig+0x44e>
 80059a0:	f7ff fb1f 	bl	8004fe2 <LL_RCC_LSE_Enable>
 80059a4:	e00c      	b.n	80059c0 <HAL_RCC_OscConfig+0x468>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	d104      	bne.n	80059b8 <HAL_RCC_OscConfig+0x460>
 80059ae:	f7ff fb3a 	bl	8005026 <LL_RCC_LSE_EnableBypass>
 80059b2:	f7ff fb16 	bl	8004fe2 <LL_RCC_LSE_Enable>
 80059b6:	e003      	b.n	80059c0 <HAL_RCC_OscConfig+0x468>
 80059b8:	f7ff fb24 	bl	8005004 <LL_RCC_LSE_Disable>
 80059bc:	f7ff fb44 	bl	8005048 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d014      	beq.n	80059f2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c8:	f7fe faac 	bl	8003f24 <HAL_GetTick>
 80059cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80059ce:	e00a      	b.n	80059e6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d0:	f7fe faa8 	bl	8003f24 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	f241 3288 	movw	r2, #5000	; 0x1388
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e140      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80059e6:	f7ff fb40 	bl	800506a <LL_RCC_LSE_IsReady>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0ef      	beq.n	80059d0 <HAL_RCC_OscConfig+0x478>
 80059f0:	e013      	b.n	8005a1a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f2:	f7fe fa97 	bl	8003f24 <HAL_GetTick>
 80059f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80059f8:	e00a      	b.n	8005a10 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fa:	f7fe fa93 	bl	8003f24 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e12b      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005a10:	f7ff fb2b 	bl	800506a <LL_RCC_LSE_IsReady>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1ef      	bne.n	80059fa <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d02c      	beq.n	8005a80 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d014      	beq.n	8005a58 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a2e:	f7ff faa4 	bl	8004f7a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a32:	f7fe fa77 	bl	8003f24 <HAL_GetTick>
 8005a36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a3a:	f7fe fa73 	bl	8003f24 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e10d      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005a4c:	f7ff fab7 	bl	8004fbe <LL_RCC_HSI48_IsReady>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f1      	beq.n	8005a3a <HAL_RCC_OscConfig+0x4e2>
 8005a56:	e013      	b.n	8005a80 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a58:	f7ff faa0 	bl	8004f9c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5c:	f7fe fa62 	bl	8003f24 <HAL_GetTick>
 8005a60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a64:	f7fe fa5e 	bl	8003f24 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e0f8      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005a76:	f7ff faa2 	bl	8004fbe <LL_RCC_HSI48_IsReady>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f1      	bne.n	8005a64 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 80ee 	beq.w	8005c66 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a8a:	f7ff fc00 	bl	800528e <LL_RCC_GetSysClkSource>
 8005a8e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	f040 80af 	bne.w	8005c00 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 0203 	and.w	r2, r3, #3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d123      	bne.n	8005af8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d11c      	bne.n	8005af8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d114      	bne.n	8005af8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d10d      	bne.n	8005af8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d106      	bne.n	8005af8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d05d      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2b0c      	cmp	r3, #12
 8005afc:	d058      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0ab      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b10:	f7ff fc73 	bl	80053fa <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b14:	f7fe fa06 	bl	8003f24 <HAL_GetTick>
 8005b18:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fe fa02 	bl	8003f24 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e09c      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1ef      	bne.n	8005b1c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	4b3e      	ldr	r3, [pc, #248]	; (8005c3c <HAL_RCC_OscConfig+0x6e4>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b4e:	4311      	orrs	r1, r2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b54:	0212      	lsls	r2, r2, #8
 8005b56:	4311      	orrs	r1, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b5c:	4311      	orrs	r1, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b62:	4311      	orrs	r1, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b72:	f7ff fc33 	bl	80053dc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b84:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b86:	f7fe f9cd 	bl	8003f24 <HAL_GetTick>
 8005b8a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8e:	f7fe f9c9 	bl	8003f24 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e063      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0ef      	beq.n	8005b8e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bae:	e05a      	b.n	8005c66 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e059      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d151      	bne.n	8005c66 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005bc2:	f7ff fc0b 	bl	80053dc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bd6:	f7fe f9a5 	bl	8003f24 <HAL_GetTick>
 8005bda:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bdc:	e008      	b.n	8005bf0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bde:	f7fe f9a1 	bl	8003f24 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d901      	bls.n	8005bf0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e03b      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0ef      	beq.n	8005bde <HAL_RCC_OscConfig+0x686>
 8005bfe:	e032      	b.n	8005c66 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d02d      	beq.n	8005c62 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c06:	f7ff fbf8 	bl	80053fa <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c14:	f023 0303 	bic.w	r3, r3, #3
 8005c18:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c24:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c2c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2e:	f7fe f979 	bl	8003f24 <HAL_GetTick>
 8005c32:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c34:	e00d      	b.n	8005c52 <HAL_RCC_OscConfig+0x6fa>
 8005c36:	bf00      	nop
 8005c38:	58000400 	.word	0x58000400
 8005c3c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c40:	f7fe f970 	bl	8003f24 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e00a      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1ef      	bne.n	8005c40 <HAL_RCC_OscConfig+0x6e8>
 8005c60:	e001      	b.n	8005c66 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3734      	adds	r7, #52	; 0x34
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd90      	pop	{r4, r7, pc}

08005c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e12d      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c84:	4b98      	ldr	r3, [pc, #608]	; (8005ee8 <HAL_RCC_ClockConfig+0x278>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d91b      	bls.n	8005cca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c92:	4b95      	ldr	r3, [pc, #596]	; (8005ee8 <HAL_RCC_ClockConfig+0x278>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f023 0207 	bic.w	r2, r3, #7
 8005c9a:	4993      	ldr	r1, [pc, #588]	; (8005ee8 <HAL_RCC_ClockConfig+0x278>)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca2:	f7fe f93f 	bl	8003f24 <HAL_GetTick>
 8005ca6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005caa:	f7fe f93b 	bl	8003f24 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e111      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cbc:	4b8a      	ldr	r3, [pc, #552]	; (8005ee8 <HAL_RCC_ClockConfig+0x278>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d1ef      	bne.n	8005caa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fae3 	bl	80052a6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ce0:	f7fe f920 	bl	8003f24 <HAL_GetTick>
 8005ce4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ce8:	f7fe f91c 	bl	8003f24 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e0f2      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005cfa:	f7ff fbd0 	bl	800549e <LL_RCC_IsActiveFlag_HPRE>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f1      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d016      	beq.n	8005d3e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fada 	bl	80052ce <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d1a:	f7fe f903 	bl	8003f24 <HAL_GetTick>
 8005d1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005d20:	e008      	b.n	8005d34 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d22:	f7fe f8ff 	bl	8003f24 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d901      	bls.n	8005d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e0d5      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005d34:	f7ff fbc5 	bl	80054c2 <LL_RCC_IsActiveFlag_C2HPRE>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f1      	beq.n	8005d22 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d016      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fad3 	bl	80052fa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d54:	f7fe f8e6 	bl	8003f24 <HAL_GetTick>
 8005d58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d5c:	f7fe f8e2 	bl	8003f24 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e0b8      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d6e:	f7ff fbbb 	bl	80054e8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f1      	beq.n	8005d5c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d016      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff facd 	bl	8005328 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d8e:	f7fe f8c9 	bl	8003f24 <HAL_GetTick>
 8005d92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d96:	f7fe f8c5 	bl	8003f24 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e09b      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005da8:	f7ff fbb1 	bl	800550e <LL_RCC_IsActiveFlag_PPRE1>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f1      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d017      	beq.n	8005dee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff fac3 	bl	8005350 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005dca:	f7fe f8ab 	bl	8003f24 <HAL_GetTick>
 8005dce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005dd2:	f7fe f8a7 	bl	8003f24 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e07d      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005de4:	f7ff fba5 	bl	8005532 <LL_RCC_IsActiveFlag_PPRE2>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0f1      	beq.n	8005dd2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d043      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d106      	bne.n	8005e10 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005e02:	f7ff f863 	bl	8004ecc <LL_RCC_HSE_IsReady>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d11e      	bne.n	8005e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e067      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d106      	bne.n	8005e26 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005e18:	f7ff fafe 	bl	8005418 <LL_RCC_PLL_IsReady>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d113      	bne.n	8005e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e05c      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005e2e:	f7ff f9cb 	bl	80051c8 <LL_RCC_MSI_IsReady>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d108      	bne.n	8005e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e051      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005e3c:	f7ff f876 	bl	8004f2c <LL_RCC_HSI_IsReady>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e04a      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff fa09 	bl	8005266 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e54:	f7fe f866 	bl	8003f24 <HAL_GetTick>
 8005e58:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5a:	e00a      	b.n	8005e72 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e5c:	f7fe f862 	bl	8003f24 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e036      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e72:	f7ff fa0c 	bl	800528e <LL_RCC_GetSysClkSource>
 8005e76:	4602      	mov	r2, r0
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d1ec      	bne.n	8005e5c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e82:	4b19      	ldr	r3, [pc, #100]	; (8005ee8 <HAL_RCC_ClockConfig+0x278>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d21b      	bcs.n	8005ec8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e90:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <HAL_RCC_ClockConfig+0x278>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f023 0207 	bic.w	r2, r3, #7
 8005e98:	4913      	ldr	r1, [pc, #76]	; (8005ee8 <HAL_RCC_ClockConfig+0x278>)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea0:	f7fe f840 	bl	8003f24 <HAL_GetTick>
 8005ea4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ea8:	f7fe f83c 	bl	8003f24 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e012      	b.n	8005ee0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eba:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <HAL_RCC_ClockConfig+0x278>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d1ef      	bne.n	8005ea8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ec8:	f000 f87e 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	4a07      	ldr	r2, [pc, #28]	; (8005eec <HAL_RCC_ClockConfig+0x27c>)
 8005ed0:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005ed2:	f7fe f833 	bl	8003f3c <HAL_GetTickPrio>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fd ffd5 	bl	8003e88 <HAL_InitTick>
 8005ede:	4603      	mov	r3, r0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	58004000 	.word	0x58004000
 8005eec:	2000001c 	.word	0x2000001c

08005ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef0:	b590      	push	{r4, r7, lr}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ef6:	f7ff f9ca 	bl	800528e <LL_RCC_GetSysClkSource>
 8005efa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005f02:	f7ff f986 	bl	8005212 <LL_RCC_MSI_GetRange>
 8005f06:	4603      	mov	r3, r0
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	4a2b      	ldr	r2, [pc, #172]	; (8005fbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e04b      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d102      	bne.n	8005f24 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f1e:	4b28      	ldr	r3, [pc, #160]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e045      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d10a      	bne.n	8005f40 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005f2a:	f7fe ff9f 	bl	8004e6c <LL_RCC_HSE_IsEnabledDiv2>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d102      	bne.n	8005f3a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005f34:	4b22      	ldr	r3, [pc, #136]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e03a      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005f3a:	4b22      	ldr	r3, [pc, #136]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	e037      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005f40:	f7ff faa1 	bl	8005486 <LL_RCC_PLL_GetMainSource>
 8005f44:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d003      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0x64>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d003      	beq.n	8005f5a <HAL_RCC_GetSysClockFreq+0x6a>
 8005f52:	e00d      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005f54:	4b1a      	ldr	r3, [pc, #104]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f56:	60bb      	str	r3, [r7, #8]
        break;
 8005f58:	e015      	b.n	8005f86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005f5a:	f7fe ff87 	bl	8004e6c <LL_RCC_HSE_IsEnabledDiv2>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d102      	bne.n	8005f6a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005f64:	4b16      	ldr	r3, [pc, #88]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f66:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005f68:	e00d      	b.n	8005f86 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005f6a:	4b16      	ldr	r3, [pc, #88]	; (8005fc4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005f6c:	60bb      	str	r3, [r7, #8]
        break;
 8005f6e:	e00a      	b.n	8005f86 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005f70:	f7ff f94f 	bl	8005212 <LL_RCC_MSI_GetRange>
 8005f74:	4603      	mov	r3, r0
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	4a0f      	ldr	r2, [pc, #60]	; (8005fbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f82:	60bb      	str	r3, [r7, #8]
        break;
 8005f84:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005f86:	f7ff fa59 	bl	800543c <LL_RCC_PLL_GetN>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	fb03 f402 	mul.w	r4, r3, r2
 8005f92:	f7ff fa6c 	bl	800546e <LL_RCC_PLL_GetDivider>
 8005f96:	4603      	mov	r3, r0
 8005f98:	091b      	lsrs	r3, r3, #4
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005fa0:	f7ff fa59 	bl	8005456 <LL_RCC_PLL_GetR>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	0f5b      	lsrs	r3, r3, #29
 8005fa8:	3301      	adds	r3, #1
 8005faa:	fbb4 f3f3 	udiv	r3, r4, r3
 8005fae:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd90      	pop	{r4, r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	0800c244 	.word	0x0800c244
 8005fc0:	00f42400 	.word	0x00f42400
 8005fc4:	01e84800 	.word	0x01e84800

08005fc8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc8:	b598      	push	{r3, r4, r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005fcc:	f7ff ff90 	bl	8005ef0 <HAL_RCC_GetSysClockFreq>
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	f7ff f9d1 	bl	8005378 <LL_RCC_GetAHBPrescaler>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	091b      	lsrs	r3, r3, #4
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	4a03      	ldr	r2, [pc, #12]	; (8005fec <HAL_RCC_GetHCLKFreq+0x24>)
 8005fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd98      	pop	{r3, r4, r7, pc}
 8005fec:	0800c1e4 	.word	0x0800c1e4

08005ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ff0:	b598      	push	{r3, r4, r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ff4:	f7ff ffe8 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	f7ff f9d7 	bl	80053ac <LL_RCC_GetAPB1Prescaler>
 8005ffe:	4603      	mov	r3, r0
 8006000:	0a1b      	lsrs	r3, r3, #8
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	4a04      	ldr	r2, [pc, #16]	; (8006018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006014:	4618      	mov	r0, r3
 8006016:	bd98      	pop	{r3, r4, r7, pc}
 8006018:	0800c224 	.word	0x0800c224

0800601c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800601c:	b598      	push	{r3, r4, r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006020:	f7ff ffd2 	bl	8005fc8 <HAL_RCC_GetHCLKFreq>
 8006024:	4604      	mov	r4, r0
 8006026:	f7ff f9cd 	bl	80053c4 <LL_RCC_GetAPB2Prescaler>
 800602a:	4603      	mov	r3, r0
 800602c:	0adb      	lsrs	r3, r3, #11
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	4a04      	ldr	r2, [pc, #16]	; (8006044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006038:	f003 031f 	and.w	r3, r3, #31
 800603c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd98      	pop	{r3, r4, r7, pc}
 8006044:	0800c224 	.word	0x0800c224

08006048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006048:	b590      	push	{r4, r7, lr}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2bb0      	cmp	r3, #176	; 0xb0
 8006054:	d903      	bls.n	800605e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006056:	4b15      	ldr	r3, [pc, #84]	; (80060ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e007      	b.n	800606e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	091b      	lsrs	r3, r3, #4
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	4a11      	ldr	r2, [pc, #68]	; (80060ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800606e:	f7ff f98f 	bl	8005390 <LL_RCC_GetAHB4Prescaler>
 8006072:	4603      	mov	r3, r0
 8006074:	091b      	lsrs	r3, r3, #4
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	4a0d      	ldr	r2, [pc, #52]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800607c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	fbb2 f3f3 	udiv	r3, r2, r3
 8006086:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4a0a      	ldr	r2, [pc, #40]	; (80060b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800608c:	fba2 2303 	umull	r2, r3, r2, r3
 8006090:	0c9c      	lsrs	r4, r3, #18
 8006092:	f7fe fedd 	bl	8004e50 <HAL_PWREx_GetVoltageRange>
 8006096:	4603      	mov	r3, r0
 8006098:	4619      	mov	r1, r3
 800609a:	4620      	mov	r0, r4
 800609c:	f000 f80c 	bl	80060b8 <RCC_SetFlashLatency>
 80060a0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd90      	pop	{r4, r7, pc}
 80060aa:	bf00      	nop
 80060ac:	0800c244 	.word	0x0800c244
 80060b0:	0800c1e4 	.word	0x0800c1e4
 80060b4:	431bde83 	.word	0x431bde83

080060b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b093      	sub	sp, #76	; 0x4c
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80060c2:	4b39      	ldr	r3, [pc, #228]	; (80061a8 <RCC_SetFlashLatency+0xf0>)
 80060c4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80060c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80060ce:	4a37      	ldr	r2, [pc, #220]	; (80061ac <RCC_SetFlashLatency+0xf4>)
 80060d0:	f107 031c 	add.w	r3, r7, #28
 80060d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80060d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80060da:	4b35      	ldr	r3, [pc, #212]	; (80061b0 <RCC_SetFlashLatency+0xf8>)
 80060dc:	f107 040c 	add.w	r4, r7, #12
 80060e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80060e6:	2300      	movs	r3, #0
 80060e8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f0:	d11c      	bne.n	800612c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80060f2:	2300      	movs	r3, #0
 80060f4:	643b      	str	r3, [r7, #64]	; 0x40
 80060f6:	e015      	b.n	8006124 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80060f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006100:	4413      	add	r3, r2
 8006102:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	429a      	cmp	r2, r3
 800610a:	d808      	bhi.n	800611e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800610c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006114:	4413      	add	r3, r2
 8006116:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800611a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800611c:	e022      	b.n	8006164 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800611e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006120:	3301      	adds	r3, #1
 8006122:	643b      	str	r3, [r7, #64]	; 0x40
 8006124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006126:	2b03      	cmp	r3, #3
 8006128:	d9e6      	bls.n	80060f8 <RCC_SetFlashLatency+0x40>
 800612a:	e01b      	b.n	8006164 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800612c:	2300      	movs	r3, #0
 800612e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006130:	e015      	b.n	800615e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800613a:	4413      	add	r3, r2
 800613c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	429a      	cmp	r2, r3
 8006144:	d808      	bhi.n	8006158 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800614e:	4413      	add	r3, r2
 8006150:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006154:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006156:	e005      	b.n	8006164 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615a:	3301      	adds	r3, #1
 800615c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800615e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006160:	2b02      	cmp	r3, #2
 8006162:	d9e6      	bls.n	8006132 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006164:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <RCC_SetFlashLatency+0xfc>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f023 0207 	bic.w	r2, r3, #7
 800616c:	4911      	ldr	r1, [pc, #68]	; (80061b4 <RCC_SetFlashLatency+0xfc>)
 800616e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006170:	4313      	orrs	r3, r2
 8006172:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006174:	f7fd fed6 	bl	8003f24 <HAL_GetTick>
 8006178:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800617a:	e008      	b.n	800618e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800617c:	f7fd fed2 	bl	8003f24 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d901      	bls.n	800618e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e007      	b.n	800619e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800618e:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <RCC_SetFlashLatency+0xfc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006198:	429a      	cmp	r2, r3
 800619a:	d1ef      	bne.n	800617c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	374c      	adds	r7, #76	; 0x4c
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}
 80061a6:	bf00      	nop
 80061a8:	0800c06c 	.word	0x0800c06c
 80061ac:	0800c07c 	.word	0x0800c07c
 80061b0:	0800c088 	.word	0x0800c088
 80061b4:	58004000 	.word	0x58004000

080061b8 <LL_RCC_LSE_IsEnabled>:
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80061bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <LL_RCC_LSE_IsEnabled+0x18>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <LL_RCC_LSE_IsEnabled+0x1a>
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <LL_RCC_LSE_IsReady>:
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80061e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d101      	bne.n	80061f4 <LL_RCC_LSE_IsReady+0x18>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <LL_RCC_LSE_IsReady+0x1a>
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <LL_RCC_SetRFWKPClockSource>:
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800620c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <LL_RCC_SetSMPSClockSource>:
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	f023 0203 	bic.w	r2, r3, #3
 800623e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4313      	orrs	r3, r2
 8006246:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <LL_RCC_SetSMPSPrescaler>:
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800625c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4313      	orrs	r3, r2
 800626e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <LL_RCC_SetUSARTClockSource>:
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628c:	f023 0203 	bic.w	r2, r3, #3
 8006290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4313      	orrs	r3, r2
 8006298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <LL_RCC_SetLPUARTClockSource>:
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80062b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <LL_RCC_SetI2CClockSource>:
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	091b      	lsrs	r3, r3, #4
 80062e8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80062ec:	43db      	mvns	r3, r3
 80062ee:	401a      	ands	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80062f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <LL_RCC_SetLPTIMClockSource>:
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	0c1b      	lsrs	r3, r3, #16
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	43db      	mvns	r3, r3
 8006326:	401a      	ands	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	041b      	lsls	r3, r3, #16
 800632c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <LL_RCC_SetSAIClockSource>:
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800634a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800634e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006352:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <LL_RCC_SetRNGClockSource>:
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <LL_RCC_SetCLK48ClockSource>:
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80063a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <LL_RCC_SetUSBClockSource>:
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff ffe3 	bl	800639a <LL_RCC_SetCLK48ClockSource>
}
 80063d4:	bf00      	nop
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <LL_RCC_SetADCClockSource>:
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80063e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <LL_RCC_SetRTCClockSource>:
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800641c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4313      	orrs	r3, r2
 8006424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <LL_RCC_GetRTCClockSource>:
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006440:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006444:	4618      	mov	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <LL_RCC_ForceBackupDomainReset>:
{
 800644e:	b480      	push	{r7}
 8006450:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800645e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006466:	bf00      	nop
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006488:	bf00      	nop
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <LL_RCC_PLLSAI1_Enable>:
{
 8006492:	b480      	push	{r7}
 8006494:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064a4:	6013      	str	r3, [r2, #0]
}
 80064a6:	bf00      	nop
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <LL_RCC_PLLSAI1_Disable>:
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80064b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064c2:	6013      	str	r3, [r2, #0]
}
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <LL_RCC_PLLSAI1_IsReady>:
{
 80064ce:	b480      	push	{r7}
 80064d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80064d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064e0:	d101      	bne.n	80064e6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b088      	sub	sp, #32
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80064fa:	2300      	movs	r3, #0
 80064fc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80064fe:	2300      	movs	r3, #0
 8006500:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d034      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006516:	d021      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006518:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800651c:	d81b      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800651e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006522:	d01d      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006524:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006528:	d815      	bhi.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00b      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800652e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006532:	d110      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800653e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006542:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006544:	e00d      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3304      	adds	r3, #4
 800654a:	4618      	mov	r0, r3
 800654c:	f000 f947 	bl	80067de <RCCEx_PLLSAI1_ConfigNP>
 8006550:	4603      	mov	r3, r0
 8006552:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006554:	e005      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	77fb      	strb	r3, [r7, #31]
        break;
 800655a:	e002      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800655c:	bf00      	nop
 800655e:	e000      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006562:	7ffb      	ldrb	r3, [r7, #31]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d105      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fee8 	bl	8006342 <LL_RCC_SetSAIClockSource>
 8006572:	e001      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006574:	7ffb      	ldrb	r3, [r7, #31]
 8006576:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006580:	2b00      	cmp	r3, #0
 8006582:	d046      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006584:	f7ff ff56 	bl	8006434 <LL_RCC_GetRTCClockSource>
 8006588:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	429a      	cmp	r2, r3
 8006592:	d03c      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006594:	f7fe fc4c 	bl	8004e30 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d105      	bne.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7ff ff30 	bl	8006408 <LL_RCC_SetRTCClockSource>
 80065a8:	e02e      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80065aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80065b4:	f7ff ff4b 	bl	800644e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80065b8:	f7ff ff5a 	bl	8006470 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80065ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80065d4:	f7ff fdf0 	bl	80061b8 <LL_RCC_LSE_IsEnabled>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d114      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065de:	f7fd fca1 	bl	8003f24 <HAL_GetTick>
 80065e2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80065e4:	e00b      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e6:	f7fd fc9d 	bl	8003f24 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d902      	bls.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	77fb      	strb	r3, [r7, #31]
              break;
 80065fc:	e004      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80065fe:	f7ff fded 	bl	80061dc <LL_RCC_LSE_IsReady>
 8006602:	4603      	mov	r3, r0
 8006604:	2b01      	cmp	r3, #1
 8006606:	d1ee      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006608:	7ffb      	ldrb	r3, [r7, #31]
 800660a:	77bb      	strb	r3, [r7, #30]
 800660c:	e001      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660e:	7ffb      	ldrb	r3, [r7, #31]
 8006610:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fe2a 	bl	800627c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d004      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fe35 	bl	80062a8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0310 	and.w	r3, r3, #16
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff fe5d 	bl	800630e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff fe52 	bl	800630e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff fe2a 	bl	80062d4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d004      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff fe1f 	bl	80062d4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d022      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff fe8d 	bl	80063c6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066b4:	d107      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80066b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066c4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066ce:	d10b      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 f8dd 	bl	8006894 <RCCEx_PLLSAI1_ConfigNQ>
 80066da:	4603      	mov	r3, r0
 80066dc:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80066de:	7ffb      	ldrb	r3, [r7, #31]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80066e4:	7ffb      	ldrb	r3, [r7, #31]
 80066e6:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d02b      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066fc:	d008      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006706:	d003      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	2b00      	cmp	r3, #0
 800670e:	d105      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fe2a 	bl	800636e <LL_RCC_SetRNGClockSource>
 800671a:	e00a      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	2000      	movs	r0, #0
 8006728:	f7ff fe21 	bl	800636e <LL_RCC_SetRNGClockSource>
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7ff fe34 	bl	800639a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800673a:	d107      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800673c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800674a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006754:	2b00      	cmp	r3, #0
 8006756:	d022      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff fe3d 	bl	80063dc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800676a:	d107      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800676c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800677a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006784:	d10b      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3304      	adds	r3, #4
 800678a:	4618      	mov	r0, r3
 800678c:	f000 f8dd 	bl	800694a <RCCEx_PLLSAI1_ConfigNR>
 8006790:	4603      	mov	r3, r0
 8006792:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8006794:	7ffb      	ldrb	r3, [r7, #31]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800679a:	7ffb      	ldrb	r3, [r7, #31]
 800679c:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff fd26 	bl	8006200 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d009      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fd45 	bl	8006254 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff fd2c 	bl	800622c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80067d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80067ea:	f7ff fe61 	bl	80064b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80067ee:	f7fd fb99 	bl	8003f24 <HAL_GetTick>
 80067f2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80067f4:	e009      	b.n	800680a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067f6:	f7fd fb95 	bl	8003f24 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d902      	bls.n	800680a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	73fb      	strb	r3, [r7, #15]
      break;
 8006808:	e004      	b.n	8006814 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800680a:	f7ff fe60 	bl	80064ce <LL_RCC_PLLSAI1_IsReady>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1f0      	bne.n	80067f6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d137      	bne.n	800688a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800681a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800682e:	4313      	orrs	r3, r2
 8006830:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006844:	4313      	orrs	r3, r2
 8006846:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006848:	f7ff fe23 	bl	8006492 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800684c:	f7fd fb6a 	bl	8003f24 <HAL_GetTick>
 8006850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006852:	e009      	b.n	8006868 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006854:	f7fd fb66 	bl	8003f24 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d902      	bls.n	8006868 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	73fb      	strb	r3, [r7, #15]
        break;
 8006866:	e004      	b.n	8006872 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006868:	f7ff fe31 	bl	80064ce <LL_RCC_PLLSAI1_IsReady>
 800686c:	4603      	mov	r3, r0
 800686e:	2b01      	cmp	r3, #1
 8006870:	d1f0      	bne.n	8006854 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d108      	bne.n	800688a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006886:	4313      	orrs	r3, r2
 8006888:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800688a:	7bfb      	ldrb	r3, [r7, #15]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80068a0:	f7ff fe06 	bl	80064b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068a4:	f7fd fb3e 	bl	8003f24 <HAL_GetTick>
 80068a8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80068aa:	e009      	b.n	80068c0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068ac:	f7fd fb3a 	bl	8003f24 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d902      	bls.n	80068c0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	73fb      	strb	r3, [r7, #15]
      break;
 80068be:	e004      	b.n	80068ca <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80068c0:	f7ff fe05 	bl	80064ce <LL_RCC_PLLSAI1_IsReady>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f0      	bne.n	80068ac <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d137      	bne.n	8006940 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80068d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068e4:	4313      	orrs	r3, r2
 80068e6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80068e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068fa:	4313      	orrs	r3, r2
 80068fc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80068fe:	f7ff fdc8 	bl	8006492 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006902:	f7fd fb0f 	bl	8003f24 <HAL_GetTick>
 8006906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006908:	e009      	b.n	800691e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800690a:	f7fd fb0b 	bl	8003f24 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d902      	bls.n	800691e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	73fb      	strb	r3, [r7, #15]
        break;
 800691c:	e004      	b.n	8006928 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800691e:	f7ff fdd6 	bl	80064ce <LL_RCC_PLLSAI1_IsReady>
 8006922:	4603      	mov	r3, r0
 8006924:	2b01      	cmp	r3, #1
 8006926:	d1f0      	bne.n	800690a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d108      	bne.n	8006940 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800692e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800693c:	4313      	orrs	r3, r2
 800693e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006956:	f7ff fdab 	bl	80064b0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800695a:	f7fd fae3 	bl	8003f24 <HAL_GetTick>
 800695e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006960:	e009      	b.n	8006976 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006962:	f7fd fadf 	bl	8003f24 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d902      	bls.n	8006976 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	73fb      	strb	r3, [r7, #15]
      break;
 8006974:	e004      	b.n	8006980 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006976:	f7ff fdaa 	bl	80064ce <LL_RCC_PLLSAI1_IsReady>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f0      	bne.n	8006962 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d137      	bne.n	80069f6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800699a:	4313      	orrs	r3, r2
 800699c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800699e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069b0:	4313      	orrs	r3, r2
 80069b2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80069b4:	f7ff fd6d 	bl	8006492 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b8:	f7fd fab4 	bl	8003f24 <HAL_GetTick>
 80069bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069be:	e009      	b.n	80069d4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069c0:	f7fd fab0 	bl	8003f24 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d902      	bls.n	80069d4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	73fb      	strb	r3, [r7, #15]
        break;
 80069d2:	e004      	b.n	80069de <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069d4:	f7ff fd7b 	bl	80064ce <LL_RCC_PLLSAI1_IsReady>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d1f0      	bne.n	80069c0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d108      	bne.n	80069f6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80069e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069f2:	4313      	orrs	r3, r2
 80069f4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e090      	b.n	8006b34 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d106      	bne.n	8006a2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fb fc16 	bl	8002258 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	22ca      	movs	r2, #202	; 0xca
 8006a3a:	625a      	str	r2, [r3, #36]	; 0x24
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2253      	movs	r2, #83	; 0x53
 8006a42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f89f 	bl	8006b88 <RTC_EnterInitMode>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d009      	beq.n	8006a64 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	22ff      	movs	r2, #255	; 0xff
 8006a56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e067      	b.n	8006b34 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6812      	ldr	r2, [r2, #0]
 8006a6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a76:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6899      	ldr	r1, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	431a      	orrs	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	68d2      	ldr	r2, [r2, #12]
 8006a9e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6919      	ldr	r1, [r3, #16]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	041a      	lsls	r2, r3, #16
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ac2:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0203 	bic.w	r2, r2, #3
 8006ad2:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69da      	ldr	r2, [r3, #28]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d113      	bne.n	8006b22 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f81e 	bl	8006b3c <HAL_RTC_WaitForSynchro>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00d      	beq.n	8006b22 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	22ff      	movs	r2, #255	; 0xff
 8006b0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2204      	movs	r2, #4
 8006b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e008      	b.n	8006b34 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	22ff      	movs	r2, #255	; 0xff
 8006b28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006b32:	2300      	movs	r3, #0
  }
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006b54:	f7fd f9e6 	bl	8003f24 <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b5a:	e009      	b.n	8006b70 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006b5c:	f7fd f9e2 	bl	8003f24 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b6a:	d901      	bls.n	8006b70 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e007      	b.n	8006b80 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0ee      	beq.n	8006b5c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d119      	bne.n	8006bd2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ba6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006ba8:	f7fd f9bc 	bl	8003f24 <HAL_GetTick>
 8006bac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006bae:	e009      	b.n	8006bc4 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006bb0:	f7fd f9b8 	bl	8003f24 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bbe:	d901      	bls.n	8006bc4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e007      	b.n	8006bd4 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0ee      	beq.n	8006bb0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e024      	b.n	8006c3c <HAL_RTCEx_EnableBypassShadow+0x60>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	22ca      	movs	r2, #202	; 0xca
 8006c08:	625a      	str	r2, [r3, #36]	; 0x24
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2253      	movs	r2, #83	; 0x53
 8006c10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0220 	orr.w	r2, r2, #32
 8006c20:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	22ff      	movs	r2, #255	; 0xff
 8006c28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <LL_RCC_GetUSARTClockSource>:
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4013      	ands	r3, r2
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <LL_RCC_GetLPUARTClockSource>:
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4013      	ands	r3, r2
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e042      	b.n	8006d20 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7fb fa03 	bl	80020b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2224      	movs	r2, #36	; 0x24
 8006cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0201 	bic.w	r2, r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fb00 	bl	80072d0 <UART_SetConfig>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e022      	b.n	8006d20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fcfa 	bl	80076dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fd81 	bl	8007820 <UART_CheckIdleState>
 8006d1e:	4603      	mov	r3, r0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d168      	bne.n	8006e12 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_UART_Transmit_DMA+0x24>
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e061      	b.n	8006e14 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_UART_Transmit_DMA+0x36>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e05a      	b.n	8006e14 <HAL_UART_Transmit_DMA+0xec>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	88fa      	ldrh	r2, [r7, #6]
 8006d70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	88fa      	ldrh	r2, [r7, #6]
 8006d78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2221      	movs	r2, #33	; 0x21
 8006d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d02c      	beq.n	8006dee <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d98:	4a20      	ldr	r2, [pc, #128]	; (8006e1c <HAL_UART_Transmit_DMA+0xf4>)
 8006d9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006da0:	4a1f      	ldr	r2, [pc, #124]	; (8006e20 <HAL_UART_Transmit_DMA+0xf8>)
 8006da2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006da8:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <HAL_UART_Transmit_DMA+0xfc>)
 8006daa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006db0:	2200      	movs	r2, #0
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3328      	adds	r3, #40	; 0x28
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	f7fd fb1e 	bl	8004408 <HAL_DMA_Start_IT>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00d      	beq.n	8006dee <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e012      	b.n	8006e14 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2240      	movs	r2, #64	; 0x40
 8006df4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e0c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e000      	b.n	8006e14 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8006e12:	2302      	movs	r3, #2
  }
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	08007a57 	.word	0x08007a57
 8006e20:	08007aab 	.word	0x08007aab
 8006e24:	08007ac7 	.word	0x08007ac7

08006e28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e4e:	4013      	ands	r3, r2
 8006e50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d118      	bne.n	8006e8a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	f003 0320 	and.w	r3, r3, #32
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d013      	beq.n	8006e8a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d104      	bne.n	8006e76 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d009      	beq.n	8006e8a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 81fb 	beq.w	8007276 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	4798      	blx	r3
      }
      return;
 8006e88:	e1f5      	b.n	8007276 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 80ef 	beq.w	8007070 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4b73      	ldr	r3, [pc, #460]	; (8007064 <HAL_UART_IRQHandler+0x23c>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d105      	bne.n	8006ea8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	4b72      	ldr	r3, [pc, #456]	; (8007068 <HAL_UART_IRQHandler+0x240>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 80e4 	beq.w	8007070 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d010      	beq.n	8006ed4 <HAL_UART_IRQHandler+0xac>
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eca:	f043 0201 	orr.w	r2, r3, #1
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d010      	beq.n	8006f00 <HAL_UART_IRQHandler+0xd8>
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2202      	movs	r2, #2
 8006eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef6:	f043 0204 	orr.w	r2, r3, #4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d010      	beq.n	8006f2c <HAL_UART_IRQHandler+0x104>
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2204      	movs	r2, #4
 8006f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f22:	f043 0202 	orr.w	r2, r3, #2
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d015      	beq.n	8006f62 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4b48      	ldr	r3, [pc, #288]	; (8007064 <HAL_UART_IRQHandler+0x23c>)
 8006f44:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00b      	beq.n	8006f62 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2208      	movs	r2, #8
 8006f50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f58:	f043 0208 	orr.w	r2, r3, #8
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d011      	beq.n	8006f90 <HAL_UART_IRQHandler+0x168>
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00c      	beq.n	8006f90 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f86:	f043 0220 	orr.w	r2, r3, #32
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 816f 	beq.w	800727a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d011      	beq.n	8006fca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d104      	bne.n	8006fba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d007      	beq.n	8006fca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fdc:	2b40      	cmp	r3, #64	; 0x40
 8006fde:	d004      	beq.n	8006fea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d031      	beq.n	800704e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fd01 	bl	80079f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffa:	2b40      	cmp	r3, #64	; 0x40
 8006ffc:	d123      	bne.n	8007046 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800700c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d013      	beq.n	800703e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800701a:	4a14      	ldr	r2, [pc, #80]	; (800706c <HAL_UART_IRQHandler+0x244>)
 800701c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007022:	4618      	mov	r0, r3
 8007024:	f7fd faca 	bl	80045bc <HAL_DMA_Abort_IT>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d017      	beq.n	800705e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007038:	4610      	mov	r0, r2
 800703a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800703c:	e00f      	b.n	800705e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f930 	bl	80072a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007044:	e00b      	b.n	800705e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f92c 	bl	80072a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704c:	e007      	b.n	800705e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f928 	bl	80072a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800705c:	e10d      	b.n	800727a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705e:	bf00      	nop
    return;
 8007060:	e10b      	b.n	800727a <HAL_UART_IRQHandler+0x452>
 8007062:	bf00      	nop
 8007064:	10000001 	.word	0x10000001
 8007068:	04000120 	.word	0x04000120
 800706c:	08007b47 	.word	0x08007b47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007074:	2b01      	cmp	r3, #1
 8007076:	f040 80ab 	bne.w	80071d0 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	f003 0310 	and.w	r3, r3, #16
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80a5 	beq.w	80071d0 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 809f 	beq.w	80071d0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2210      	movs	r2, #16
 8007098:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d155      	bne.n	8007154 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80070b2:	893b      	ldrh	r3, [r7, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 80e2 	beq.w	800727e <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070c0:	893a      	ldrh	r2, [r7, #8]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	f080 80db 	bcs.w	800727e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	893a      	ldrh	r2, [r7, #8]
 80070cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0320 	and.w	r3, r3, #32
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d12b      	bne.n	8007138 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0201 	bic.w	r2, r2, #1
 80070fe:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800710e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0210 	bic.w	r2, r2, #16
 800712c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007132:	4618      	mov	r0, r3
 8007134:	f7fd f9e3 	bl	80044fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007144:	b29b      	uxth	r3, r3
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	b29b      	uxth	r3, r3
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f8b3 	bl	80072b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007152:	e094      	b.n	800727e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007160:	b29b      	uxth	r3, r3
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 8087 	beq.w	8007282 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8007174:	897b      	ldrh	r3, [r7, #10]
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 8083 	beq.w	8007282 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800718a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800719a:	f023 0301 	bic.w	r3, r3, #1
 800719e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0210 	bic.w	r2, r2, #16
 80071c2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071c4:	897b      	ldrh	r3, [r7, #10]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f875 	bl	80072b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80071ce:	e058      	b.n	8007282 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00d      	beq.n	80071f6 <HAL_UART_IRQHandler+0x3ce>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d008      	beq.n	80071f6 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fcd9 	bl	8007ba6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071f4:	e048      	b.n	8007288 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d012      	beq.n	8007226 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007206:	2b00      	cmp	r3, #0
 8007208:	d104      	bne.n	8007214 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007218:	2b00      	cmp	r3, #0
 800721a:	d034      	beq.n	8007286 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
    }
    return;
 8007224:	e02f      	b.n	8007286 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <HAL_UART_IRQHandler+0x41a>
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fc99 	bl	8007b72 <UART_EndTransmit_IT>
    return;
 8007240:	e022      	b.n	8007288 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d008      	beq.n	800725e <HAL_UART_IRQHandler+0x436>
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fcb9 	bl	8007bce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800725c:	e014      	b.n	8007288 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00f      	beq.n	8007288 <HAL_UART_IRQHandler+0x460>
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	da0c      	bge.n	8007288 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fca3 	bl	8007bba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007274:	e008      	b.n	8007288 <HAL_UART_IRQHandler+0x460>
      return;
 8007276:	bf00      	nop
 8007278:	e006      	b.n	8007288 <HAL_UART_IRQHandler+0x460>
    return;
 800727a:	bf00      	nop
 800727c:	e004      	b.n	8007288 <HAL_UART_IRQHandler+0x460>
      return;
 800727e:	bf00      	nop
 8007280:	e002      	b.n	8007288 <HAL_UART_IRQHandler+0x460>
      return;
 8007282:	bf00      	nop
 8007284:	e000      	b.n	8007288 <HAL_UART_IRQHandler+0x460>
    return;
 8007286:	bf00      	nop
  }
}
 8007288:	3720      	adds	r7, #32
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop

08007290 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d0:	b5b0      	push	{r4, r5, r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	4ba3      	ldr	r3, [pc, #652]	; (8007588 <UART_SetConfig+0x2b8>)
 80072fc:	4013      	ands	r3, r2
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6812      	ldr	r2, [r2, #0]
 8007302:	69f9      	ldr	r1, [r7, #28]
 8007304:	430b      	orrs	r3, r1
 8007306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a98      	ldr	r2, [pc, #608]	; (800758c <UART_SetConfig+0x2bc>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d004      	beq.n	8007338 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	4313      	orrs	r3, r2
 8007336:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007342:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6812      	ldr	r2, [r2, #0]
 800734a:	69f9      	ldr	r1, [r7, #28]
 800734c:	430b      	orrs	r3, r1
 800734e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	f023 010f 	bic.w	r1, r3, #15
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a89      	ldr	r2, [pc, #548]	; (8007590 <UART_SetConfig+0x2c0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d120      	bne.n	80073b2 <UART_SetConfig+0xe2>
 8007370:	2003      	movs	r0, #3
 8007372:	f7ff fc69 	bl	8006c48 <LL_RCC_GetUSARTClockSource>
 8007376:	4603      	mov	r3, r0
 8007378:	2b03      	cmp	r3, #3
 800737a:	d817      	bhi.n	80073ac <UART_SetConfig+0xdc>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <UART_SetConfig+0xb4>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	08007395 	.word	0x08007395
 8007388:	080073a1 	.word	0x080073a1
 800738c:	0800739b 	.word	0x0800739b
 8007390:	080073a7 	.word	0x080073a7
 8007394:	2301      	movs	r3, #1
 8007396:	76fb      	strb	r3, [r7, #27]
 8007398:	e038      	b.n	800740c <UART_SetConfig+0x13c>
 800739a:	2302      	movs	r3, #2
 800739c:	76fb      	strb	r3, [r7, #27]
 800739e:	e035      	b.n	800740c <UART_SetConfig+0x13c>
 80073a0:	2304      	movs	r3, #4
 80073a2:	76fb      	strb	r3, [r7, #27]
 80073a4:	e032      	b.n	800740c <UART_SetConfig+0x13c>
 80073a6:	2308      	movs	r3, #8
 80073a8:	76fb      	strb	r3, [r7, #27]
 80073aa:	e02f      	b.n	800740c <UART_SetConfig+0x13c>
 80073ac:	2310      	movs	r3, #16
 80073ae:	76fb      	strb	r3, [r7, #27]
 80073b0:	e02c      	b.n	800740c <UART_SetConfig+0x13c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a75      	ldr	r2, [pc, #468]	; (800758c <UART_SetConfig+0x2bc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d125      	bne.n	8007408 <UART_SetConfig+0x138>
 80073bc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80073c0:	f7ff fc52 	bl	8006c68 <LL_RCC_GetLPUARTClockSource>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073ca:	d017      	beq.n	80073fc <UART_SetConfig+0x12c>
 80073cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073d0:	d817      	bhi.n	8007402 <UART_SetConfig+0x132>
 80073d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073d6:	d00b      	beq.n	80073f0 <UART_SetConfig+0x120>
 80073d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073dc:	d811      	bhi.n	8007402 <UART_SetConfig+0x132>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <UART_SetConfig+0x11a>
 80073e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e6:	d006      	beq.n	80073f6 <UART_SetConfig+0x126>
 80073e8:	e00b      	b.n	8007402 <UART_SetConfig+0x132>
 80073ea:	2300      	movs	r3, #0
 80073ec:	76fb      	strb	r3, [r7, #27]
 80073ee:	e00d      	b.n	800740c <UART_SetConfig+0x13c>
 80073f0:	2302      	movs	r3, #2
 80073f2:	76fb      	strb	r3, [r7, #27]
 80073f4:	e00a      	b.n	800740c <UART_SetConfig+0x13c>
 80073f6:	2304      	movs	r3, #4
 80073f8:	76fb      	strb	r3, [r7, #27]
 80073fa:	e007      	b.n	800740c <UART_SetConfig+0x13c>
 80073fc:	2308      	movs	r3, #8
 80073fe:	76fb      	strb	r3, [r7, #27]
 8007400:	e004      	b.n	800740c <UART_SetConfig+0x13c>
 8007402:	2310      	movs	r3, #16
 8007404:	76fb      	strb	r3, [r7, #27]
 8007406:	e001      	b.n	800740c <UART_SetConfig+0x13c>
 8007408:	2310      	movs	r3, #16
 800740a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a5e      	ldr	r2, [pc, #376]	; (800758c <UART_SetConfig+0x2bc>)
 8007412:	4293      	cmp	r3, r2
 8007414:	f040 808b 	bne.w	800752e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007418:	7efb      	ldrb	r3, [r7, #27]
 800741a:	2b08      	cmp	r3, #8
 800741c:	d823      	bhi.n	8007466 <UART_SetConfig+0x196>
 800741e:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <UART_SetConfig+0x154>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	08007449 	.word	0x08007449
 8007428:	08007467 	.word	0x08007467
 800742c:	08007451 	.word	0x08007451
 8007430:	08007467 	.word	0x08007467
 8007434:	08007457 	.word	0x08007457
 8007438:	08007467 	.word	0x08007467
 800743c:	08007467 	.word	0x08007467
 8007440:	08007467 	.word	0x08007467
 8007444:	0800745f 	.word	0x0800745f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007448:	f7fe fdd2 	bl	8005ff0 <HAL_RCC_GetPCLK1Freq>
 800744c:	6178      	str	r0, [r7, #20]
        break;
 800744e:	e00f      	b.n	8007470 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007450:	4b50      	ldr	r3, [pc, #320]	; (8007594 <UART_SetConfig+0x2c4>)
 8007452:	617b      	str	r3, [r7, #20]
        break;
 8007454:	e00c      	b.n	8007470 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007456:	f7fe fd4b 	bl	8005ef0 <HAL_RCC_GetSysClockFreq>
 800745a:	6178      	str	r0, [r7, #20]
        break;
 800745c:	e008      	b.n	8007470 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800745e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007462:	617b      	str	r3, [r7, #20]
        break;
 8007464:	e004      	b.n	8007470 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	76bb      	strb	r3, [r7, #26]
        break;
 800746e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 811a 	beq.w	80076ac <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	4a46      	ldr	r2, [pc, #280]	; (8007598 <UART_SetConfig+0x2c8>)
 800747e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007482:	461a      	mov	r2, r3
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	fbb3 f3f2 	udiv	r3, r3, r2
 800748a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	4613      	mov	r3, r2
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	4413      	add	r3, r2
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	429a      	cmp	r2, r3
 800749a:	d305      	bcc.n	80074a8 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d902      	bls.n	80074ae <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	76bb      	strb	r3, [r7, #26]
 80074ac:	e0fe      	b.n	80076ac <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f04f 0100 	mov.w	r1, #0
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ba:	4a37      	ldr	r2, [pc, #220]	; (8007598 <UART_SetConfig+0x2c8>)
 80074bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	f04f 0300 	mov.w	r3, #0
 80074c6:	f7f8 feb3 	bl	8000230 <__aeabi_uldivmod>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4610      	mov	r0, r2
 80074d0:	4619      	mov	r1, r3
 80074d2:	f04f 0200 	mov.w	r2, #0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	020b      	lsls	r3, r1, #8
 80074dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074e0:	0202      	lsls	r2, r0, #8
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	6849      	ldr	r1, [r1, #4]
 80074e6:	0849      	lsrs	r1, r1, #1
 80074e8:	4608      	mov	r0, r1
 80074ea:	f04f 0100 	mov.w	r1, #0
 80074ee:	1814      	adds	r4, r2, r0
 80074f0:	eb43 0501 	adc.w	r5, r3, r1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	461a      	mov	r2, r3
 80074fa:	f04f 0300 	mov.w	r3, #0
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	f7f8 fe95 	bl	8000230 <__aeabi_uldivmod>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4613      	mov	r3, r2
 800750c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007514:	d308      	bcc.n	8007528 <UART_SetConfig+0x258>
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800751c:	d204      	bcs.n	8007528 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	60da      	str	r2, [r3, #12]
 8007526:	e0c1      	b.n	80076ac <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	76bb      	strb	r3, [r7, #26]
 800752c:	e0be      	b.n	80076ac <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007536:	d16a      	bne.n	800760e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007538:	7efb      	ldrb	r3, [r7, #27]
 800753a:	3b01      	subs	r3, #1
 800753c:	2b07      	cmp	r3, #7
 800753e:	d82d      	bhi.n	800759c <UART_SetConfig+0x2cc>
 8007540:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <UART_SetConfig+0x278>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	08007569 	.word	0x08007569
 800754c:	08007571 	.word	0x08007571
 8007550:	0800759d 	.word	0x0800759d
 8007554:	08007577 	.word	0x08007577
 8007558:	0800759d 	.word	0x0800759d
 800755c:	0800759d 	.word	0x0800759d
 8007560:	0800759d 	.word	0x0800759d
 8007564:	0800757f 	.word	0x0800757f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007568:	f7fe fd58 	bl	800601c <HAL_RCC_GetPCLK2Freq>
 800756c:	6178      	str	r0, [r7, #20]
        break;
 800756e:	e01a      	b.n	80075a6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007570:	4b08      	ldr	r3, [pc, #32]	; (8007594 <UART_SetConfig+0x2c4>)
 8007572:	617b      	str	r3, [r7, #20]
        break;
 8007574:	e017      	b.n	80075a6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007576:	f7fe fcbb 	bl	8005ef0 <HAL_RCC_GetSysClockFreq>
 800757a:	6178      	str	r0, [r7, #20]
        break;
 800757c:	e013      	b.n	80075a6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800757e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007582:	617b      	str	r3, [r7, #20]
        break;
 8007584:	e00f      	b.n	80075a6 <UART_SetConfig+0x2d6>
 8007586:	bf00      	nop
 8007588:	cfff69f3 	.word	0xcfff69f3
 800758c:	40008000 	.word	0x40008000
 8007590:	40013800 	.word	0x40013800
 8007594:	00f42400 	.word	0x00f42400
 8007598:	0800c284 	.word	0x0800c284
      default:
        pclk = 0U;
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	76bb      	strb	r3, [r7, #26]
        break;
 80075a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d07f      	beq.n	80076ac <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	4a48      	ldr	r2, [pc, #288]	; (80076d4 <UART_SetConfig+0x404>)
 80075b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075b6:	461a      	mov	r2, r3
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80075be:	005a      	lsls	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	085b      	lsrs	r3, r3, #1
 80075c6:	441a      	add	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d916      	bls.n	8007608 <UART_SetConfig+0x338>
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e0:	d212      	bcs.n	8007608 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	f023 030f 	bic.w	r3, r3, #15
 80075ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	085b      	lsrs	r3, r3, #1
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	89fb      	ldrh	r3, [r7, #14]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	89fa      	ldrh	r2, [r7, #14]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	e051      	b.n	80076ac <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	76bb      	strb	r3, [r7, #26]
 800760c:	e04e      	b.n	80076ac <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800760e:	7efb      	ldrb	r3, [r7, #27]
 8007610:	3b01      	subs	r3, #1
 8007612:	2b07      	cmp	r3, #7
 8007614:	d821      	bhi.n	800765a <UART_SetConfig+0x38a>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <UART_SetConfig+0x34c>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	0800763d 	.word	0x0800763d
 8007620:	08007645 	.word	0x08007645
 8007624:	0800765b 	.word	0x0800765b
 8007628:	0800764b 	.word	0x0800764b
 800762c:	0800765b 	.word	0x0800765b
 8007630:	0800765b 	.word	0x0800765b
 8007634:	0800765b 	.word	0x0800765b
 8007638:	08007653 	.word	0x08007653
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800763c:	f7fe fcee 	bl	800601c <HAL_RCC_GetPCLK2Freq>
 8007640:	6178      	str	r0, [r7, #20]
        break;
 8007642:	e00f      	b.n	8007664 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007644:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <UART_SetConfig+0x408>)
 8007646:	617b      	str	r3, [r7, #20]
        break;
 8007648:	e00c      	b.n	8007664 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800764a:	f7fe fc51 	bl	8005ef0 <HAL_RCC_GetSysClockFreq>
 800764e:	6178      	str	r0, [r7, #20]
        break;
 8007650:	e008      	b.n	8007664 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007656:	617b      	str	r3, [r7, #20]
        break;
 8007658:	e004      	b.n	8007664 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	76bb      	strb	r3, [r7, #26]
        break;
 8007662:	bf00      	nop
    }

    if (pclk != 0U)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d020      	beq.n	80076ac <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <UART_SetConfig+0x404>)
 8007670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007674:	461a      	mov	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	fbb3 f2f2 	udiv	r2, r3, r2
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	085b      	lsrs	r3, r3, #1
 8007682:	441a      	add	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	fbb2 f3f3 	udiv	r3, r2, r3
 800768c:	b29b      	uxth	r3, r3
 800768e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	2b0f      	cmp	r3, #15
 8007694:	d908      	bls.n	80076a8 <UART_SetConfig+0x3d8>
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800769c:	d204      	bcs.n	80076a8 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	60da      	str	r2, [r3, #12]
 80076a6:	e001      	b.n	80076ac <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80076c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3720      	adds	r7, #32
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bdb0      	pop	{r4, r5, r7, pc}
 80076d2:	bf00      	nop
 80076d4:	0800c284 	.word	0x0800c284
 80076d8:	00f42400 	.word	0x00f42400

080076dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00a      	beq.n	8007706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00a      	beq.n	800774a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	f003 0308 	and.w	r3, r3, #8
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00a      	beq.n	800776c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d01a      	beq.n	80077f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077da:	d10a      	bne.n	80077f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	430a      	orrs	r2, r1
 8007812:	605a      	str	r2, [r3, #4]
  }
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af02      	add	r7, sp, #8
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007830:	f7fc fb78 	bl	8003f24 <HAL_GetTick>
 8007834:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0308 	and.w	r3, r3, #8
 8007840:	2b08      	cmp	r3, #8
 8007842:	d10e      	bne.n	8007862 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007844:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f82f 	bl	80078b6 <UART_WaitOnFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e025      	b.n	80078ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b04      	cmp	r3, #4
 800786e:	d10e      	bne.n	800788e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007870:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f819 	bl	80078b6 <UART_WaitOnFlagUntilTimeout>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e00f      	b.n	80078ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	4613      	mov	r3, r2
 80078c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c6:	e062      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ce:	d05e      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078d0:	f7fc fb28 	bl	8003f24 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d302      	bcc.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d11d      	bne.n	8007922 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0201 	bic.w	r2, r2, #1
 8007904:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2220      	movs	r2, #32
 800790a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2220      	movs	r2, #32
 8007912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e045      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d02e      	beq.n	800798e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800793a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793e:	d126      	bne.n	800798e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007948:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007958:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f022 0201 	bic.w	r2, r2, #1
 8007968:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2220      	movs	r2, #32
 800796e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2220      	movs	r2, #32
 8007976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2220      	movs	r2, #32
 800797e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e00f      	b.n	80079ae <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69da      	ldr	r2, [r3, #28]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4013      	ands	r3, r2
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	429a      	cmp	r2, r3
 800799c:	bf0c      	ite	eq
 800799e:	2301      	moveq	r3, #1
 80079a0:	2300      	movne	r3, #0
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d08d      	beq.n	80078c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80079cc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80079dc:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b083      	sub	sp, #12
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a08:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a18:	f023 0301 	bic.w	r3, r3, #1
 8007a1c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d107      	bne.n	8007a36 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0210 	bic.w	r2, r2, #16
 8007a34:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d114      	bne.n	8007a9c <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a88:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a98:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a9a:	e002      	b.n	8007aa2 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f7f9 fe7b 	bl	8001798 <HAL_UART_TxCpltCallback>
}
 8007aa2:	bf00      	nop
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f7ff fbe9 	bl	8007290 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ada:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aee:	2b80      	cmp	r3, #128	; 0x80
 8007af0:	d109      	bne.n	8007b06 <UART_DMAError+0x40>
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	2b21      	cmp	r3, #33	; 0x21
 8007af6:	d106      	bne.n	8007b06 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007b00:	6978      	ldr	r0, [r7, #20]
 8007b02:	f7ff ff58 	bl	80079b6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b10:	2b40      	cmp	r3, #64	; 0x40
 8007b12:	d109      	bne.n	8007b28 <UART_DMAError+0x62>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b22      	cmp	r3, #34	; 0x22
 8007b18:	d106      	bne.n	8007b28 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007b22:	6978      	ldr	r0, [r7, #20]
 8007b24:	f7ff ff65 	bl	80079f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b2e:	f043 0210 	orr.w	r2, r3, #16
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b38:	6978      	ldr	r0, [r7, #20]
 8007b3a:	f7ff fbb3 	bl	80072a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b3e:	bf00      	nop
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7ff fb9d 	bl	80072a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b6a:	bf00      	nop
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b88:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7f9 fdfd 	bl	8001798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e027      	b.n	8007c48 <HAL_UARTEx_DisableFifoMode+0x66>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2224      	movs	r2, #36	; 0x24
 8007c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0201 	bic.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d101      	bne.n	8007c6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	e02d      	b.n	8007cc8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2224      	movs	r2, #36	; 0x24
 8007c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0201 	bic.w	r2, r2, #1
 8007c92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f84f 	bl	8007d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e02d      	b.n	8007d44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2224      	movs	r2, #36	; 0x24
 8007cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f022 0201 	bic.w	r2, r2, #1
 8007d0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f811 	bl	8007d4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d108      	bne.n	8007d6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d6c:	e031      	b.n	8007dd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d6e:	2308      	movs	r3, #8
 8007d70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d72:	2308      	movs	r3, #8
 8007d74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	0e5b      	lsrs	r3, r3, #25
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	0f5b      	lsrs	r3, r3, #29
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	7b3a      	ldrb	r2, [r7, #12]
 8007d9a:	4911      	ldr	r1, [pc, #68]	; (8007de0 <UARTEx_SetNbDataToProcess+0x94>)
 8007d9c:	5c8a      	ldrb	r2, [r1, r2]
 8007d9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007da2:	7b3a      	ldrb	r2, [r7, #12]
 8007da4:	490f      	ldr	r1, [pc, #60]	; (8007de4 <UARTEx_SetNbDataToProcess+0x98>)
 8007da6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007da8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	7b7a      	ldrb	r2, [r7, #13]
 8007db8:	4909      	ldr	r1, [pc, #36]	; (8007de0 <UARTEx_SetNbDataToProcess+0x94>)
 8007dba:	5c8a      	ldrb	r2, [r1, r2]
 8007dbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007dc0:	7b7a      	ldrb	r2, [r7, #13]
 8007dc2:	4908      	ldr	r1, [pc, #32]	; (8007de4 <UARTEx_SetNbDataToProcess+0x98>)
 8007dc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007dd2:	bf00      	nop
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	0800c29c 	.word	0x0800c29c
 8007de4:	0800c2a4 	.word	0x0800c2a4

08007de8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b0cc      	sub	sp, #304	; 0x130
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4602      	mov	r2, r0
 8007df0:	1dfb      	adds	r3, r7, #7
 8007df2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007dfc:	f107 030f 	add.w	r3, r7, #15
 8007e00:	2200      	movs	r2, #0
 8007e02:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e0e:	1dfa      	adds	r2, r7, #7
 8007e10:	7812      	ldrb	r2, [r2, #0]
 8007e12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007e14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e18:	3301      	adds	r3, #1
 8007e1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e22:	2218      	movs	r2, #24
 8007e24:	2100      	movs	r1, #0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f001 f9c6 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e2c:	233f      	movs	r3, #63	; 0x3f
 8007e2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007e32:	2385      	movs	r3, #133	; 0x85
 8007e34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e38:	f107 0310 	add.w	r3, r7, #16
 8007e3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e48:	f107 030f 	add.w	r3, r7, #15
 8007e4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e50:	2301      	movs	r3, #1
 8007e52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f001 f86f 	bl	8008f40 <hci_send_req>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da01      	bge.n	8007e6c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8007e68:	23ff      	movs	r3, #255	; 0xff
 8007e6a:	e002      	b.n	8007e72 <aci_gap_set_io_capability+0x8a>
  return status;
 8007e6c:	f107 030f 	add.w	r3, r7, #15
 8007e70:	781b      	ldrb	r3, [r3, #0]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007e7c:	b5b0      	push	{r4, r5, r7, lr}
 8007e7e:	b0cc      	sub	sp, #304	; 0x130
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4605      	mov	r5, r0
 8007e84:	460c      	mov	r4, r1
 8007e86:	4610      	mov	r0, r2
 8007e88:	4619      	mov	r1, r3
 8007e8a:	1dfb      	adds	r3, r7, #7
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	701a      	strb	r2, [r3, #0]
 8007e90:	1dbb      	adds	r3, r7, #6
 8007e92:	4622      	mov	r2, r4
 8007e94:	701a      	strb	r2, [r3, #0]
 8007e96:	1d7b      	adds	r3, r7, #5
 8007e98:	4602      	mov	r2, r0
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	1d3b      	adds	r3, r7, #4
 8007e9e:	460a      	mov	r2, r1
 8007ea0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007ea2:	f107 0310 	add.w	r3, r7, #16
 8007ea6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007eaa:	f107 030f 	add.w	r3, r7, #15
 8007eae:	2200      	movs	r2, #0
 8007eb0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ebc:	1dfa      	adds	r2, r7, #7
 8007ebe:	7812      	ldrb	r2, [r2, #0]
 8007ec0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed0:	1dba      	adds	r2, r7, #6
 8007ed2:	7812      	ldrb	r2, [r2, #0]
 8007ed4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007ed6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eda:	3301      	adds	r3, #1
 8007edc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee4:	1d7a      	adds	r2, r7, #5
 8007ee6:	7812      	ldrb	r2, [r2, #0]
 8007ee8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eee:	3301      	adds	r3, #1
 8007ef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef8:	1d3a      	adds	r2, r7, #4
 8007efa:	7812      	ldrb	r2, [r2, #0]
 8007efc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007efe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f02:	3301      	adds	r3, #1
 8007f04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007f10:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f16:	3301      	adds	r3, #1
 8007f18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f20:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007f24:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007f26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f34:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007f38:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007f3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f3e:	3301      	adds	r3, #1
 8007f40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f48:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007f4c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007f50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f54:	3304      	adds	r3, #4
 8007f56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007f5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007f62:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007f64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f68:	3301      	adds	r3, #1
 8007f6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f72:	2218      	movs	r2, #24
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 f91e 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f7c:	233f      	movs	r3, #63	; 0x3f
 8007f7e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007f82:	2386      	movs	r3, #134	; 0x86
 8007f84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f88:	f107 0310 	add.w	r3, r7, #16
 8007f8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f98:	f107 030f 	add.w	r3, r7, #15
 8007f9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 ffc7 	bl	8008f40 <hci_send_req>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	da01      	bge.n	8007fbc <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007fb8:	23ff      	movs	r3, #255	; 0xff
 8007fba:	e002      	b.n	8007fc2 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8007fbc:	f107 030f 	add.w	r3, r7, #15
 8007fc0:	781b      	ldrb	r3, [r3, #0]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bdb0      	pop	{r4, r5, r7, pc}

08007fcc <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007fcc:	b590      	push	{r4, r7, lr}
 8007fce:	b0cd      	sub	sp, #308	; 0x134
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	463a      	mov	r2, r7
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	1dfb      	adds	r3, r7, #7
 8007fde:	4622      	mov	r2, r4
 8007fe0:	701a      	strb	r2, [r3, #0]
 8007fe2:	1dbb      	adds	r3, r7, #6
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	701a      	strb	r2, [r3, #0]
 8007fe8:	1d7b      	adds	r3, r7, #5
 8007fea:	460a      	mov	r2, r1
 8007fec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007fee:	f107 0310 	add.w	r3, r7, #16
 8007ff2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007ff6:	f107 0308 	add.w	r3, r7, #8
 8007ffa:	2207      	movs	r2, #7
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 f8da 	bl	80091b8 <Osal_MemSet>
  int index_input = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800800a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800800e:	1dfa      	adds	r2, r7, #7
 8008010:	7812      	ldrb	r2, [r2, #0]
 8008012:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008014:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008018:	3301      	adds	r3, #1
 800801a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800801e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008022:	1dba      	adds	r2, r7, #6
 8008024:	7812      	ldrb	r2, [r2, #0]
 8008026:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008028:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800802c:	3301      	adds	r3, #1
 800802e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008036:	1d7a      	adds	r2, r7, #5
 8008038:	7812      	ldrb	r2, [r2, #0]
 800803a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800803c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008040:	3301      	adds	r3, #1
 8008042:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008046:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800804a:	2218      	movs	r2, #24
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f001 f8b2 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008054:	233f      	movs	r3, #63	; 0x3f
 8008056:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800805a:	238a      	movs	r3, #138	; 0x8a
 800805c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008060:	f107 0310 	add.w	r3, r7, #16
 8008064:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008068:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800806c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008070:	f107 0308 	add.w	r3, r7, #8
 8008074:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008078:	2307      	movs	r3, #7
 800807a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800807e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008082:	2100      	movs	r1, #0
 8008084:	4618      	mov	r0, r3
 8008086:	f000 ff5b 	bl	8008f40 <hci_send_req>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	da01      	bge.n	8008094 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8008090:	23ff      	movs	r3, #255	; 0xff
 8008092:	e021      	b.n	80080d8 <aci_gap_init+0x10c>
  if ( resp.Status )
 8008094:	f107 0308 	add.w	r3, r7, #8
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <aci_gap_init+0xda>
    return resp.Status;
 800809e:	f107 0308 	add.w	r3, r7, #8
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	e018      	b.n	80080d8 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 80080a6:	f107 0308 	add.w	r3, r7, #8
 80080aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	463b      	mov	r3, r7
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80080b6:	f107 0308 	add.w	r3, r7, #8
 80080ba:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80080be:	b29a      	uxth	r2, r3
 80080c0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80080c4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80080c6:	f107 0308 	add.w	r3, r7, #8
 80080ca:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80080d4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd90      	pop	{r4, r7, pc}

080080e2 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b088      	sub	sp, #32
 80080e6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080ec:	f107 0308 	add.w	r3, r7, #8
 80080f0:	2218      	movs	r2, #24
 80080f2:	2100      	movs	r1, #0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 f85f 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80080fa:	233f      	movs	r3, #63	; 0x3f
 80080fc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80080fe:	2392      	movs	r3, #146	; 0x92
 8008100:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008102:	1dfb      	adds	r3, r7, #7
 8008104:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008106:	2301      	movs	r3, #1
 8008108:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800810a:	f107 0308 	add.w	r3, r7, #8
 800810e:	2100      	movs	r1, #0
 8008110:	4618      	mov	r0, r3
 8008112:	f000 ff15 	bl	8008f40 <hci_send_req>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	da01      	bge.n	8008120 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800811c:	23ff      	movs	r3, #255	; 0xff
 800811e:	e000      	b.n	8008122 <aci_gap_configure_whitelist+0x40>
  return status;
 8008120:	79fb      	ldrb	r3, [r7, #7]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3720      	adds	r7, #32
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 800812a:	b5b0      	push	{r4, r5, r7, lr}
 800812c:	b0cc      	sub	sp, #304	; 0x130
 800812e:	af00      	add	r7, sp, #0
 8008130:	4605      	mov	r5, r0
 8008132:	460c      	mov	r4, r1
 8008134:	4610      	mov	r0, r2
 8008136:	4619      	mov	r1, r3
 8008138:	1dbb      	adds	r3, r7, #6
 800813a:	462a      	mov	r2, r5
 800813c:	801a      	strh	r2, [r3, #0]
 800813e:	1d3b      	adds	r3, r7, #4
 8008140:	4622      	mov	r2, r4
 8008142:	801a      	strh	r2, [r3, #0]
 8008144:	1cfb      	adds	r3, r7, #3
 8008146:	4602      	mov	r2, r0
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	1cbb      	adds	r3, r7, #2
 800814c:	460a      	mov	r2, r1
 800814e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8008150:	f107 0310 	add.w	r3, r7, #16
 8008154:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008158:	f107 030f 	add.w	r3, r7, #15
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8008166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800816a:	1dba      	adds	r2, r7, #6
 800816c:	8812      	ldrh	r2, [r2, #0]
 800816e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008170:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008174:	3302      	adds	r3, #2
 8008176:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 800817a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817e:	1d3a      	adds	r2, r7, #4
 8008180:	8812      	ldrh	r2, [r2, #0]
 8008182:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008184:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008188:	3302      	adds	r3, #2
 800818a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800818e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008192:	1cfa      	adds	r2, r7, #3
 8008194:	7812      	ldrb	r2, [r2, #0]
 8008196:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008198:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800819c:	3301      	adds	r3, #1
 800819e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 80081a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a6:	1cba      	adds	r2, r7, #2
 80081a8:	7812      	ldrb	r2, [r2, #0]
 80081aa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80081ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081b0:	3301      	adds	r3, #1
 80081b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081ba:	2218      	movs	r2, #24
 80081bc:	2100      	movs	r1, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fffa 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081c4:	233f      	movs	r3, #63	; 0x3f
 80081c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 80081ca:	2397      	movs	r3, #151	; 0x97
 80081cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80081d0:	230f      	movs	r3, #15
 80081d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80081d6:	f107 0310 	add.w	r3, r7, #16
 80081da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80081de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80081e6:	f107 030f 	add.w	r3, r7, #15
 80081ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80081ee:	2301      	movs	r3, #1
 80081f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081f8:	2100      	movs	r1, #0
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fea0 	bl	8008f40 <hci_send_req>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	da01      	bge.n	800820a <aci_gap_start_general_discovery_proc+0xe0>
    return BLE_STATUS_TIMEOUT;
 8008206:	23ff      	movs	r3, #255	; 0xff
 8008208:	e002      	b.n	8008210 <aci_gap_start_general_discovery_proc+0xe6>
  return status;
 800820a:	f107 030f 	add.w	r3, r7, #15
 800820e:	781b      	ldrb	r3, [r3, #0]
}
 8008210:	4618      	mov	r0, r3
 8008212:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008216:	46bd      	mov	sp, r7
 8008218:	bdb0      	pop	{r4, r5, r7, pc}

0800821a <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 800821a:	b590      	push	{r4, r7, lr}
 800821c:	b0cf      	sub	sp, #316	; 0x13c
 800821e:	af00      	add	r7, sp, #0
 8008220:	4604      	mov	r4, r0
 8008222:	4608      	mov	r0, r1
 8008224:	4611      	mov	r1, r2
 8008226:	1d3a      	adds	r2, r7, #4
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	f107 030e 	add.w	r3, r7, #14
 800822e:	4622      	mov	r2, r4
 8008230:	801a      	strh	r2, [r3, #0]
 8008232:	f107 030c 	add.w	r3, r7, #12
 8008236:	4602      	mov	r2, r0
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	f107 030b 	add.w	r3, r7, #11
 800823e:	460a      	mov	r2, r1
 8008240:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8008242:	f107 0318 	add.w	r3, r7, #24
 8008246:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800824a:	f107 0317 	add.w	r3, r7, #23
 800824e:	2200      	movs	r2, #0
 8008250:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8008258:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800825c:	f107 020e 	add.w	r2, r7, #14
 8008260:	8812      	ldrh	r2, [r2, #0]
 8008262:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008264:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008268:	3302      	adds	r3, #2
 800826a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 800826e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008272:	f107 020c 	add.w	r2, r7, #12
 8008276:	8812      	ldrh	r2, [r2, #0]
 8008278:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800827a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800827e:	3302      	adds	r3, #2
 8008280:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 8008284:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008288:	f107 020b 	add.w	r2, r7, #11
 800828c:	7812      	ldrb	r2, [r2, #0]
 800828e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008290:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008294:	3301      	adds	r3, #1
 8008296:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 800829a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800829e:	1d58      	adds	r0, r3, #5
 80082a0:	1d3b      	adds	r3, r7, #4
 80082a2:	2206      	movs	r2, #6
 80082a4:	6819      	ldr	r1, [r3, #0]
 80082a6:	f000 ff77 	bl	8009198 <Osal_MemCpy>
  index_input += 6;
 80082aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082ae:	3306      	adds	r3, #6
 80082b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 80082b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082b8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80082bc:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80082be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082c2:	3301      	adds	r3, #1
 80082c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 80082c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082cc:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80082d0:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 80082d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082d6:	3302      	adds	r3, #2
 80082d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 80082dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082e0:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 80082e4:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 80082e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082ea:	3302      	adds	r3, #2
 80082ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 80082f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082f4:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 80082f8:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 80082fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082fe:	3302      	adds	r3, #2
 8008300:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 8008304:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008308:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 800830c:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800830e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008312:	3302      	adds	r3, #2
 8008314:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8008318:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800831c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008320:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8008322:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008326:	3302      	adds	r3, #2
 8008328:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 800832c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008330:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008334:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8008336:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800833a:	3302      	adds	r3, #2
 800833c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008340:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008344:	2218      	movs	r2, #24
 8008346:	2100      	movs	r1, #0
 8008348:	4618      	mov	r0, r3
 800834a:	f000 ff35 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800834e:	233f      	movs	r3, #63	; 0x3f
 8008350:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8008354:	239c      	movs	r3, #156	; 0x9c
 8008356:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800835a:	230f      	movs	r3, #15
 800835c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8008360:	f107 0318 	add.w	r3, r7, #24
 8008364:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008368:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800836c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8008370:	f107 0317 	add.w	r3, r7, #23
 8008374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008378:	2301      	movs	r3, #1
 800837a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800837e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fddb 	bl	8008f40 <hci_send_req>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	da01      	bge.n	8008394 <aci_gap_create_connection+0x17a>
    return BLE_STATUS_TIMEOUT;
 8008390:	23ff      	movs	r3, #255	; 0xff
 8008392:	e002      	b.n	800839a <aci_gap_create_connection+0x180>
  return status;
 8008394:	f107 0317 	add.w	r3, r7, #23
 8008398:	781b      	ldrb	r3, [r3, #0]
}
 800839a:	4618      	mov	r0, r3
 800839c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd90      	pop	{r4, r7, pc}

080083a4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083ae:	f107 0308 	add.w	r3, r7, #8
 80083b2:	2218      	movs	r2, #24
 80083b4:	2100      	movs	r1, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fefe 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80083bc:	233f      	movs	r3, #63	; 0x3f
 80083be:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80083c0:	f240 1301 	movw	r3, #257	; 0x101
 80083c4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80083c6:	1dfb      	adds	r3, r7, #7
 80083c8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80083ca:	2301      	movs	r3, #1
 80083cc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083ce:	f107 0308 	add.w	r3, r7, #8
 80083d2:	2100      	movs	r1, #0
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fdb3 	bl	8008f40 <hci_send_req>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	da01      	bge.n	80083e4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80083e0:	23ff      	movs	r3, #255	; 0xff
 80083e2:	e000      	b.n	80083e6 <aci_gatt_init+0x42>
  return status;
 80083e4:	79fb      	ldrb	r3, [r7, #7]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3720      	adds	r7, #32
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80083ee:	b5b0      	push	{r4, r5, r7, lr}
 80083f0:	b0cc      	sub	sp, #304	; 0x130
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	4605      	mov	r5, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	4610      	mov	r0, r2
 80083fa:	4619      	mov	r1, r3
 80083fc:	1dbb      	adds	r3, r7, #6
 80083fe:	462a      	mov	r2, r5
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	1d3b      	adds	r3, r7, #4
 8008404:	4622      	mov	r2, r4
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	1cfb      	adds	r3, r7, #3
 800840a:	4602      	mov	r2, r0
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	1cbb      	adds	r3, r7, #2
 8008410:	460a      	mov	r2, r1
 8008412:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008414:	f107 0310 	add.w	r3, r7, #16
 8008418:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800841c:	f107 030f 	add.w	r3, r7, #15
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800842a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842e:	1dba      	adds	r2, r7, #6
 8008430:	8812      	ldrh	r2, [r2, #0]
 8008432:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008434:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008438:	3302      	adds	r3, #2
 800843a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800843e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008442:	1d3a      	adds	r2, r7, #4
 8008444:	8812      	ldrh	r2, [r2, #0]
 8008446:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008448:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800844c:	3302      	adds	r3, #2
 800844e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008456:	1cfa      	adds	r2, r7, #3
 8008458:	7812      	ldrb	r2, [r2, #0]
 800845a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800845c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008460:	3301      	adds	r3, #1
 8008462:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846a:	1cba      	adds	r2, r7, #2
 800846c:	7812      	ldrb	r2, [r2, #0]
 800846e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008470:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008474:	3301      	adds	r3, #1
 8008476:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800847a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800847e:	1d98      	adds	r0, r3, #6
 8008480:	1cbb      	adds	r3, r7, #2
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800848a:	f000 fe85 	bl	8009198 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800848e:	1cbb      	adds	r3, r7, #2
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008496:	4413      	add	r3, r2
 8008498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800849c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084a0:	2218      	movs	r2, #24
 80084a2:	2100      	movs	r1, #0
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 fe87 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80084aa:	233f      	movs	r3, #63	; 0x3f
 80084ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80084b0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80084b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80084b8:	f107 0310 	add.w	r3, r7, #16
 80084bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80084c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80084c8:	f107 030f 	add.w	r3, r7, #15
 80084cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80084d0:	2301      	movs	r3, #1
 80084d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084da:	2100      	movs	r1, #0
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fd2f 	bl	8008f40 <hci_send_req>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	da01      	bge.n	80084ec <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80084e8:	23ff      	movs	r3, #255	; 0xff
 80084ea:	e002      	b.n	80084f2 <aci_gatt_update_char_value+0x104>
  return status;
 80084ec:	f107 030f 	add.w	r3, r7, #15
 80084f0:	781b      	ldrb	r3, [r3, #0]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bdb0      	pop	{r4, r5, r7, pc}

080084fc <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b0cc      	sub	sp, #304	; 0x130
 8008500:	af00      	add	r7, sp, #0
 8008502:	4602      	mov	r2, r0
 8008504:	1dbb      	adds	r3, r7, #6
 8008506:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 8008508:	f107 0310 	add.w	r3, r7, #16
 800850c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008510:	f107 030f 	add.w	r3, r7, #15
 8008514:	2200      	movs	r2, #0
 8008516:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800851e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008522:	1dba      	adds	r2, r7, #6
 8008524:	8812      	ldrh	r2, [r2, #0]
 8008526:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008528:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800852c:	3302      	adds	r3, #2
 800852e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008532:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008536:	2218      	movs	r2, #24
 8008538:	2100      	movs	r1, #0
 800853a:	4618      	mov	r0, r3
 800853c:	f000 fe3c 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008540:	233f      	movs	r3, #63	; 0x3f
 8008542:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 8008546:	f44f 7389 	mov.w	r3, #274	; 0x112
 800854a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800854e:	230f      	movs	r3, #15
 8008550:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008554:	f107 0310 	add.w	r3, r7, #16
 8008558:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800855c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008560:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008564:	f107 030f 	add.w	r3, r7, #15
 8008568:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800856c:	2301      	movs	r3, #1
 800856e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008572:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008576:	2100      	movs	r1, #0
 8008578:	4618      	mov	r0, r3
 800857a:	f000 fce1 	bl	8008f40 <hci_send_req>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	da01      	bge.n	8008588 <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 8008584:	23ff      	movs	r3, #255	; 0xff
 8008586:	e002      	b.n	800858e <aci_gatt_disc_all_primary_services+0x92>
  return status;
 8008588:	f107 030f 	add.w	r3, r7, #15
 800858c:	781b      	ldrb	r3, [r3, #0]
}
 800858e:	4618      	mov	r0, r3
 8008590:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 8008598:	b590      	push	{r4, r7, lr}
 800859a:	b0cd      	sub	sp, #308	; 0x134
 800859c:	af00      	add	r7, sp, #0
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	4611      	mov	r1, r2
 80085a4:	1dbb      	adds	r3, r7, #6
 80085a6:	4622      	mov	r2, r4
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	1d3b      	adds	r3, r7, #4
 80085ac:	4602      	mov	r2, r0
 80085ae:	801a      	strh	r2, [r3, #0]
 80085b0:	1cbb      	adds	r3, r7, #2
 80085b2:	460a      	mov	r2, r1
 80085b4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 80085b6:	f107 0310 	add.w	r3, r7, #16
 80085ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80085be:	f107 030f 	add.w	r3, r7, #15
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80085cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085d0:	1dba      	adds	r2, r7, #6
 80085d2:	8812      	ldrh	r2, [r2, #0]
 80085d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80085d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085da:	3302      	adds	r3, #2
 80085dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 80085e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e4:	1d3a      	adds	r2, r7, #4
 80085e6:	8812      	ldrh	r2, [r2, #0]
 80085e8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80085ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085ee:	3302      	adds	r3, #2
 80085f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80085f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085f8:	1cba      	adds	r2, r7, #2
 80085fa:	8812      	ldrh	r2, [r2, #0]
 80085fc:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80085fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008602:	3302      	adds	r3, #2
 8008604:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008608:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800860c:	2218      	movs	r2, #24
 800860e:	2100      	movs	r1, #0
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fdd1 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008616:	233f      	movs	r3, #63	; 0x3f
 8008618:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 800861c:	f240 1315 	movw	r3, #277	; 0x115
 8008620:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008624:	230f      	movs	r3, #15
 8008626:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800862a:	f107 0310 	add.w	r3, r7, #16
 800862e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008632:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008636:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800863a:	f107 030f 	add.w	r3, r7, #15
 800863e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008642:	2301      	movs	r3, #1
 8008644:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008648:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800864c:	2100      	movs	r1, #0
 800864e:	4618      	mov	r0, r3
 8008650:	f000 fc76 	bl	8008f40 <hci_send_req>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	da01      	bge.n	800865e <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 800865a:	23ff      	movs	r3, #255	; 0xff
 800865c:	e002      	b.n	8008664 <aci_gatt_disc_all_char_of_service+0xcc>
  return status;
 800865e:	f107 030f 	add.w	r3, r7, #15
 8008662:	781b      	ldrb	r3, [r3, #0]
}
 8008664:	4618      	mov	r0, r3
 8008666:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800866a:	46bd      	mov	sp, r7
 800866c:	bd90      	pop	{r4, r7, pc}

0800866e <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 800866e:	b590      	push	{r4, r7, lr}
 8008670:	b0cd      	sub	sp, #308	; 0x134
 8008672:	af00      	add	r7, sp, #0
 8008674:	4604      	mov	r4, r0
 8008676:	4608      	mov	r0, r1
 8008678:	4611      	mov	r1, r2
 800867a:	1dbb      	adds	r3, r7, #6
 800867c:	4622      	mov	r2, r4
 800867e:	801a      	strh	r2, [r3, #0]
 8008680:	1d3b      	adds	r3, r7, #4
 8008682:	4602      	mov	r2, r0
 8008684:	801a      	strh	r2, [r3, #0]
 8008686:	1cbb      	adds	r3, r7, #2
 8008688:	460a      	mov	r2, r1
 800868a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800868c:	f107 0310 	add.w	r3, r7, #16
 8008690:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008694:	f107 030f 	add.w	r3, r7, #15
 8008698:	2200      	movs	r2, #0
 800869a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80086a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086a6:	1dba      	adds	r2, r7, #6
 80086a8:	8812      	ldrh	r2, [r2, #0]
 80086aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80086ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086b0:	3302      	adds	r3, #2
 80086b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80086b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ba:	1d3a      	adds	r2, r7, #4
 80086bc:	8812      	ldrh	r2, [r2, #0]
 80086be:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80086c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086c4:	3302      	adds	r3, #2
 80086c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80086ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ce:	1cba      	adds	r2, r7, #2
 80086d0:	8812      	ldrh	r2, [r2, #0]
 80086d2:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80086d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086d8:	3302      	adds	r3, #2
 80086da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086e2:	2218      	movs	r2, #24
 80086e4:	2100      	movs	r1, #0
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fd66 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80086ec:	233f      	movs	r3, #63	; 0x3f
 80086ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 80086f2:	f240 1317 	movw	r3, #279	; 0x117
 80086f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80086fa:	230f      	movs	r3, #15
 80086fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008700:	f107 0310 	add.w	r3, r7, #16
 8008704:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800870c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008710:	f107 030f 	add.w	r3, r7, #15
 8008714:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008718:	2301      	movs	r3, #1
 800871a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800871e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008722:	2100      	movs	r1, #0
 8008724:	4618      	mov	r0, r3
 8008726:	f000 fc0b 	bl	8008f40 <hci_send_req>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	da01      	bge.n	8008734 <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 8008730:	23ff      	movs	r3, #255	; 0xff
 8008732:	e002      	b.n	800873a <aci_gatt_disc_all_char_desc+0xcc>
  return status;
 8008734:	f107 030f 	add.w	r3, r7, #15
 8008738:	781b      	ldrb	r3, [r3, #0]
}
 800873a:	4618      	mov	r0, r3
 800873c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008740:	46bd      	mov	sp, r7
 8008742:	bd90      	pop	{r4, r7, pc}

08008744 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 8008744:	b590      	push	{r4, r7, lr}
 8008746:	b0cf      	sub	sp, #316	; 0x13c
 8008748:	af00      	add	r7, sp, #0
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	1d3a      	adds	r2, r7, #4
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	f107 030e 	add.w	r3, r7, #14
 8008758:	4622      	mov	r2, r4
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	f107 030c 	add.w	r3, r7, #12
 8008760:	4602      	mov	r2, r0
 8008762:	801a      	strh	r2, [r3, #0]
 8008764:	f107 030b 	add.w	r3, r7, #11
 8008768:	460a      	mov	r2, r1
 800876a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800876c:	f107 0318 	add.w	r3, r7, #24
 8008770:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008774:	f107 0317 	add.w	r3, r7, #23
 8008778:	2200      	movs	r2, #0
 800877a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008782:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008786:	f107 020e 	add.w	r2, r7, #14
 800878a:	8812      	ldrh	r2, [r2, #0]
 800878c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800878e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008792:	3302      	adds	r3, #2
 8008794:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 8008798:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800879c:	f107 020c 	add.w	r2, r7, #12
 80087a0:	8812      	ldrh	r2, [r2, #0]
 80087a2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80087a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80087a8:	3302      	adds	r3, #2
 80087aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80087ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80087b2:	f107 020b 	add.w	r2, r7, #11
 80087b6:	7812      	ldrb	r2, [r2, #0]
 80087b8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80087ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80087be:	3301      	adds	r3, #1
 80087c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80087c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80087c8:	1d58      	adds	r0, r3, #5
 80087ca:	f107 030b 	add.w	r3, r7, #11
 80087ce:	781a      	ldrb	r2, [r3, #0]
 80087d0:	1d3b      	adds	r3, r7, #4
 80087d2:	6819      	ldr	r1, [r3, #0]
 80087d4:	f000 fce0 	bl	8009198 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80087d8:	f107 030b 	add.w	r3, r7, #11
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80087e2:	4413      	add	r3, r2
 80087e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80087ec:	2218      	movs	r2, #24
 80087ee:	2100      	movs	r1, #0
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 fce1 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80087f6:	233f      	movs	r3, #63	; 0x3f
 80087f8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 80087fc:	f240 1321 	movw	r3, #289	; 0x121
 8008800:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8008804:	230f      	movs	r3, #15
 8008806:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800880a:	f107 0318 	add.w	r3, r7, #24
 800880e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008812:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008816:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800881a:	f107 0317 	add.w	r3, r7, #23
 800881e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008822:	2301      	movs	r3, #1
 8008824:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008828:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800882c:	2100      	movs	r1, #0
 800882e:	4618      	mov	r0, r3
 8008830:	f000 fb86 	bl	8008f40 <hci_send_req>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	da01      	bge.n	800883e <aci_gatt_write_char_desc+0xfa>
    return BLE_STATUS_TIMEOUT;
 800883a:	23ff      	movs	r3, #255	; 0xff
 800883c:	e002      	b.n	8008844 <aci_gatt_write_char_desc+0x100>
  return status;
 800883e:	f107 0317 	add.w	r3, r7, #23
 8008842:	781b      	ldrb	r3, [r3, #0]
}
 8008844:	4618      	mov	r0, r3
 8008846:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800884a:	46bd      	mov	sp, r7
 800884c:	bd90      	pop	{r4, r7, pc}

0800884e <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 800884e:	b590      	push	{r4, r7, lr}
 8008850:	b0cf      	sub	sp, #316	; 0x13c
 8008852:	af00      	add	r7, sp, #0
 8008854:	4604      	mov	r4, r0
 8008856:	4608      	mov	r0, r1
 8008858:	4611      	mov	r1, r2
 800885a:	1d3a      	adds	r2, r7, #4
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	f107 030e 	add.w	r3, r7, #14
 8008862:	4622      	mov	r2, r4
 8008864:	801a      	strh	r2, [r3, #0]
 8008866:	f107 030c 	add.w	r3, r7, #12
 800886a:	4602      	mov	r2, r0
 800886c:	801a      	strh	r2, [r3, #0]
 800886e:	f107 030b 	add.w	r3, r7, #11
 8008872:	460a      	mov	r2, r1
 8008874:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 8008876:	f107 0318 	add.w	r3, r7, #24
 800887a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800887e:	f107 0317 	add.w	r3, r7, #23
 8008882:	2200      	movs	r2, #0
 8008884:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800888c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008890:	f107 020e 	add.w	r2, r7, #14
 8008894:	8812      	ldrh	r2, [r2, #0]
 8008896:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008898:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800889c:	3302      	adds	r3, #2
 800889e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 80088a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088a6:	f107 020c 	add.w	r2, r7, #12
 80088aa:	8812      	ldrh	r2, [r2, #0]
 80088ac:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80088ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80088b2:	3302      	adds	r3, #2
 80088b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80088b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088bc:	f107 020b 	add.w	r2, r7, #11
 80088c0:	7812      	ldrb	r2, [r2, #0]
 80088c2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80088c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80088c8:	3301      	adds	r3, #1
 80088ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80088ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088d2:	1d58      	adds	r0, r3, #5
 80088d4:	f107 030b 	add.w	r3, r7, #11
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	1d3b      	adds	r3, r7, #4
 80088dc:	6819      	ldr	r1, [r3, #0]
 80088de:	f000 fc5b 	bl	8009198 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80088e2:	f107 030b 	add.w	r3, r7, #11
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80088ec:	4413      	add	r3, r2
 80088ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80088f6:	2218      	movs	r2, #24
 80088f8:	2100      	movs	r1, #0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fc5c 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008900:	233f      	movs	r3, #63	; 0x3f
 8008902:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 8008906:	f240 1323 	movw	r3, #291	; 0x123
 800890a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800890e:	f107 0318 	add.w	r3, r7, #24
 8008912:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008916:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800891a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800891e:	f107 0317 	add.w	r3, r7, #23
 8008922:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008926:	2301      	movs	r3, #1
 8008928:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800892c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008930:	2100      	movs	r1, #0
 8008932:	4618      	mov	r0, r3
 8008934:	f000 fb04 	bl	8008f40 <hci_send_req>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	da01      	bge.n	8008942 <aci_gatt_write_without_resp+0xf4>
    return BLE_STATUS_TIMEOUT;
 800893e:	23ff      	movs	r3, #255	; 0xff
 8008940:	e002      	b.n	8008948 <aci_gatt_write_without_resp+0xfa>
  return status;
 8008942:	f107 0317 	add.w	r3, r7, #23
 8008946:	781b      	ldrb	r3, [r3, #0]
}
 8008948:	4618      	mov	r0, r3
 800894a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800894e:	46bd      	mov	sp, r7
 8008950:	bd90      	pop	{r4, r7, pc}

08008952 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b0cc      	sub	sp, #304	; 0x130
 8008956:	af00      	add	r7, sp, #0
 8008958:	463b      	mov	r3, r7
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	1dfb      	adds	r3, r7, #7
 800895e:	4602      	mov	r2, r0
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	1dbb      	adds	r3, r7, #6
 8008964:	460a      	mov	r2, r1
 8008966:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008968:	f107 0310 	add.w	r3, r7, #16
 800896c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008970:	f107 030f 	add.w	r3, r7, #15
 8008974:	2200      	movs	r2, #0
 8008976:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800897e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008982:	1dfa      	adds	r2, r7, #7
 8008984:	7812      	ldrb	r2, [r2, #0]
 8008986:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008988:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800898c:	3301      	adds	r3, #1
 800898e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008996:	1dba      	adds	r2, r7, #6
 8008998:	7812      	ldrb	r2, [r2, #0]
 800899a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800899c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089a0:	3301      	adds	r3, #1
 80089a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80089a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089aa:	1c98      	adds	r0, r3, #2
 80089ac:	1dbb      	adds	r3, r7, #6
 80089ae:	781a      	ldrb	r2, [r3, #0]
 80089b0:	463b      	mov	r3, r7
 80089b2:	6819      	ldr	r1, [r3, #0]
 80089b4:	f000 fbf0 	bl	8009198 <Osal_MemCpy>
  index_input += Length;
 80089b8:	1dbb      	adds	r3, r7, #6
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80089c0:	4413      	add	r3, r2
 80089c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089ca:	2218      	movs	r2, #24
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fbf2 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80089d4:	233f      	movs	r3, #63	; 0x3f
 80089d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80089da:	230c      	movs	r3, #12
 80089dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089e0:	f107 0310 	add.w	r3, r7, #16
 80089e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089f0:	f107 030f 	add.w	r3, r7, #15
 80089f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089f8:	2301      	movs	r3, #1
 80089fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a02:	2100      	movs	r1, #0
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fa9b 	bl	8008f40 <hci_send_req>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	da01      	bge.n	8008a14 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008a10:	23ff      	movs	r3, #255	; 0xff
 8008a12:	e002      	b.n	8008a1a <aci_hal_write_config_data+0xc8>
  return status;
 8008a14:	f107 030f 	add.w	r3, r7, #15
 8008a18:	781b      	ldrb	r3, [r3, #0]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b0cc      	sub	sp, #304	; 0x130
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	1dfb      	adds	r3, r7, #7
 8008a2e:	701a      	strb	r2, [r3, #0]
 8008a30:	1dbb      	adds	r3, r7, #6
 8008a32:	460a      	mov	r2, r1
 8008a34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008a36:	f107 0310 	add.w	r3, r7, #16
 8008a3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a3e:	f107 030f 	add.w	r3, r7, #15
 8008a42:	2200      	movs	r2, #0
 8008a44:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a50:	1dfa      	adds	r2, r7, #7
 8008a52:	7812      	ldrb	r2, [r2, #0]
 8008a54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a64:	1dba      	adds	r2, r7, #6
 8008a66:	7812      	ldrb	r2, [r2, #0]
 8008a68:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a6e:	3301      	adds	r3, #1
 8008a70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a78:	2218      	movs	r2, #24
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fb9b 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a82:	233f      	movs	r3, #63	; 0x3f
 8008a84:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008a88:	230f      	movs	r3, #15
 8008a8a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a8e:	f107 0310 	add.w	r3, r7, #16
 8008a92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008a9e:	f107 030f 	add.w	r3, r7, #15
 8008aa2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008aac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fa44 	bl	8008f40 <hci_send_req>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	da01      	bge.n	8008ac2 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8008abe:	23ff      	movs	r3, #255	; 0xff
 8008ac0:	e002      	b.n	8008ac8 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8008ac2:	f107 030f 	add.w	r3, r7, #15
 8008ac6:	781b      	ldrb	r3, [r3, #0]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b0cc      	sub	sp, #304	; 0x130
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	4602      	mov	r2, r0
 8008ada:	1dbb      	adds	r3, r7, #6
 8008adc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008ade:	f107 0310 	add.w	r3, r7, #16
 8008ae2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ae6:	f107 030f 	add.w	r3, r7, #15
 8008aea:	2200      	movs	r2, #0
 8008aec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008aee:	2300      	movs	r3, #0
 8008af0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af8:	1dba      	adds	r2, r7, #6
 8008afa:	8812      	ldrh	r2, [r2, #0]
 8008afc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008afe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b02:	3302      	adds	r3, #2
 8008b04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b0c:	2218      	movs	r2, #24
 8008b0e:	2100      	movs	r1, #0
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fb51 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b16:	233f      	movs	r3, #63	; 0x3f
 8008b18:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008b1c:	2318      	movs	r3, #24
 8008b1e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b22:	f107 0310 	add.w	r3, r7, #16
 8008b26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b32:	f107 030f 	add.w	r3, r7, #15
 8008b36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f9fa 	bl	8008f40 <hci_send_req>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	da01      	bge.n	8008b56 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8008b52:	23ff      	movs	r3, #255	; 0xff
 8008b54:	e002      	b.n	8008b5c <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8008b56:	f107 030f 	add.w	r3, r7, #15
 8008b5a:	781b      	ldrb	r3, [r3, #0]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b088      	sub	sp, #32
 8008b6a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b70:	f107 0308 	add.w	r3, r7, #8
 8008b74:	2218      	movs	r2, #24
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fb1d 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x03;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008b82:	2303      	movs	r3, #3
 8008b84:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008b86:	1dfb      	adds	r3, r7, #7
 8008b88:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b8e:	f107 0308 	add.w	r3, r7, #8
 8008b92:	2100      	movs	r1, #0
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 f9d3 	bl	8008f40 <hci_send_req>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	da01      	bge.n	8008ba4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008ba0:	23ff      	movs	r3, #255	; 0xff
 8008ba2:	e000      	b.n	8008ba6 <hci_reset+0x40>
  return status;
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3720      	adds	r7, #32
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 8008bae:	b5b0      	push	{r4, r5, r7, lr}
 8008bb0:	b0cc      	sub	sp, #304	; 0x130
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	4610      	mov	r0, r2
 8008bba:	4619      	mov	r1, r3
 8008bbc:	1dbb      	adds	r3, r7, #6
 8008bbe:	462a      	mov	r2, r5
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	1d3b      	adds	r3, r7, #4
 8008bc4:	4622      	mov	r2, r4
 8008bc6:	801a      	strh	r2, [r3, #0]
 8008bc8:	1cbb      	adds	r3, r7, #2
 8008bca:	4602      	mov	r2, r0
 8008bcc:	801a      	strh	r2, [r3, #0]
 8008bce:	463b      	mov	r3, r7
 8008bd0:	460a      	mov	r2, r1
 8008bd2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 8008bd4:	f107 0310 	add.w	r3, r7, #16
 8008bd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008bdc:	f107 030f 	add.w	r3, r7, #15
 8008be0:	2200      	movs	r2, #0
 8008be2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bee:	1dba      	adds	r2, r7, #6
 8008bf0:	8812      	ldrh	r2, [r2, #0]
 8008bf2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008bf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bf8:	3302      	adds	r3, #2
 8008bfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c02:	1d3a      	adds	r2, r7, #4
 8008c04:	8812      	ldrh	r2, [r2, #0]
 8008c06:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c0c:	3302      	adds	r3, #2
 8008c0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8008c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c16:	1cba      	adds	r2, r7, #2
 8008c18:	8812      	ldrh	r2, [r2, #0]
 8008c1a:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c20:	3302      	adds	r3, #2
 8008c22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8008c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c2a:	463a      	mov	r2, r7
 8008c2c:	8812      	ldrh	r2, [r2, #0]
 8008c2e:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8008c30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c34:	3302      	adds	r3, #2
 8008c36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8008c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c3e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008c42:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8008c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c48:	3302      	adds	r3, #2
 8008c4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8008c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c52:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8008c56:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 8008c58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8008c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c66:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 8008c6a:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8008c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c70:	3302      	adds	r3, #2
 8008c72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 8008c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c7a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008c7e:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 8008c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c84:	3301      	adds	r3, #1
 8008c86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 8008c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c8e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008c92:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 8008c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c98:	3301      	adds	r3, #1
 8008c9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ca2:	2218      	movs	r2, #24
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 fa86 	bl	80091b8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cac:	233f      	movs	r3, #63	; 0x3f
 8008cae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 8008cb2:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8008cb6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008cba:	f107 0310 	add.w	r3, r7, #16
 8008cbe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008cc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008cca:	f107 030f 	add.w	r3, r7, #15
 8008cce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008cd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f92e 	bl	8008f40 <hci_send_req>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	da01      	bge.n	8008cee <aci_l2cap_connection_parameter_update_resp+0x140>
    return BLE_STATUS_TIMEOUT;
 8008cea:	23ff      	movs	r3, #255	; 0xff
 8008cec:	e002      	b.n	8008cf4 <aci_l2cap_connection_parameter_update_resp+0x146>
  return status;
 8008cee:	f107 030f 	add.w	r3, r7, #15
 8008cf2:	781b      	ldrb	r3, [r3, #0]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008d00 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d06:	f3ef 8310 	mrs	r3, PRIMASK
 8008d0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8008d0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d10:	b672      	cpsid	i
}
 8008d12:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8008d14:	1cbb      	adds	r3, r7, #2
 8008d16:	4619      	mov	r1, r3
 8008d18:	4812      	ldr	r0, [pc, #72]	; (8008d64 <DbgTrace_TxCpltCallback+0x64>)
 8008d1a:	f000 fefe 	bl	8009b1a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8008d1e:	1cbb      	adds	r3, r7, #2
 8008d20:	4619      	mov	r1, r3
 8008d22:	4810      	ldr	r0, [pc, #64]	; (8008d64 <DbgTrace_TxCpltCallback+0x64>)
 8008d24:	f000 ffed 	bl	8009d02 <CircularQueue_Sense>
 8008d28:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00c      	beq.n	8008d4a <DbgTrace_TxCpltCallback+0x4a>
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f383 8810 	msr	PRIMASK, r3
}
 8008d3a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8008d3c:	887b      	ldrh	r3, [r7, #2]
 8008d3e:	4a0a      	ldr	r2, [pc, #40]	; (8008d68 <DbgTrace_TxCpltCallback+0x68>)
 8008d40:	4619      	mov	r1, r3
 8008d42:	6938      	ldr	r0, [r7, #16]
 8008d44:	f7f7 fd19 	bl	800077a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8008d48:	e008      	b.n	8008d5c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8008d4a:	4b08      	ldr	r3, [pc, #32]	; (8008d6c <DbgTrace_TxCpltCallback+0x6c>)
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	701a      	strb	r2, [r3, #0]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f383 8810 	msr	PRIMASK, r3
}
 8008d5a:	bf00      	nop
}
 8008d5c:	bf00      	nop
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20000254 	.word	0x20000254
 8008d68:	08008d01 	.word	0x08008d01
 8008d6c:	20000025 	.word	0x20000025

08008d70 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8008d76:	f7f7 fcfa 	bl	800076e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d84:	4903      	ldr	r1, [pc, #12]	; (8008d94 <DbgTraceInit+0x24>)
 8008d86:	4804      	ldr	r0, [pc, #16]	; (8008d98 <DbgTraceInit+0x28>)
 8008d88:	f000 fc6e 	bl	8009668 <CircularQueue_Init>
#endif 
#endif
  return;
 8008d8c:	bf00      	nop
}
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	20000274 	.word	0x20000274
 8008d98:	20000254 	.word	0x20000254

08008d9c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	68b9      	ldr	r1, [r7, #8]
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 f805 	bl	8008dbc <DbgTraceWrite>
 8008db2:	4603      	mov	r3, r0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08a      	sub	sp, #40	; 0x28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8008dd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8008dd2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8008dd4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ddc:	d102      	bne.n	8008de4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24
 8008de2:	e037      	b.n	8008e54 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d006      	beq.n	8008df8 <DbgTraceWrite+0x3c>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d003      	beq.n	8008df8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8008df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24
 8008df6:	e02d      	b.n	8008e54 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d02a      	beq.n	8008e54 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8008e02:	b672      	cpsid	i
}
 8008e04:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	68b9      	ldr	r1, [r7, #8]
 8008e0e:	4814      	ldr	r0, [pc, #80]	; (8008e60 <DbgTraceWrite+0xa4>)
 8008e10:	f000 fc5c 	bl	80096cc <CircularQueue_Add>
 8008e14:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d015      	beq.n	8008e48 <DbgTraceWrite+0x8c>
 8008e1c:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <DbgTraceWrite+0xa8>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d010      	beq.n	8008e48 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8008e26:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <DbgTraceWrite+0xa8>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	701a      	strb	r2, [r3, #0]
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f383 8810 	msr	PRIMASK, r3
}
 8008e36:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	4a0a      	ldr	r2, [pc, #40]	; (8008e68 <DbgTraceWrite+0xac>)
 8008e3e:	4619      	mov	r1, r3
 8008e40:	69f8      	ldr	r0, [r7, #28]
 8008e42:	f7f7 fc9a 	bl	800077a <DbgOutputTraces>
 8008e46:	e005      	b.n	8008e54 <DbgTraceWrite+0x98>
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f383 8810 	msr	PRIMASK, r3
}
 8008e52:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3728      	adds	r7, #40	; 0x28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20000254 	.word	0x20000254
 8008e64:	20000025 	.word	0x20000025
 8008e68:	08008d01 	.word	0x08008d01

08008e6c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	4a08      	ldr	r2, [pc, #32]	; (8008e9c <hci_init+0x30>)
 8008e7c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008e7e:	4a08      	ldr	r2, [pc, #32]	; (8008ea0 <hci_init+0x34>)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008e84:	4806      	ldr	r0, [pc, #24]	; (8008ea0 <hci_init+0x34>)
 8008e86:	f000 f973 	bl	8009170 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 f8d4 	bl	800903c <TlInit>

  return;
 8008e94:	bf00      	nop
}
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	2000129c 	.word	0x2000129c
 8008ea0:	20001274 	.word	0x20001274

08008ea4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008eaa:	4822      	ldr	r0, [pc, #136]	; (8008f34 <hci_user_evt_proc+0x90>)
 8008eac:	f000 fb2e 	bl	800950c <LST_is_empty>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d12b      	bne.n	8008f0e <hci_user_evt_proc+0x6a>
 8008eb6:	4b20      	ldr	r3, [pc, #128]	; (8008f38 <hci_user_evt_proc+0x94>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d027      	beq.n	8008f0e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008ebe:	f107 030c 	add.w	r3, r7, #12
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	481b      	ldr	r0, [pc, #108]	; (8008f34 <hci_user_evt_proc+0x90>)
 8008ec6:	f000 fbb0 	bl	800962a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008eca:	4b1c      	ldr	r3, [pc, #112]	; (8008f3c <hci_user_evt_proc+0x98>)
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00c      	beq.n	8008eec <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008eda:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <hci_user_evt_proc+0x98>)
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	1d3a      	adds	r2, r7, #4
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008ee4:	793a      	ldrb	r2, [r7, #4]
 8008ee6:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <hci_user_evt_proc+0x94>)
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	e002      	b.n	8008ef2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008eec:	4b12      	ldr	r3, [pc, #72]	; (8008f38 <hci_user_evt_proc+0x94>)
 8008eee:	2201      	movs	r2, #1
 8008ef0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008ef2:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <hci_user_evt_proc+0x94>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d004      	beq.n	8008f04 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 fa71 	bl	800a3e4 <TL_MM_EvtDone>
 8008f02:	e004      	b.n	8008f0e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4619      	mov	r1, r3
 8008f08:	480a      	ldr	r0, [pc, #40]	; (8008f34 <hci_user_evt_proc+0x90>)
 8008f0a:	f000 fb21 	bl	8009550 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008f0e:	4809      	ldr	r0, [pc, #36]	; (8008f34 <hci_user_evt_proc+0x90>)
 8008f10:	f000 fafc 	bl	800950c <LST_is_empty>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d107      	bne.n	8008f2a <hci_user_evt_proc+0x86>
 8008f1a:	4b07      	ldr	r3, [pc, #28]	; (8008f38 <hci_user_evt_proc+0x94>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008f22:	4804      	ldr	r0, [pc, #16]	; (8008f34 <hci_user_evt_proc+0x90>)
 8008f24:	f7f9 fe6a 	bl	8002bfc <hci_notify_asynch_evt>
  }


  return;
 8008f28:	bf00      	nop
 8008f2a:	bf00      	nop
}
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	200001d0 	.word	0x200001d0
 8008f38:	200001dc 	.word	0x200001dc
 8008f3c:	20001274 	.word	0x20001274

08008f40 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f000 f8cb 	bl	80090e8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008f52:	2300      	movs	r3, #0
 8008f54:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	885b      	ldrh	r3, [r3, #2]
 8008f5a:	b21b      	sxth	r3, r3
 8008f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f60:	b21a      	sxth	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	029b      	lsls	r3, r3, #10
 8008f68:	b21b      	sxth	r3, r3
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	b21b      	sxth	r3, r3
 8008f6e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	b2d9      	uxtb	r1, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689a      	ldr	r2, [r3, #8]
 8008f7a:	8bbb      	ldrh	r3, [r7, #28]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 f88d 	bl	800909c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008f82:	e04e      	b.n	8009022 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008f84:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008f88:	f7f9 fe4f 	bl	8002c2a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008f8c:	e043      	b.n	8009016 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008f8e:	f107 030c 	add.w	r3, r7, #12
 8008f92:	4619      	mov	r1, r3
 8008f94:	4828      	ldr	r0, [pc, #160]	; (8009038 <hci_send_req+0xf8>)
 8008f96:	f000 fb48 	bl	800962a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	7a5b      	ldrb	r3, [r3, #9]
 8008f9e:	2b0f      	cmp	r3, #15
 8008fa0:	d114      	bne.n	8008fcc <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	330b      	adds	r3, #11
 8008fa6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	885b      	ldrh	r3, [r3, #2]
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	8bba      	ldrh	r2, [r7, #28]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d104      	bne.n	8008fbe <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	7812      	ldrb	r2, [r2, #0]
 8008fbc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d027      	beq.n	8009016 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	77fb      	strb	r3, [r7, #31]
 8008fca:	e024      	b.n	8009016 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	330b      	adds	r3, #11
 8008fd0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	8bba      	ldrh	r2, [r7, #28]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d114      	bne.n	800900a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	7a9b      	ldrb	r3, [r3, #10]
 8008fe4:	3b03      	subs	r3, #3
 8008fe6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	695a      	ldr	r2, [r3, #20]
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	bfa8      	it	ge
 8008ff2:	461a      	movge	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6918      	ldr	r0, [r3, #16]
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	1cd9      	adds	r1, r3, #3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	461a      	mov	r2, r3
 8009006:	f001 fd39 	bl	800aa7c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009012:	2301      	movs	r3, #1
 8009014:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009016:	4808      	ldr	r0, [pc, #32]	; (8009038 <hci_send_req+0xf8>)
 8009018:	f000 fa78 	bl	800950c <LST_is_empty>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0b5      	beq.n	8008f8e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009022:	7ffb      	ldrb	r3, [r7, #31]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0ad      	beq.n	8008f84 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009028:	2001      	movs	r0, #1
 800902a:	f000 f85d 	bl	80090e8 <NotifyCmdStatus>

  return 0;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3720      	adds	r7, #32
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	20001294 	.word	0x20001294

0800903c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009044:	480f      	ldr	r0, [pc, #60]	; (8009084 <TlInit+0x48>)
 8009046:	f000 fa51 	bl	80094ec <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800904a:	4a0f      	ldr	r2, [pc, #60]	; (8009088 <TlInit+0x4c>)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009050:	480e      	ldr	r0, [pc, #56]	; (800908c <TlInit+0x50>)
 8009052:	f000 fa4b 	bl	80094ec <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009056:	4b0e      	ldr	r3, [pc, #56]	; (8009090 <TlInit+0x54>)
 8009058:	2201      	movs	r2, #1
 800905a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800905c:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <TlInit+0x58>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00a      	beq.n	800907a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009068:	4b0b      	ldr	r3, [pc, #44]	; (8009098 <TlInit+0x5c>)
 800906a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800906c:	4b09      	ldr	r3, [pc, #36]	; (8009094 <TlInit+0x58>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f107 0208 	add.w	r2, r7, #8
 8009074:	4610      	mov	r0, r2
 8009076:	4798      	blx	r3
  }

  return;
 8009078:	bf00      	nop
 800907a:	bf00      	nop
}
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	20001294 	.word	0x20001294
 8009088:	200001d8 	.word	0x200001d8
 800908c:	200001d0 	.word	0x200001d0
 8009090:	200001dc 	.word	0x200001dc
 8009094:	20001274 	.word	0x20001274
 8009098:	08009129 	.word	0x08009129

0800909c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	4603      	mov	r3, r0
 80090a4:	603a      	str	r2, [r7, #0]
 80090a6:	80fb      	strh	r3, [r7, #6]
 80090a8:	460b      	mov	r3, r1
 80090aa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80090ac:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <SendCmd+0x44>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	88fa      	ldrh	r2, [r7, #6]
 80090b2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80090b6:	4b0a      	ldr	r3, [pc, #40]	; (80090e0 <SendCmd+0x44>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	797a      	ldrb	r2, [r7, #5]
 80090bc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80090be:	4b08      	ldr	r3, [pc, #32]	; (80090e0 <SendCmd+0x44>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	330c      	adds	r3, #12
 80090c4:	797a      	ldrb	r2, [r7, #5]
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 fcd7 	bl	800aa7c <memcpy>

  hciContext.io.Send(0,0);
 80090ce:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <SendCmd+0x48>)
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2100      	movs	r1, #0
 80090d4:	2000      	movs	r0, #0
 80090d6:	4798      	blx	r3

  return;
 80090d8:	bf00      	nop
}
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	200001d8 	.word	0x200001d8
 80090e4:	20001274 	.word	0x20001274

080090e8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80090f2:	79fb      	ldrb	r3, [r7, #7]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d108      	bne.n	800910a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80090f8:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <NotifyCmdStatus+0x3c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00d      	beq.n	800911c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009100:	4b08      	ldr	r3, [pc, #32]	; (8009124 <NotifyCmdStatus+0x3c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2000      	movs	r0, #0
 8009106:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009108:	e008      	b.n	800911c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800910a:	4b06      	ldr	r3, [pc, #24]	; (8009124 <NotifyCmdStatus+0x3c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d004      	beq.n	800911c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009112:	4b04      	ldr	r3, [pc, #16]	; (8009124 <NotifyCmdStatus+0x3c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2001      	movs	r0, #1
 8009118:	4798      	blx	r3
  return;
 800911a:	bf00      	nop
 800911c:	bf00      	nop
}
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	2000129c 	.word	0x2000129c

08009128 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	7a5b      	ldrb	r3, [r3, #9]
 8009134:	2b0f      	cmp	r3, #15
 8009136:	d003      	beq.n	8009140 <TlEvtReceived+0x18>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	7a5b      	ldrb	r3, [r3, #9]
 800913c:	2b0e      	cmp	r3, #14
 800913e:	d107      	bne.n	8009150 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009140:	6879      	ldr	r1, [r7, #4]
 8009142:	4809      	ldr	r0, [pc, #36]	; (8009168 <TlEvtReceived+0x40>)
 8009144:	f000 fa2a 	bl	800959c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009148:	2000      	movs	r0, #0
 800914a:	f7f9 fd63 	bl	8002c14 <hci_cmd_resp_release>
 800914e:	e006      	b.n	800915e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	4806      	ldr	r0, [pc, #24]	; (800916c <TlEvtReceived+0x44>)
 8009154:	f000 fa22 	bl	800959c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009158:	4804      	ldr	r0, [pc, #16]	; (800916c <TlEvtReceived+0x44>)
 800915a:	f7f9 fd4f 	bl	8002bfc <hci_notify_asynch_evt>
  }

  return;
 800915e:	bf00      	nop
}
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20001294 	.word	0x20001294
 800916c:	200001d0 	.word	0x200001d0

08009170 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a05      	ldr	r2, [pc, #20]	; (8009190 <hci_register_io_bus+0x20>)
 800917c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a04      	ldr	r2, [pc, #16]	; (8009194 <hci_register_io_bus+0x24>)
 8009182:	611a      	str	r2, [r3, #16]

  return;
 8009184:	bf00      	nop
}
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	0800a15d 	.word	0x0800a15d
 8009194:	0800a1c5 	.word	0x0800a1c5

08009198 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f001 fc67 	bl	800aa7c <memcpy>
 80091ae:	4603      	mov	r3, r0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	68b9      	ldr	r1, [r7, #8]
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f001 fc65 	bl	800aa98 <memset>
 80091ce:	4603      	mov	r3, r0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	4603      	mov	r3, r0
 80091e0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80091e2:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <OTP_Read+0x48>)
 80091e4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80091e6:	e002      	b.n	80091ee <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3b08      	subs	r3, #8
 80091ec:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3307      	adds	r3, #7
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	79fa      	ldrb	r2, [r7, #7]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d003      	beq.n	8009202 <OTP_Read+0x2a>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	4a09      	ldr	r2, [pc, #36]	; (8009224 <OTP_Read+0x4c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d1f2      	bne.n	80091e8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3307      	adds	r3, #7
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	79fa      	ldrb	r2, [r7, #7]
 800920a:	429a      	cmp	r2, r3
 800920c:	d001      	beq.n	8009212 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800920e:	2300      	movs	r3, #0
 8009210:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009212:	68fb      	ldr	r3, [r7, #12]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	1fff73f8 	.word	0x1fff73f8
 8009224:	1fff7000 	.word	0x1fff7000

08009228 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009230:	f107 030c 	add.w	r3, r7, #12
 8009234:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	2124      	movs	r1, #36	; 0x24
 8009240:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009244:	f000 f888 	bl	8009358 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	330b      	adds	r3, #11
 800924c:	78db      	ldrb	r3, [r3, #3]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b088      	sub	sp, #32
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800925e:	f107 030c 	add.w	r3, r7, #12
 8009262:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	210f      	movs	r1, #15
 800926e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009272:	f000 f871 	bl	8009358 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	330b      	adds	r3, #11
 800927a:	78db      	ldrb	r3, [r3, #3]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3720      	adds	r7, #32
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	4a08      	ldr	r2, [pc, #32]	; (80092b4 <shci_init+0x30>)
 8009294:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009296:	4a08      	ldr	r2, [pc, #32]	; (80092b8 <shci_init+0x34>)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800929c:	4806      	ldr	r0, [pc, #24]	; (80092b8 <shci_init+0x34>)
 800929e:	f000 f911 	bl	80094c4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 f894 	bl	80093d4 <TlInit>

  return;
 80092ac:	bf00      	nop
}
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	200012c0 	.word	0x200012c0
 80092b8:	200012a0 	.word	0x200012a0

080092bc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80092c2:	4822      	ldr	r0, [pc, #136]	; (800934c <shci_user_evt_proc+0x90>)
 80092c4:	f000 f922 	bl	800950c <LST_is_empty>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d12b      	bne.n	8009326 <shci_user_evt_proc+0x6a>
 80092ce:	4b20      	ldr	r3, [pc, #128]	; (8009350 <shci_user_evt_proc+0x94>)
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d027      	beq.n	8009326 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80092d6:	f107 030c 	add.w	r3, r7, #12
 80092da:	4619      	mov	r1, r3
 80092dc:	481b      	ldr	r0, [pc, #108]	; (800934c <shci_user_evt_proc+0x90>)
 80092de:	f000 f9a4 	bl	800962a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80092e2:	4b1c      	ldr	r3, [pc, #112]	; (8009354 <shci_user_evt_proc+0x98>)
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00c      	beq.n	8009304 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80092ee:	2301      	movs	r3, #1
 80092f0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80092f2:	4b18      	ldr	r3, [pc, #96]	; (8009354 <shci_user_evt_proc+0x98>)
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	1d3a      	adds	r2, r7, #4
 80092f8:	4610      	mov	r0, r2
 80092fa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80092fc:	793a      	ldrb	r2, [r7, #4]
 80092fe:	4b14      	ldr	r3, [pc, #80]	; (8009350 <shci_user_evt_proc+0x94>)
 8009300:	701a      	strb	r2, [r3, #0]
 8009302:	e002      	b.n	800930a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009304:	4b12      	ldr	r3, [pc, #72]	; (8009350 <shci_user_evt_proc+0x94>)
 8009306:	2201      	movs	r2, #1
 8009308:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800930a:	4b11      	ldr	r3, [pc, #68]	; (8009350 <shci_user_evt_proc+0x94>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d004      	beq.n	800931c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	4618      	mov	r0, r3
 8009316:	f001 f865 	bl	800a3e4 <TL_MM_EvtDone>
 800931a:	e004      	b.n	8009326 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4619      	mov	r1, r3
 8009320:	480a      	ldr	r0, [pc, #40]	; (800934c <shci_user_evt_proc+0x90>)
 8009322:	f000 f915 	bl	8009550 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009326:	4809      	ldr	r0, [pc, #36]	; (800934c <shci_user_evt_proc+0x90>)
 8009328:	f000 f8f0 	bl	800950c <LST_is_empty>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d107      	bne.n	8009342 <shci_user_evt_proc+0x86>
 8009332:	4b07      	ldr	r3, [pc, #28]	; (8009350 <shci_user_evt_proc+0x94>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800933a:	4804      	ldr	r0, [pc, #16]	; (800934c <shci_user_evt_proc+0x90>)
 800933c:	f7f7 fafb 	bl	8000936 <shci_notify_asynch_evt>
  }


  return;
 8009340:	bf00      	nop
 8009342:	bf00      	nop
}
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20000208 	.word	0x20000208
 8009350:	20000218 	.word	0x20000218
 8009354:	200012a0 	.word	0x200012a0

08009358 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	60ba      	str	r2, [r7, #8]
 8009360:	607b      	str	r3, [r7, #4]
 8009362:	4603      	mov	r3, r0
 8009364:	81fb      	strh	r3, [r7, #14]
 8009366:	460b      	mov	r3, r1
 8009368:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800936a:	2000      	movs	r0, #0
 800936c:	f000 f864 	bl	8009438 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009370:	4b16      	ldr	r3, [pc, #88]	; (80093cc <shci_send+0x74>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	89fa      	ldrh	r2, [r7, #14]
 8009376:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800937a:	4b14      	ldr	r3, [pc, #80]	; (80093cc <shci_send+0x74>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	7b7a      	ldrb	r2, [r7, #13]
 8009380:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009382:	4b12      	ldr	r3, [pc, #72]	; (80093cc <shci_send+0x74>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	330c      	adds	r3, #12
 8009388:	7b7a      	ldrb	r2, [r7, #13]
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	4618      	mov	r0, r3
 800938e:	f001 fb75 	bl	800aa7c <memcpy>

  shciContext.io.Send(0,0);
 8009392:	4b0f      	ldr	r3, [pc, #60]	; (80093d0 <shci_send+0x78>)
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	2100      	movs	r1, #0
 8009398:	2000      	movs	r0, #0
 800939a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800939c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80093a0:	f7f7 fae0 	bl	8000964 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f103 0008 	add.w	r0, r3, #8
 80093aa:	4b08      	ldr	r3, [pc, #32]	; (80093cc <shci_send+0x74>)
 80093ac:	6819      	ldr	r1, [r3, #0]
 80093ae:	4b07      	ldr	r3, [pc, #28]	; (80093cc <shci_send+0x74>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	789b      	ldrb	r3, [r3, #2]
 80093b4:	3303      	adds	r3, #3
 80093b6:	461a      	mov	r2, r3
 80093b8:	f001 fb60 	bl	800aa7c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80093bc:	2001      	movs	r0, #1
 80093be:	f000 f83b 	bl	8009438 <Cmd_SetStatus>

  return;
 80093c2:	bf00      	nop
}
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20000214 	.word	0x20000214
 80093d0:	200012a0 	.word	0x200012a0

080093d4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80093dc:	4a10      	ldr	r2, [pc, #64]	; (8009420 <TlInit+0x4c>)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80093e2:	4810      	ldr	r0, [pc, #64]	; (8009424 <TlInit+0x50>)
 80093e4:	f000 f882 	bl	80094ec <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80093e8:	2001      	movs	r0, #1
 80093ea:	f000 f825 	bl	8009438 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80093ee:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <TlInit+0x54>)
 80093f0:	2201      	movs	r2, #1
 80093f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80093f4:	4b0d      	ldr	r3, [pc, #52]	; (800942c <TlInit+0x58>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00c      	beq.n	8009416 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009400:	4b0b      	ldr	r3, [pc, #44]	; (8009430 <TlInit+0x5c>)
 8009402:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009404:	4b0b      	ldr	r3, [pc, #44]	; (8009434 <TlInit+0x60>)
 8009406:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009408:	4b08      	ldr	r3, [pc, #32]	; (800942c <TlInit+0x58>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f107 020c 	add.w	r2, r7, #12
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
  }

  return;
 8009414:	bf00      	nop
 8009416:	bf00      	nop
}
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20000214 	.word	0x20000214
 8009424:	20000208 	.word	0x20000208
 8009428:	20000218 	.word	0x20000218
 800942c:	200012a0 	.word	0x200012a0
 8009430:	08009489 	.word	0x08009489
 8009434:	080094a1 	.word	0x080094a1

08009438 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	4603      	mov	r3, r0
 8009440:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009442:	79fb      	ldrb	r3, [r7, #7]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10b      	bne.n	8009460 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009448:	4b0d      	ldr	r3, [pc, #52]	; (8009480 <Cmd_SetStatus+0x48>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009450:	4b0b      	ldr	r3, [pc, #44]	; (8009480 <Cmd_SetStatus+0x48>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2000      	movs	r0, #0
 8009456:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009458:	4b0a      	ldr	r3, [pc, #40]	; (8009484 <Cmd_SetStatus+0x4c>)
 800945a:	2200      	movs	r2, #0
 800945c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800945e:	e00b      	b.n	8009478 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009460:	4b08      	ldr	r3, [pc, #32]	; (8009484 <Cmd_SetStatus+0x4c>)
 8009462:	2201      	movs	r2, #1
 8009464:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009466:	4b06      	ldr	r3, [pc, #24]	; (8009480 <Cmd_SetStatus+0x48>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d004      	beq.n	8009478 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800946e:	4b04      	ldr	r3, [pc, #16]	; (8009480 <Cmd_SetStatus+0x48>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2001      	movs	r0, #1
 8009474:	4798      	blx	r3
  return;
 8009476:	bf00      	nop
 8009478:	bf00      	nop
}
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	200012c0 	.word	0x200012c0
 8009484:	20000210 	.word	0x20000210

08009488 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009490:	2000      	movs	r0, #0
 8009492:	f7f7 fa5c 	bl	800094e <shci_cmd_resp_release>

  return;
 8009496:	bf00      	nop
}
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
	...

080094a0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80094a8:	6879      	ldr	r1, [r7, #4]
 80094aa:	4805      	ldr	r0, [pc, #20]	; (80094c0 <TlUserEvtReceived+0x20>)
 80094ac:	f000 f876 	bl	800959c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80094b0:	4803      	ldr	r0, [pc, #12]	; (80094c0 <TlUserEvtReceived+0x20>)
 80094b2:	f7f7 fa40 	bl	8000936 <shci_notify_asynch_evt>

  return;
 80094b6:	bf00      	nop
}
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20000208 	.word	0x20000208

080094c4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a05      	ldr	r2, [pc, #20]	; (80094e4 <shci_register_io_bus+0x20>)
 80094d0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a04      	ldr	r2, [pc, #16]	; (80094e8 <shci_register_io_bus+0x24>)
 80094d6:	611a      	str	r2, [r3, #16]

  return;
 80094d8:	bf00      	nop
}
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	0800a271 	.word	0x0800a271
 80094e8:	0800a2c5 	.word	0x0800a2c5

080094ec <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	605a      	str	r2, [r3, #4]
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009514:	f3ef 8310 	mrs	r3, PRIMASK
 8009518:	60fb      	str	r3, [r7, #12]
  return(result);
 800951a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800951c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800951e:	b672      	cpsid	i
}
 8009520:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d102      	bne.n	8009532 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800952c:	2301      	movs	r3, #1
 800952e:	75fb      	strb	r3, [r7, #23]
 8009530:	e001      	b.n	8009536 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009532:	2300      	movs	r3, #0
 8009534:	75fb      	strb	r3, [r7, #23]
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f383 8810 	msr	PRIMASK, r3
}
 8009540:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009542:	7dfb      	ldrb	r3, [r7, #23]
}
 8009544:	4618      	mov	r0, r3
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800955a:	f3ef 8310 	mrs	r3, PRIMASK
 800955e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009560:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009562:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009564:	b672      	cpsid	i
}
 8009566:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	605a      	str	r2, [r3, #4]
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	f383 8810 	msr	PRIMASK, r3
}
 800958e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009590:	bf00      	nop
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800959c:	b480      	push	{r7}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095a6:	f3ef 8310 	mrs	r3, PRIMASK
 80095aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80095ac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80095ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095b0:	b672      	cpsid	i
}
 80095b2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	601a      	str	r2, [r3, #0]
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f383 8810 	msr	PRIMASK, r3
}
 80095da:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80095dc:	bf00      	nop
 80095de:	371c      	adds	r7, #28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095f0:	f3ef 8310 	mrs	r3, PRIMASK
 80095f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80095f6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80095f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095fa:	b672      	cpsid	i
}
 80095fc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	6812      	ldr	r2, [r2, #0]
 8009606:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6852      	ldr	r2, [r2, #4]
 8009610:	605a      	str	r2, [r3, #4]
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	f383 8810 	msr	PRIMASK, r3
}
 800961c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800961e:	bf00      	nop
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b086      	sub	sp, #24
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009634:	f3ef 8310 	mrs	r3, PRIMASK
 8009638:	60fb      	str	r3, [r7, #12]
  return(result);
 800963a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800963c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800963e:	b672      	cpsid	i
}
 8009640:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff ffca 	bl	80095e8 <LST_remove_node>
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f383 8810 	msr	PRIMASK, r3
}
 800965e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009660:	bf00      	nop
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	887a      	ldrh	r2, [r7, #2]
 800969e:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	7e3a      	ldrb	r2, [r7, #24]
 80096a4:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 80096a6:	7e3b      	ldrb	r3, [r7, #24]
 80096a8:	f003 0302 	and.w	r3, r3, #2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d006      	beq.n	80096be <CircularQueue_Init+0x56>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	891b      	ldrh	r3, [r3, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 80096b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096bc:	e000      	b.n	80096c0 <CircularQueue_Init+0x58>
  }
  return 0;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3714      	adds	r7, #20
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b08e      	sub	sp, #56	; 0x38
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	4613      	mov	r3, r2
 80096da:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 80096dc:	2300      	movs	r3, #0
 80096de:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80096e0:	2300      	movs	r3, #0
 80096e2:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 80096e4:	2300      	movs	r3, #0
 80096e6:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80096e8:	2300      	movs	r3, #0
 80096ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80096ec:	2300      	movs	r3, #0
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 80096f0:	2300      	movs	r3, #0
 80096f2:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 80096f4:	2300      	movs	r3, #0
 80096f6:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	891b      	ldrh	r3, [r3, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <CircularQueue_Add+0x38>
 8009700:	2302      	movs	r3, #2
 8009702:	e000      	b.n	8009706 <CircularQueue_Add+0x3a>
 8009704:	2300      	movs	r3, #0
 8009706:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d02a      	beq.n	8009766 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	891b      	ldrh	r3, [r3, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d123      	bne.n	8009760 <CircularQueue_Add+0x94>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	4413      	add	r3, r2
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	b29a      	uxth	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6819      	ldr	r1, [r3, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	1c58      	adds	r0, r3, #1
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	4298      	cmp	r0, r3
 8009736:	d306      	bcc.n	8009746 <CircularQueue_Add+0x7a>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6918      	ldr	r0, [r3, #16]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	1ac3      	subs	r3, r0, r3
 8009742:	3301      	adds	r3, #1
 8009744:	e002      	b.n	800974c <CircularQueue_Add+0x80>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	3301      	adds	r3, #1
 800974c:	440b      	add	r3, r1
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	b29b      	uxth	r3, r3
 8009752:	021b      	lsls	r3, r3, #8
 8009754:	b29b      	uxth	r3, r3
 8009756:	4413      	add	r3, r2
 8009758:	b29b      	uxth	r3, r3
 800975a:	3302      	adds	r3, #2
 800975c:	b29b      	uxth	r3, r3
 800975e:	e001      	b.n	8009764 <CircularQueue_Add+0x98>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	891b      	ldrh	r3, [r3, #8]
 8009764:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	891b      	ldrh	r3, [r3, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	891b      	ldrh	r3, [r3, #8]
 8009772:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	691a      	ldr	r2, [r3, #16]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	429a      	cmp	r2, r3
 800977e:	d307      	bcc.n	8009790 <CircularQueue_Add+0xc4>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6919      	ldr	r1, [r3, #16]
 8009788:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800978a:	440b      	add	r3, r1
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	e000      	b.n	8009792 <CircularQueue_Add+0xc6>
 8009790:	2300      	movs	r3, #0
 8009792:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8009794:	88fa      	ldrh	r2, [r7, #6]
 8009796:	7ffb      	ldrb	r3, [r7, #31]
 8009798:	4413      	add	r3, r2
 800979a:	461a      	mov	r2, r3
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	fb03 f302 	mul.w	r3, r3, r2
 80097a2:	69ba      	ldr	r2, [r7, #24]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d80b      	bhi.n	80097c0 <CircularQueue_Add+0xf4>
 80097a8:	88fa      	ldrh	r2, [r7, #6]
 80097aa:	7ffb      	ldrb	r3, [r7, #31]
 80097ac:	4413      	add	r3, r2
 80097ae:	461a      	mov	r2, r3
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80097b6:	fb02 f201 	mul.w	r2, r2, r1
 80097ba:	1a9b      	subs	r3, r3, r2
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	e000      	b.n	80097c2 <CircularQueue_Add+0xf6>
 80097c0:	2300      	movs	r3, #0
 80097c2:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 80097c4:	7dfa      	ldrb	r2, [r7, #23]
 80097c6:	7ffb      	ldrb	r3, [r7, #31]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	bf8c      	ite	hi
 80097cc:	2301      	movhi	r3, #1
 80097ce:	2300      	movls	r3, #0
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80097d4:	7fbb      	ldrb	r3, [r7, #30]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d008      	beq.n	80097ec <CircularQueue_Add+0x120>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	7f1b      	ldrb	r3, [r3, #28]
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <CircularQueue_Add+0x120>
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	e000      	b.n	80097ee <CircularQueue_Add+0x122>
 80097ec:	8bbb      	ldrh	r3, [r7, #28]
 80097ee:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80097f0:	7fbb      	ldrb	r3, [r7, #30]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d008      	beq.n	8009808 <CircularQueue_Add+0x13c>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	7f1b      	ldrb	r3, [r3, #28]
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <CircularQueue_Add+0x13c>
 8009802:	7ffb      	ldrb	r3, [r7, #31]
 8009804:	b29b      	uxth	r3, r3
 8009806:	e000      	b.n	800980a <CircularQueue_Add+0x13e>
 8009808:	8bbb      	ldrh	r3, [r7, #28]
 800980a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800980c:	88fb      	ldrh	r3, [r7, #6]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 817e 	beq.w	8009b10 <CircularQueue_Add+0x444>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	695a      	ldr	r2, [r3, #20]
 8009818:	88f9      	ldrh	r1, [r7, #6]
 800981a:	7ffb      	ldrb	r3, [r7, #31]
 800981c:	440b      	add	r3, r1
 800981e:	4619      	mov	r1, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	fb03 f301 	mul.w	r3, r3, r1
 8009826:	441a      	add	r2, r3
 8009828:	8bbb      	ldrh	r3, [r7, #28]
 800982a:	441a      	add	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	f200 816d 	bhi.w	8009b10 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009836:	2300      	movs	r3, #0
 8009838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800983a:	e14a      	b.n	8009ad2 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	691a      	ldr	r2, [r3, #16]
 8009840:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009842:	441a      	add	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	429a      	cmp	r2, r3
 800984a:	d307      	bcc.n	800985c <CircularQueue_Add+0x190>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	691a      	ldr	r2, [r3, #16]
 8009850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009852:	441a      	add	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	e003      	b.n	8009864 <CircularQueue_Add+0x198>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	691a      	ldr	r2, [r3, #16]
 8009860:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009862:	4413      	add	r3, r2
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	891b      	ldrh	r3, [r3, #8]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d130      	bne.n	80098d8 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	1c59      	adds	r1, r3, #1
 800987e:	6339      	str	r1, [r7, #48]	; 0x30
 8009880:	4413      	add	r3, r2
 8009882:	88fa      	ldrh	r2, [r7, #6]
 8009884:	b2d2      	uxtb	r2, r2
 8009886:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800988e:	429a      	cmp	r2, r3
 8009890:	d304      	bcc.n	800989c <CircularQueue_Add+0x1d0>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	e000      	b.n	800989e <CircularQueue_Add+0x1d2>
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80098a0:	88fb      	ldrh	r3, [r7, #6]
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	b298      	uxth	r0, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	1c59      	adds	r1, r3, #1
 80098ae:	6339      	str	r1, [r7, #48]	; 0x30
 80098b0:	4413      	add	r3, r2
 80098b2:	b2c2      	uxtb	r2, r0
 80098b4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098bc:	429a      	cmp	r2, r3
 80098be:	d304      	bcc.n	80098ca <CircularQueue_Add+0x1fe>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	e000      	b.n	80098cc <CircularQueue_Add+0x200>
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	1c9a      	adds	r2, r3, #2
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80098d8:	88fa      	ldrh	r2, [r7, #6]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6859      	ldr	r1, [r3, #4]
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	1acb      	subs	r3, r1, r3
 80098e2:	4293      	cmp	r3, r2
 80098e4:	bf28      	it	cs
 80098e6:	4613      	movcs	r3, r2
 80098e8:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80098ea:	88fb      	ldrh	r3, [r7, #6]
 80098ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d007      	beq.n	8009902 <CircularQueue_Add+0x236>
 80098f2:	88fb      	ldrh	r3, [r7, #6]
 80098f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d225      	bcs.n	8009946 <CircularQueue_Add+0x27a>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	7f1b      	ldrb	r3, [r3, #28]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d121      	bne.n	8009946 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	18d0      	adds	r0, r2, r3
 800990a:	88fb      	ldrh	r3, [r7, #6]
 800990c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800990e:	fb02 f303 	mul.w	r3, r2, r3
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	4413      	add	r3, r2
 8009916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009918:	4619      	mov	r1, r3
 800991a:	f001 f8af 	bl	800aa7c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	695a      	ldr	r2, [r3, #20]
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	441a      	add	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800992a:	2300      	movs	r3, #0
 800992c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8009932:	88fa      	ldrh	r2, [r7, #6]
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800993a:	7ffb      	ldrb	r3, [r7, #31]
 800993c:	b29a      	uxth	r2, r3
 800993e:	88fb      	ldrh	r3, [r7, #6]
 8009940:	4413      	add	r3, r2
 8009942:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009944:	e0a4      	b.n	8009a90 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 80a1 	beq.w	8009a90 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	7f1b      	ldrb	r3, [r3, #28]
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d03a      	beq.n	80099d0 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	891b      	ldrh	r3, [r3, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10d      	bne.n	800997e <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	3b02      	subs	r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	22ff      	movs	r2, #255	; 0xff
 800996e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009976:	3b01      	subs	r3, #1
 8009978:	4413      	add	r3, r2
 800997a:	22ff      	movs	r2, #255	; 0xff
 800997c:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	695a      	ldr	r2, [r3, #20]
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	441a      	add	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800998e:	88fb      	ldrh	r3, [r7, #6]
 8009990:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8009992:	2300      	movs	r3, #0
 8009994:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	891b      	ldrh	r3, [r3, #8]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d16f      	bne.n	8009a7e <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	1c59      	adds	r1, r3, #1
 80099a6:	6339      	str	r1, [r7, #48]	; 0x30
 80099a8:	4413      	add	r3, r2
 80099aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099ac:	b2d2      	uxtb	r2, r2
 80099ae:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	0a18      	lsrs	r0, r3, #8
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	1c59      	adds	r1, r3, #1
 80099bc:	6339      	str	r1, [r7, #48]	; 0x30
 80099be:	4413      	add	r3, r2
 80099c0:	b2c2      	uxtb	r2, r0
 80099c2:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	1c9a      	adds	r2, r3, #2
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	615a      	str	r2, [r3, #20]
 80099ce:	e056      	b.n	8009a7e <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	7f1b      	ldrb	r3, [r3, #28]
 80099d4:	f003 0302 	and.w	r3, r3, #2
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d050      	beq.n	8009a7e <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	891b      	ldrh	r3, [r3, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d14a      	bne.n	8009a7a <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	3b02      	subs	r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099f0:	b2d2      	uxtb	r2, r2
 80099f2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	0a19      	lsrs	r1, r3, #8
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	3b01      	subs	r3, #1
 8009a00:	4413      	add	r3, r2
 8009a02:	b2ca      	uxtb	r2, r1
 8009a04:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	18d0      	adds	r0, r2, r3
 8009a0e:	88fb      	ldrh	r3, [r7, #6]
 8009a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a12:	fb02 f303 	mul.w	r3, r2, r3
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	4413      	add	r3, r2
 8009a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	f001 f82d 	bl	800aa7c <memcpy>
             q->byteCount += NbBytesToCopy; 
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	695a      	ldr	r2, [r3, #20]
 8009a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a28:	441a      	add	r2, r3
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8009a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a30:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8009a32:	88fa      	ldrh	r2, [r7, #6]
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009a44:	2300      	movs	r3, #0
 8009a46:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4e:	1c59      	adds	r1, r3, #1
 8009a50:	6339      	str	r1, [r7, #48]	; 0x30
 8009a52:	4413      	add	r3, r2
 8009a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	0a18      	lsrs	r0, r3, #8
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	1c59      	adds	r1, r3, #1
 8009a66:	6339      	str	r1, [r7, #48]	; 0x30
 8009a68:	4413      	add	r3, r2
 8009a6a:	b2c2      	uxtb	r2, r0
 8009a6c:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	1c9a      	adds	r2, r3, #2
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	615a      	str	r2, [r3, #20]
 8009a78:	e001      	b.n	8009a7e <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e049      	b.n	8009b12 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8009a7e:	7ffb      	ldrb	r3, [r7, #31]
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	4413      	add	r3, r2
 8009a88:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8009a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d015      	beq.n	8009ac2 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	18d0      	adds	r0, r2, r3
 8009a9e:	88fb      	ldrh	r3, [r7, #6]
 8009aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aa2:	fb02 f203 	mul.w	r2, r2, r3
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	4413      	add	r3, r2
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	4413      	add	r3, r2
 8009aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	f000 ffe3 	bl	800aa7c <memcpy>
        q->byteCount += NbBytesToCopy;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	695a      	ldr	r2, [r3, #20]
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	441a      	add	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8009acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ace:	3301      	adds	r3, #1
 8009ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	f4ff aeb0 	bcc.w	800983c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6919      	ldr	r1, [r3, #16]
 8009ae4:	7ffb      	ldrb	r3, [r7, #31]
 8009ae6:	4419      	add	r1, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	4299      	cmp	r1, r3
 8009aee:	d307      	bcc.n	8009b00 <CircularQueue_Add+0x434>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6919      	ldr	r1, [r3, #16]
 8009af4:	7ffb      	ldrb	r3, [r7, #31]
 8009af6:	4419      	add	r1, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	1acb      	subs	r3, r1, r3
 8009afe:	e003      	b.n	8009b08 <CircularQueue_Add+0x43c>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6919      	ldr	r1, [r3, #16]
 8009b04:	7ffb      	ldrb	r3, [r7, #31]
 8009b06:	440b      	add	r3, r1
 8009b08:	4413      	add	r3, r2
 8009b0a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	e000      	b.n	8009b12 <CircularQueue_Add+0x446>
    return NULL;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3738      	adds	r7, #56	; 0x38
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b085      	sub	sp, #20
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	891b      	ldrh	r3, [r3, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d101      	bne.n	8009b38 <CircularQueue_Remove+0x1e>
 8009b34:	2302      	movs	r3, #2
 8009b36:	e000      	b.n	8009b3a <CircularQueue_Remove+0x20>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 80d4 	beq.w	8009cf4 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	891b      	ldrh	r3, [r3, #8]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d121      	bne.n	8009b98 <CircularQueue_Remove+0x7e>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6819      	ldr	r1, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	1c58      	adds	r0, r3, #1
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	4298      	cmp	r0, r3
 8009b72:	d306      	bcc.n	8009b82 <CircularQueue_Remove+0x68>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68d8      	ldr	r0, [r3, #12]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	1ac3      	subs	r3, r0, r3
 8009b7e:	3301      	adds	r3, #1
 8009b80:	e002      	b.n	8009b88 <CircularQueue_Remove+0x6e>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	3301      	adds	r3, #1
 8009b88:	440b      	add	r3, r1
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	021b      	lsls	r3, r3, #8
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	4413      	add	r3, r2
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	e001      	b.n	8009b9c <CircularQueue_Remove+0x82>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	891b      	ldrh	r3, [r3, #8]
 8009b9c:	683a      	ldr	r2, [r7, #0]
 8009b9e:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	7f1b      	ldrb	r3, [r3, #28]
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d059      	beq.n	8009c60 <CircularQueue_Remove+0x146>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	7f1b      	ldrb	r3, [r3, #28]
 8009bb0:	f003 0302 	and.w	r3, r3, #2
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d153      	bne.n	8009c60 <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d103      	bne.n	8009bcc <CircularQueue_Remove+0xb2>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	891b      	ldrh	r3, [r3, #8]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d012      	beq.n	8009bf2 <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68da      	ldr	r2, [r3, #12]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d943      	bls.n	8009c60 <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	891b      	ldrh	r3, [r3, #8]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d03f      	beq.n	8009c60 <CircularQueue_Remove+0x146>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	8912      	ldrh	r2, [r2, #8]
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d236      	bcs.n	8009c60 <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	695a      	ldr	r2, [r3, #20]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68d9      	ldr	r1, [r3, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	1acb      	subs	r3, r1, r3
 8009c00:	441a      	add	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	891b      	ldrh	r3, [r3, #8]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d121      	bne.n	8009c58 <CircularQueue_Remove+0x13e>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6819      	ldr	r1, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	1c58      	adds	r0, r3, #1
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	4298      	cmp	r0, r3
 8009c32:	d306      	bcc.n	8009c42 <CircularQueue_Remove+0x128>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	68d8      	ldr	r0, [r3, #12]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	1ac3      	subs	r3, r0, r3
 8009c3e:	3301      	adds	r3, #1
 8009c40:	e002      	b.n	8009c48 <CircularQueue_Remove+0x12e>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	440b      	add	r3, r1
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	021b      	lsls	r3, r3, #8
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	4413      	add	r3, r2
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	e001      	b.n	8009c5c <CircularQueue_Remove+0x142>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	891b      	ldrh	r3, [r3, #8]
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68d9      	ldr	r1, [r3, #12]
 8009c68:	7afb      	ldrb	r3, [r7, #11]
 8009c6a:	4419      	add	r1, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	4299      	cmp	r1, r3
 8009c72:	d307      	bcc.n	8009c84 <CircularQueue_Remove+0x16a>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68d9      	ldr	r1, [r3, #12]
 8009c78:	7afb      	ldrb	r3, [r7, #11]
 8009c7a:	4419      	add	r1, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	1acb      	subs	r3, r1, r3
 8009c82:	e003      	b.n	8009c8c <CircularQueue_Remove+0x172>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68d9      	ldr	r1, [r3, #12]
 8009c88:	7afb      	ldrb	r3, [r7, #11]
 8009c8a:	440b      	add	r3, r1
 8009c8c:	4413      	add	r3, r2
 8009c8e:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	8812      	ldrh	r2, [r2, #0]
 8009c98:	4611      	mov	r1, r2
 8009c9a:	7afa      	ldrb	r2, [r7, #11]
 8009c9c:	440a      	add	r2, r1
 8009c9e:	1a9a      	subs	r2, r3, r2
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01e      	beq.n	8009cea <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	8812      	ldrh	r2, [r2, #0]
 8009cb4:	441a      	add	r2, r3
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	441a      	add	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d30a      	bcc.n	8009cd8 <CircularQueue_Remove+0x1be>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	8812      	ldrh	r2, [r2, #0]
 8009cca:	441a      	add	r2, r3
 8009ccc:	7afb      	ldrb	r3, [r7, #11]
 8009cce:	441a      	add	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	e006      	b.n	8009ce6 <CircularQueue_Remove+0x1cc>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	8812      	ldrh	r2, [r2, #0]
 8009ce0:	441a      	add	r2, r3
 8009ce2:	7afb      	ldrb	r3, [r7, #11]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	699b      	ldr	r3, [r3, #24]
 8009cee:	1e5a      	subs	r2, r3, #1
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b087      	sub	sp, #28
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 8009d10:	2300      	movs	r3, #0
 8009d12:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	891b      	ldrh	r3, [r3, #8]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <CircularQueue_Sense+0x1e>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e000      	b.n	8009d22 <CircularQueue_Sense+0x20>
 8009d20:	2300      	movs	r3, #0
 8009d22:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2200      	movs	r2, #0
 8009d28:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 8093 	beq.w	8009e5e <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	891b      	ldrh	r3, [r3, #8]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d121      	bne.n	8009d8a <CircularQueue_Sense+0x88>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	4413      	add	r3, r2
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6819      	ldr	r1, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	1c58      	adds	r0, r3, #1
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	4298      	cmp	r0, r3
 8009d64:	d306      	bcc.n	8009d74 <CircularQueue_Sense+0x72>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68d8      	ldr	r0, [r3, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	1ac3      	subs	r3, r0, r3
 8009d70:	3301      	adds	r3, #1
 8009d72:	e002      	b.n	8009d7a <CircularQueue_Sense+0x78>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	440b      	add	r3, r1
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	021b      	lsls	r3, r3, #8
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	4413      	add	r3, r2
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	e001      	b.n	8009d8e <CircularQueue_Sense+0x8c>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	891b      	ldrh	r3, [r3, #8]
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	7f1b      	ldrb	r3, [r3, #28]
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d04a      	beq.n	8009e34 <CircularQueue_Sense+0x132>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7f1b      	ldrb	r3, [r3, #28]
 8009da2:	f003 0302 	and.w	r3, r3, #2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d144      	bne.n	8009e34 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d103      	bne.n	8009dbe <CircularQueue_Sense+0xbc>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	891b      	ldrh	r3, [r3, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d012      	beq.n	8009de4 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68da      	ldr	r2, [r3, #12]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d934      	bls.n	8009e34 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	891b      	ldrh	r3, [r3, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d030      	beq.n	8009e34 <CircularQueue_Sense+0x132>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	8912      	ldrh	r2, [r2, #8]
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d227      	bcs.n	8009e34 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8009de4:	2300      	movs	r3, #0
 8009de6:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	891b      	ldrh	r3, [r3, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d11d      	bne.n	8009e2c <CircularQueue_Sense+0x12a>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	4413      	add	r3, r2
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6819      	ldr	r1, [r3, #0]
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	1c58      	adds	r0, r3, #1
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	4298      	cmp	r0, r3
 8009e0a:	d305      	bcc.n	8009e18 <CircularQueue_Sense+0x116>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	6938      	ldr	r0, [r7, #16]
 8009e12:	1ac3      	subs	r3, r0, r3
 8009e14:	3301      	adds	r3, #1
 8009e16:	e001      	b.n	8009e1c <CircularQueue_Sense+0x11a>
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	440b      	add	r3, r1
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	021b      	lsls	r3, r3, #8
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	4413      	add	r3, r2
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	e001      	b.n	8009e30 <CircularQueue_Sense+0x12e>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	891b      	ldrh	r3, [r3, #8]
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	7bf9      	ldrb	r1, [r7, #15]
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	4419      	add	r1, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	4299      	cmp	r1, r3
 8009e44:	d306      	bcc.n	8009e54 <CircularQueue_Sense+0x152>
 8009e46:	7bf9      	ldrb	r1, [r7, #15]
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	4419      	add	r1, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	1acb      	subs	r3, r1, r3
 8009e52:	e002      	b.n	8009e5a <CircularQueue_Sense+0x158>
 8009e54:	7bf9      	ldrb	r1, [r7, #15]
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	440b      	add	r3, r1
 8009e5a:	4413      	add	r3, r2
 8009e5c:	617b      	str	r3, [r7, #20]
  }
  return x;
 8009e5e:	697b      	ldr	r3, [r7, #20]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	371c      	adds	r7, #28
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	af00      	add	r7, sp, #0
  return;
 8009e70:	bf00      	nop
}
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <BLS_Init>:

__weak void BLS_Init( void )
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	af00      	add	r7, sp, #0
  return;
 8009e7e:	bf00      	nop
}
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
  return;
 8009e8c:	bf00      	nop
}
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <DIS_Init>:
__weak void DIS_Init( void )
{
 8009e96:	b480      	push	{r7}
 8009e98:	af00      	add	r7, sp, #0
  return;
 8009e9a:	bf00      	nop
}
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	af00      	add	r7, sp, #0
  return;
 8009ea8:	bf00      	nop
}
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	af00      	add	r7, sp, #0
  return;
 8009eb6:	bf00      	nop
}
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HRS_Init>:
__weak void HRS_Init( void )
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	af00      	add	r7, sp, #0
  return;
 8009ec4:	bf00      	nop
}
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <HTS_Init>:
__weak void HTS_Init( void )
{
 8009ece:	b480      	push	{r7}
 8009ed0:	af00      	add	r7, sp, #0
  return;
 8009ed2:	bf00      	nop
}
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <IAS_Init>:
__weak void IAS_Init( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
  return;
 8009ee0:	bf00      	nop
}
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <LLS_Init>:
__weak void LLS_Init( void )
{
 8009eea:	b480      	push	{r7}
 8009eec:	af00      	add	r7, sp, #0
  return;
 8009eee:	bf00      	nop
}
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <TPS_Init>:
__weak void TPS_Init( void )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	af00      	add	r7, sp, #0
  return;
 8009efc:	bf00      	nop
}
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8009f06:	b480      	push	{r7}
 8009f08:	af00      	add	r7, sp, #0
  return;
 8009f0a:	bf00      	nop
}
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 8009f14:	b480      	push	{r7}
 8009f16:	af00      	add	r7, sp, #0
  return;
 8009f18:	bf00      	nop
}
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8009f22:	b480      	push	{r7}
 8009f24:	af00      	add	r7, sp, #0
  return;
 8009f26:	bf00      	nop
}
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <MESH_Init>:
__weak void MESH_Init( void )
{
 8009f30:	b480      	push	{r7}
 8009f32:	af00      	add	r7, sp, #0
  return;
 8009f34:	bf00      	nop
}
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8009f3e:	b480      	push	{r7}
 8009f40:	af00      	add	r7, sp, #0
  return;
 8009f42:	bf00      	nop
}
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	af00      	add	r7, sp, #0
  return;
 8009f50:	bf00      	nop
}
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
	...

08009f5c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009f60:	4b04      	ldr	r3, [pc, #16]	; (8009f74 <SVCCTL_Init+0x18>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009f66:	4b04      	ldr	r3, [pc, #16]	; (8009f78 <SVCCTL_Init+0x1c>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009f6c:	f000 f806 	bl	8009f7c <SVCCTL_SvcInit>

  return;
 8009f70:	bf00      	nop
}
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	200001e0 	.word	0x200001e0
 8009f78:	20000200 	.word	0x20000200

08009f7c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0
  BAS_Init();
 8009f80:	f7ff ff74 	bl	8009e6c <BAS_Init>

  BLS_Init();
 8009f84:	f7ff ff79 	bl	8009e7a <BLS_Init>

  CRS_STM_Init();
 8009f88:	f7ff ff7e 	bl	8009e88 <CRS_STM_Init>

  DIS_Init();
 8009f8c:	f7ff ff83 	bl	8009e96 <DIS_Init>

  EDS_STM_Init();
 8009f90:	f7ff ff88 	bl	8009ea4 <EDS_STM_Init>

  HIDS_Init();
 8009f94:	f7ff ff8d 	bl	8009eb2 <HIDS_Init>

  HRS_Init();
 8009f98:	f7ff ff92 	bl	8009ec0 <HRS_Init>

  HTS_Init();
 8009f9c:	f7ff ff97 	bl	8009ece <HTS_Init>

  IAS_Init();
 8009fa0:	f7ff ff9c 	bl	8009edc <IAS_Init>

  LLS_Init();
 8009fa4:	f7ff ffa1 	bl	8009eea <LLS_Init>

  TPS_Init();
 8009fa8:	f7ff ffa6 	bl	8009ef8 <TPS_Init>

  MOTENV_STM_Init();
 8009fac:	f7ff ffab 	bl	8009f06 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009fb0:	f7ff ffb0 	bl	8009f14 <P2PS_STM_Init>

  OTAS_STM_Init();
 8009fb4:	f7ff ffb5 	bl	8009f22 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009fb8:	f7ff ffc1 	bl	8009f3e <BVOPUS_STM_Init>

  MESH_Init();
 8009fbc:	f7ff ffb8 	bl	8009f30 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009fc0:	f7ff ffc4 	bl	8009f4c <SVCCTL_InitCustomSvc>
  
  return;
 8009fc4:	bf00      	nop
}
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 8009fd0:	4b09      	ldr	r3, [pc, #36]	; (8009ff8 <SVCCTL_RegisterCltHandler+0x30>)
 8009fd2:	791b      	ldrb	r3, [r3, #4]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4a08      	ldr	r2, [pc, #32]	; (8009ff8 <SVCCTL_RegisterCltHandler+0x30>)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 8009fde:	4b06      	ldr	r3, [pc, #24]	; (8009ff8 <SVCCTL_RegisterCltHandler+0x30>)
 8009fe0:	791b      	ldrb	r3, [r3, #4]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	4b04      	ldr	r3, [pc, #16]	; (8009ff8 <SVCCTL_RegisterCltHandler+0x30>)
 8009fe8:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 8009fea:	bf00      	nop
}
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20000200 	.word	0x20000200

08009ffc <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3301      	adds	r3, #1
 800a008:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a00a:	2300      	movs	r3, #0
 800a00c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	2bff      	cmp	r3, #255	; 0xff
 800a014:	d13f      	bne.n	800a096 <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	3302      	adds	r3, #2
 800a01a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	b29b      	uxth	r3, r3
 800a022:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a026:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a02a:	d132      	bne.n	800a092 <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a02c:	2300      	movs	r3, #0
 800a02e:	757b      	strb	r3, [r7, #21]
 800a030:	e00d      	b.n	800a04e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a032:	7d7b      	ldrb	r3, [r7, #21]
 800a034:	4a27      	ldr	r2, [pc, #156]	; (800a0d4 <SVCCTL_UserEvtRx+0xd8>)
 800a036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	4798      	blx	r3
 800a03e:	4603      	mov	r3, r0
 800a040:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d108      	bne.n	800a05a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a048:	7d7b      	ldrb	r3, [r7, #21]
 800a04a:	3301      	adds	r3, #1
 800a04c:	757b      	strb	r3, [r7, #21]
 800a04e:	4b21      	ldr	r3, [pc, #132]	; (800a0d4 <SVCCTL_UserEvtRx+0xd8>)
 800a050:	7f1b      	ldrb	r3, [r3, #28]
 800a052:	7d7a      	ldrb	r2, [r7, #21]
 800a054:	429a      	cmp	r2, r3
 800a056:	d3ec      	bcc.n	800a032 <SVCCTL_UserEvtRx+0x36>
 800a058:	e000      	b.n	800a05c <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800a05a:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800a05c:	2300      	movs	r3, #0
 800a05e:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800a060:	2300      	movs	r3, #0
 800a062:	757b      	strb	r3, [r7, #21]
 800a064:	e00d      	b.n	800a082 <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800a066:	7d7b      	ldrb	r3, [r7, #21]
 800a068:	4a1b      	ldr	r2, [pc, #108]	; (800a0d8 <SVCCTL_UserEvtRx+0xdc>)
 800a06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	4798      	blx	r3
 800a072:	4603      	mov	r3, r0
 800a074:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d108      	bne.n	800a08e <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800a07c:	7d7b      	ldrb	r3, [r7, #21]
 800a07e:	3301      	adds	r3, #1
 800a080:	757b      	strb	r3, [r7, #21]
 800a082:	4b15      	ldr	r3, [pc, #84]	; (800a0d8 <SVCCTL_UserEvtRx+0xdc>)
 800a084:	791b      	ldrb	r3, [r3, #4]
 800a086:	7d7a      	ldrb	r2, [r7, #21]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d3ec      	bcc.n	800a066 <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 800a08c:	e002      	b.n	800a094 <SVCCTL_UserEvtRx+0x98>
              break;
 800a08e:	bf00      	nop
          break;
 800a090:	e000      	b.n	800a094 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 800a092:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a094:	e000      	b.n	800a098 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800a096:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d00f      	beq.n	800a0be <SVCCTL_UserEvtRx+0xc2>
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	dc10      	bgt.n	800a0c4 <SVCCTL_UserEvtRx+0xc8>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d002      	beq.n	800a0ac <SVCCTL_UserEvtRx+0xb0>
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d006      	beq.n	800a0b8 <SVCCTL_UserEvtRx+0xbc>
 800a0aa:	e00b      	b.n	800a0c4 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7f8 fa65 	bl	800257c <SVCCTL_App_Notification>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	75bb      	strb	r3, [r7, #22]
      break;
 800a0b6:	e008      	b.n	800a0ca <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	75bb      	strb	r3, [r7, #22]
      break;
 800a0bc:	e005      	b.n	800a0ca <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	75bb      	strb	r3, [r7, #22]
      break;
 800a0c2:	e002      	b.n	800a0ca <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	75bb      	strb	r3, [r7, #22]
      break;
 800a0c8:	bf00      	nop
  }

  return (return_status);
 800a0ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	200001e0 	.word	0x200001e0
 800a0d8:	20000200 	.word	0x20000200

0800a0dc <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a0e0:	f7f9 fc3a 	bl	8003958 <HW_IPCC_Enable>

  return;
 800a0e4:	bf00      	nop
}
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <TL_Init>:


void TL_Init( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a0ec:	4b10      	ldr	r3, [pc, #64]	; (800a130 <TL_Init+0x48>)
 800a0ee:	4a11      	ldr	r2, [pc, #68]	; (800a134 <TL_Init+0x4c>)
 800a0f0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a0f2:	4b0f      	ldr	r3, [pc, #60]	; (800a130 <TL_Init+0x48>)
 800a0f4:	4a10      	ldr	r2, [pc, #64]	; (800a138 <TL_Init+0x50>)
 800a0f6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a0f8:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <TL_Init+0x48>)
 800a0fa:	4a10      	ldr	r2, [pc, #64]	; (800a13c <TL_Init+0x54>)
 800a0fc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a0fe:	4b0c      	ldr	r3, [pc, #48]	; (800a130 <TL_Init+0x48>)
 800a100:	4a0f      	ldr	r2, [pc, #60]	; (800a140 <TL_Init+0x58>)
 800a102:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a104:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <TL_Init+0x48>)
 800a106:	4a0f      	ldr	r2, [pc, #60]	; (800a144 <TL_Init+0x5c>)
 800a108:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a10a:	4b09      	ldr	r3, [pc, #36]	; (800a130 <TL_Init+0x48>)
 800a10c:	4a0e      	ldr	r2, [pc, #56]	; (800a148 <TL_Init+0x60>)
 800a10e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <TL_Init+0x48>)
 800a112:	4a0e      	ldr	r2, [pc, #56]	; (800a14c <TL_Init+0x64>)
 800a114:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a116:	4b06      	ldr	r3, [pc, #24]	; (800a130 <TL_Init+0x48>)
 800a118:	4a0d      	ldr	r2, [pc, #52]	; (800a150 <TL_Init+0x68>)
 800a11a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a11c:	4b04      	ldr	r3, [pc, #16]	; (800a130 <TL_Init+0x48>)
 800a11e:	4a0d      	ldr	r2, [pc, #52]	; (800a154 <TL_Init+0x6c>)
 800a120:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a122:	4b03      	ldr	r3, [pc, #12]	; (800a130 <TL_Init+0x48>)
 800a124:	4a0c      	ldr	r2, [pc, #48]	; (800a158 <TL_Init+0x70>)
 800a126:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a128:	f7f9 fc2a 	bl	8003980 <HW_IPCC_Init>

  return;
 800a12c:	bf00      	nop
}
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	20030000 	.word	0x20030000
 800a134:	20030134 	.word	0x20030134
 800a138:	20030154 	.word	0x20030154
 800a13c:	20030164 	.word	0x20030164
 800a140:	20030170 	.word	0x20030170
 800a144:	20030178 	.word	0x20030178
 800a148:	20030180 	.word	0x20030180
 800a14c:	20030188 	.word	0x20030188
 800a150:	200301a4 	.word	0x200301a4
 800a154:	200301a8 	.word	0x200301a8
 800a158:	200301b4 	.word	0x200301b4

0800a15c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a168:	4811      	ldr	r0, [pc, #68]	; (800a1b0 <TL_BLE_Init+0x54>)
 800a16a:	f7ff f9bf 	bl	80094ec <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a16e:	4b11      	ldr	r3, [pc, #68]	; (800a1b4 <TL_BLE_Init+0x58>)
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	689a      	ldr	r2, [r3, #8]
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	68da      	ldr	r2, [r3, #12]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	4a0c      	ldr	r2, [pc, #48]	; (800a1b8 <TL_BLE_Init+0x5c>)
 800a188:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	4a08      	ldr	r2, [pc, #32]	; (800a1b0 <TL_BLE_Init+0x54>)
 800a18e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a190:	f7f9 fc0c 	bl	80039ac <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a08      	ldr	r2, [pc, #32]	; (800a1bc <TL_BLE_Init+0x60>)
 800a19a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4a07      	ldr	r2, [pc, #28]	; (800a1c0 <TL_BLE_Init+0x64>)
 800a1a2:	6013      	str	r3, [r2, #0]

  return 0;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	200301d0 	.word	0x200301d0
 800a1b4:	20030000 	.word	0x20030000
 800a1b8:	20030a48 	.word	0x20030a48
 800a1bc:	200012cc 	.word	0x200012cc
 800a1c0:	200012d0 	.word	0x200012d0

0800a1c4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a1d0:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <TL_BLE_SendCmd+0x34>)
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a1da:	4b07      	ldr	r3, [pc, #28]	; (800a1f8 <TL_BLE_SendCmd+0x34>)
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	2001      	movs	r0, #1
 800a1e4:	f000 f96c 	bl	800a4c0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a1e8:	f7f9 fbea 	bl	80039c0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20030000 	.word	0x20030000

0800a1fc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a202:	e01c      	b.n	800a23e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a204:	1d3b      	adds	r3, r7, #4
 800a206:	4619      	mov	r1, r3
 800a208:	4812      	ldr	r0, [pc, #72]	; (800a254 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a20a:	f7ff fa0e 	bl	800962a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	7a5b      	ldrb	r3, [r3, #9]
 800a212:	2b0f      	cmp	r3, #15
 800a214:	d003      	beq.n	800a21e <HW_IPCC_BLE_RxEvtNot+0x22>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	7a5b      	ldrb	r3, [r3, #9]
 800a21a:	2b0e      	cmp	r3, #14
 800a21c:	d105      	bne.n	800a22a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4619      	mov	r1, r3
 800a222:	2002      	movs	r0, #2
 800a224:	f000 f94c 	bl	800a4c0 <OutputDbgTrace>
 800a228:	e004      	b.n	800a234 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4619      	mov	r1, r3
 800a22e:	2003      	movs	r0, #3
 800a230:	f000 f946 	bl	800a4c0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a234:	4b08      	ldr	r3, [pc, #32]	; (800a258 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	4610      	mov	r0, r2
 800a23c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a23e:	4805      	ldr	r0, [pc, #20]	; (800a254 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a240:	f7ff f964 	bl	800950c <LST_is_empty>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0dc      	beq.n	800a204 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a24a:	bf00      	nop
}
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	200301d0 	.word	0x200301d0
 800a258:	200012cc 	.word	0x200012cc

0800a25c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a260:	4b02      	ldr	r3, [pc, #8]	; (800a26c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4798      	blx	r3

  return;
 800a266:	bf00      	nop
}
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	200012d0 	.word	0x200012d0

0800a270 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a27c:	480d      	ldr	r0, [pc, #52]	; (800a2b4 <TL_SYS_Init+0x44>)
 800a27e:	f7ff f935 	bl	80094ec <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a282:	4b0d      	ldr	r3, [pc, #52]	; (800a2b8 <TL_SYS_Init+0x48>)
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	689a      	ldr	r2, [r3, #8]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	4a08      	ldr	r2, [pc, #32]	; (800a2b4 <TL_SYS_Init+0x44>)
 800a294:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a296:	f7f9 fbb5 	bl	8003a04 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a07      	ldr	r2, [pc, #28]	; (800a2bc <TL_SYS_Init+0x4c>)
 800a2a0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	4a06      	ldr	r2, [pc, #24]	; (800a2c0 <TL_SYS_Init+0x50>)
 800a2a8:	6013      	str	r3, [r2, #0]

  return 0;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	200301d8 	.word	0x200301d8
 800a2b8:	20030000 	.word	0x20030000
 800a2bc:	200012d4 	.word	0x200012d4
 800a2c0:	200012d8 	.word	0x200012d8

0800a2c4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a2d0:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <TL_SYS_SendCmd+0x34>)
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	2210      	movs	r2, #16
 800a2d8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a2da:	4b07      	ldr	r3, [pc, #28]	; (800a2f8 <TL_SYS_SendCmd+0x34>)
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	2004      	movs	r0, #4
 800a2e4:	f000 f8ec 	bl	800a4c0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a2e8:	f7f9 fb96 	bl	8003a18 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20030000 	.word	0x20030000

0800a2fc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4619      	mov	r1, r3
 800a308:	2005      	movs	r0, #5
 800a30a:	f000 f8d9 	bl	800a4c0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a30e:	4b05      	ldr	r3, [pc, #20]	; (800a324 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a03      	ldr	r2, [pc, #12]	; (800a320 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a314:	68d2      	ldr	r2, [r2, #12]
 800a316:	6812      	ldr	r2, [r2, #0]
 800a318:	4610      	mov	r0, r2
 800a31a:	4798      	blx	r3

  return;
 800a31c:	bf00      	nop
}
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20030000 	.word	0x20030000
 800a324:	200012d4 	.word	0x200012d4

0800a328 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a32e:	e00e      	b.n	800a34e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a330:	1d3b      	adds	r3, r7, #4
 800a332:	4619      	mov	r1, r3
 800a334:	480b      	ldr	r0, [pc, #44]	; (800a364 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a336:	f7ff f978 	bl	800962a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4619      	mov	r1, r3
 800a33e:	2006      	movs	r0, #6
 800a340:	f000 f8be 	bl	800a4c0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a344:	4b08      	ldr	r3, [pc, #32]	; (800a368 <HW_IPCC_SYS_EvtNot+0x40>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	4610      	mov	r0, r2
 800a34c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a34e:	4805      	ldr	r0, [pc, #20]	; (800a364 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a350:	f7ff f8dc 	bl	800950c <LST_is_empty>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0ea      	beq.n	800a330 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a35a:	bf00      	nop
}
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	200301d8 	.word	0x200301d8
 800a368:	200012d8 	.word	0x200012d8

0800a36c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a374:	4817      	ldr	r0, [pc, #92]	; (800a3d4 <TL_MM_Init+0x68>)
 800a376:	f7ff f8b9 	bl	80094ec <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a37a:	4817      	ldr	r0, [pc, #92]	; (800a3d8 <TL_MM_Init+0x6c>)
 800a37c:	f7ff f8b6 	bl	80094ec <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a380:	4b16      	ldr	r3, [pc, #88]	; (800a3dc <TL_MM_Init+0x70>)
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	4a16      	ldr	r2, [pc, #88]	; (800a3e0 <TL_MM_Init+0x74>)
 800a386:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a388:	4b15      	ldr	r3, [pc, #84]	; (800a3e0 <TL_MM_Init+0x74>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	6892      	ldr	r2, [r2, #8]
 800a390:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a392:	4b13      	ldr	r3, [pc, #76]	; (800a3e0 <TL_MM_Init+0x74>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	68d2      	ldr	r2, [r2, #12]
 800a39a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a39c:	4b10      	ldr	r3, [pc, #64]	; (800a3e0 <TL_MM_Init+0x74>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a0c      	ldr	r2, [pc, #48]	; (800a3d4 <TL_MM_Init+0x68>)
 800a3a2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a3a4:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <TL_MM_Init+0x74>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a3ae:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <TL_MM_Init+0x74>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	6852      	ldr	r2, [r2, #4]
 800a3b6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a3b8:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <TL_MM_Init+0x74>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	6912      	ldr	r2, [r2, #16]
 800a3c0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a3c2:	4b07      	ldr	r3, [pc, #28]	; (800a3e0 <TL_MM_Init+0x74>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6952      	ldr	r2, [r2, #20]
 800a3ca:	619a      	str	r2, [r3, #24]

  return;
 800a3cc:	bf00      	nop
}
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	200301c0 	.word	0x200301c0
 800a3d8:	200012c4 	.word	0x200012c4
 800a3dc:	20030000 	.word	0x20030000
 800a3e0:	200012dc 	.word	0x200012dc

0800a3e4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a3ec:	6879      	ldr	r1, [r7, #4]
 800a3ee:	4807      	ldr	r0, [pc, #28]	; (800a40c <TL_MM_EvtDone+0x28>)
 800a3f0:	f7ff f8d4 	bl	800959c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	f000 f862 	bl	800a4c0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a3fc:	4804      	ldr	r0, [pc, #16]	; (800a410 <TL_MM_EvtDone+0x2c>)
 800a3fe:	f7f9 fb31 	bl	8003a64 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a402:	bf00      	nop
}
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	200012c4 	.word	0x200012c4
 800a410:	0800a415 	.word	0x0800a415

0800a414 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a41a:	e00c      	b.n	800a436 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a41c:	1d3b      	adds	r3, r7, #4
 800a41e:	4619      	mov	r1, r3
 800a420:	480a      	ldr	r0, [pc, #40]	; (800a44c <SendFreeBuf+0x38>)
 800a422:	f7ff f902 	bl	800962a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a426:	4b0a      	ldr	r3, [pc, #40]	; (800a450 <SendFreeBuf+0x3c>)
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	4611      	mov	r1, r2
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff f8b3 	bl	800959c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a436:	4805      	ldr	r0, [pc, #20]	; (800a44c <SendFreeBuf+0x38>)
 800a438:	f7ff f868 	bl	800950c <LST_is_empty>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0ec      	beq.n	800a41c <SendFreeBuf+0x8>
  }

  return;
 800a442:	bf00      	nop
}
 800a444:	3708      	adds	r7, #8
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	200012c4 	.word	0x200012c4
 800a450:	20030000 	.word	0x20030000

0800a454 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a458:	4805      	ldr	r0, [pc, #20]	; (800a470 <TL_TRACES_Init+0x1c>)
 800a45a:	f7ff f847 	bl	80094ec <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a45e:	4b05      	ldr	r3, [pc, #20]	; (800a474 <TL_TRACES_Init+0x20>)
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	4a03      	ldr	r2, [pc, #12]	; (800a470 <TL_TRACES_Init+0x1c>)
 800a464:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a466:	f7f9 fb33 	bl	8003ad0 <HW_IPCC_TRACES_Init>

  return;
 800a46a:	bf00      	nop
}
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	200301c8 	.word	0x200301c8
 800a474:	20030000 	.word	0x20030000

0800a478 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a47e:	e008      	b.n	800a492 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a480:	1d3b      	adds	r3, r7, #4
 800a482:	4619      	mov	r1, r3
 800a484:	4808      	ldr	r0, [pc, #32]	; (800a4a8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a486:	f7ff f8d0 	bl	800962a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 f80d 	bl	800a4ac <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a492:	4805      	ldr	r0, [pc, #20]	; (800a4a8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a494:	f7ff f83a 	bl	800950c <LST_is_empty>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d0f0      	beq.n	800a480 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a49e:	bf00      	nop
}
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200301c8 	.word	0x200301c8

0800a4ac <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	6039      	str	r1, [r7, #0]
 800a4ca:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a4cc:	79fb      	ldrb	r3, [r7, #7]
 800a4ce:	2b06      	cmp	r3, #6
 800a4d0:	d845      	bhi.n	800a55e <OutputDbgTrace+0x9e>
 800a4d2:	a201      	add	r2, pc, #4	; (adr r2, 800a4d8 <OutputDbgTrace+0x18>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a4f5 	.word	0x0800a4f5
 800a4dc:	0800a519 	.word	0x0800a519
 800a4e0:	0800a51f 	.word	0x0800a51f
 800a4e4:	0800a533 	.word	0x0800a533
 800a4e8:	0800a53f 	.word	0x0800a53f
 800a4ec:	0800a545 	.word	0x0800a545
 800a4f0:	0800a553 	.word	0x0800a553
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	7a5b      	ldrb	r3, [r3, #9]
 800a4fc:	2bff      	cmp	r3, #255	; 0xff
 800a4fe:	d005      	beq.n	800a50c <OutputDbgTrace+0x4c>
 800a500:	2bff      	cmp	r3, #255	; 0xff
 800a502:	dc05      	bgt.n	800a510 <OutputDbgTrace+0x50>
 800a504:	2b0e      	cmp	r3, #14
 800a506:	d005      	beq.n	800a514 <OutputDbgTrace+0x54>
 800a508:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a50a:	e001      	b.n	800a510 <OutputDbgTrace+0x50>
          break;
 800a50c:	bf00      	nop
 800a50e:	e027      	b.n	800a560 <OutputDbgTrace+0xa0>
          break;
 800a510:	bf00      	nop
 800a512:	e025      	b.n	800a560 <OutputDbgTrace+0xa0>
          break;
 800a514:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a516:	e023      	b.n	800a560 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a51c:	e020      	b.n	800a560 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	7a5b      	ldrb	r3, [r3, #9]
 800a526:	2b0e      	cmp	r3, #14
 800a528:	d001      	beq.n	800a52e <OutputDbgTrace+0x6e>
 800a52a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a52c:	e000      	b.n	800a530 <OutputDbgTrace+0x70>
          break;
 800a52e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a530:	e016      	b.n	800a560 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	7a5b      	ldrb	r3, [r3, #9]
 800a53a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a53c:	e010      	b.n	800a560 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a542:	e00d      	b.n	800a560 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	7a5b      	ldrb	r3, [r3, #9]
 800a54c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a54e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a550:	e006      	b.n	800a560 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	7a5b      	ldrb	r3, [r3, #9]
 800a55a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a55c:	e000      	b.n	800a560 <OutputDbgTrace+0xa0>

    default:
      break;
 800a55e:	bf00      	nop
  }

  return;
 800a560:	bf00      	nop
}
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a56c:	b480      	push	{r7}
 800a56e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a570:	4b05      	ldr	r3, [pc, #20]	; (800a588 <UTIL_LPM_Init+0x1c>)
 800a572:	2200      	movs	r2, #0
 800a574:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a576:	4b05      	ldr	r3, [pc, #20]	; (800a58c <UTIL_LPM_Init+0x20>)
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a57c:	bf00      	nop
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	200012e0 	.word	0x200012e0
 800a58c:	200012e4 	.word	0x200012e4

0800a590 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	460b      	mov	r3, r1
 800a59a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a59c:	f3ef 8310 	mrs	r3, PRIMASK
 800a5a0:	613b      	str	r3, [r7, #16]
  return(result);
 800a5a2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a5a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5a6:	b672      	cpsid	i
}
 800a5a8:	bf00      	nop
  
  switch(state)
 800a5aa:	78fb      	ldrb	r3, [r7, #3]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d008      	beq.n	800a5c2 <UTIL_LPM_SetOffMode+0x32>
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d10e      	bne.n	800a5d2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a5b4:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <UTIL_LPM_SetOffMode+0x5c>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	4a0b      	ldr	r2, [pc, #44]	; (800a5ec <UTIL_LPM_SetOffMode+0x5c>)
 800a5be:	6013      	str	r3, [r2, #0]
      break;
 800a5c0:	e008      	b.n	800a5d4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	43da      	mvns	r2, r3
 800a5c6:	4b09      	ldr	r3, [pc, #36]	; (800a5ec <UTIL_LPM_SetOffMode+0x5c>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	4a07      	ldr	r2, [pc, #28]	; (800a5ec <UTIL_LPM_SetOffMode+0x5c>)
 800a5ce:	6013      	str	r3, [r2, #0]
      break;
 800a5d0:	e000      	b.n	800a5d4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a5d2:	bf00      	nop
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f383 8810 	msr	PRIMASK, r3
}
 800a5de:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a5e0:	bf00      	nop
 800a5e2:	371c      	adds	r7, #28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	200012e4 	.word	0x200012e4

0800a5f0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b08c      	sub	sp, #48	; 0x30
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a5f8:	4b67      	ldr	r3, [pc, #412]	; (800a798 <UTIL_SEQ_Run+0x1a8>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a5fe:	4b66      	ldr	r3, [pc, #408]	; (800a798 <UTIL_SEQ_Run+0x1a8>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4013      	ands	r3, r2
 800a606:	4a64      	ldr	r2, [pc, #400]	; (800a798 <UTIL_SEQ_Run+0x1a8>)
 800a608:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a60a:	e083      	b.n	800a714 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800a60c:	2300      	movs	r3, #0
 800a60e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a610:	e002      	b.n	800a618 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	3301      	adds	r3, #1
 800a616:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a618:	4a60      	ldr	r2, [pc, #384]	; (800a79c <UTIL_SEQ_Run+0x1ac>)
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a620:	4b5f      	ldr	r3, [pc, #380]	; (800a7a0 <UTIL_SEQ_Run+0x1b0>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	401a      	ands	r2, r3
 800a626:	4b5c      	ldr	r3, [pc, #368]	; (800a798 <UTIL_SEQ_Run+0x1a8>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4013      	ands	r3, r2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d0f0      	beq.n	800a612 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800a630:	4a5a      	ldr	r2, [pc, #360]	; (800a79c <UTIL_SEQ_Run+0x1ac>)
 800a632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a634:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a638:	4b59      	ldr	r3, [pc, #356]	; (800a7a0 <UTIL_SEQ_Run+0x1b0>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	401a      	ands	r2, r3
 800a63e:	4b56      	ldr	r3, [pc, #344]	; (800a798 <UTIL_SEQ_Run+0x1a8>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4013      	ands	r3, r2
 800a644:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a646:	4a55      	ldr	r2, [pc, #340]	; (800a79c <UTIL_SEQ_Run+0x1ac>)
 800a648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64a:	00db      	lsls	r3, r3, #3
 800a64c:	4413      	add	r3, r2
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	4013      	ands	r3, r2
 800a654:	2b00      	cmp	r3, #0
 800a656:	d106      	bne.n	800a666 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a658:	4a50      	ldr	r2, [pc, #320]	; (800a79c <UTIL_SEQ_Run+0x1ac>)
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	00db      	lsls	r3, r3, #3
 800a65e:	4413      	add	r3, r2
 800a660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a664:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a666:	4a4d      	ldr	r2, [pc, #308]	; (800a79c <UTIL_SEQ_Run+0x1ac>)
 800a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	4413      	add	r3, r2
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	4013      	ands	r3, r2
 800a674:	4618      	mov	r0, r3
 800a676:	f000 f99d 	bl	800a9b4 <SEQ_BitPosition>
 800a67a:	4603      	mov	r3, r0
 800a67c:	461a      	mov	r2, r3
 800a67e:	4b49      	ldr	r3, [pc, #292]	; (800a7a4 <UTIL_SEQ_Run+0x1b4>)
 800a680:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a682:	4a46      	ldr	r2, [pc, #280]	; (800a79c <UTIL_SEQ_Run+0x1ac>)
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	00db      	lsls	r3, r3, #3
 800a688:	4413      	add	r3, r2
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	4b45      	ldr	r3, [pc, #276]	; (800a7a4 <UTIL_SEQ_Run+0x1b4>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2101      	movs	r1, #1
 800a692:	fa01 f303 	lsl.w	r3, r1, r3
 800a696:	43db      	mvns	r3, r3
 800a698:	401a      	ands	r2, r3
 800a69a:	4940      	ldr	r1, [pc, #256]	; (800a79c <UTIL_SEQ_Run+0x1ac>)
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	00db      	lsls	r3, r3, #3
 800a6a0:	440b      	add	r3, r1
 800a6a2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a6a8:	61bb      	str	r3, [r7, #24]
  return(result);
 800a6aa:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a6ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6ae:	b672      	cpsid	i
}
 800a6b0:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a6b2:	4b3c      	ldr	r3, [pc, #240]	; (800a7a4 <UTIL_SEQ_Run+0x1b4>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6bc:	43da      	mvns	r2, r3
 800a6be:	4b3a      	ldr	r3, [pc, #232]	; (800a7a8 <UTIL_SEQ_Run+0x1b8>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	4a38      	ldr	r2, [pc, #224]	; (800a7a8 <UTIL_SEQ_Run+0x1b8>)
 800a6c6:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6cc:	e013      	b.n	800a6f6 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	4a32      	ldr	r2, [pc, #200]	; (800a79c <UTIL_SEQ_Run+0x1ac>)
 800a6d4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a6d8:	4b32      	ldr	r3, [pc, #200]	; (800a7a4 <UTIL_SEQ_Run+0x1b4>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e2:	43da      	mvns	r2, r3
 800a6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	400a      	ands	r2, r1
 800a6ea:	492c      	ldr	r1, [pc, #176]	; (800a79c <UTIL_SEQ_Run+0x1ac>)
 800a6ec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1e8      	bne.n	800a6ce <UTIL_SEQ_Run+0xde>
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f383 8810 	msr	PRIMASK, r3
}
 800a706:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a708:	4b26      	ldr	r3, [pc, #152]	; (800a7a4 <UTIL_SEQ_Run+0x1b4>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a27      	ldr	r2, [pc, #156]	; (800a7ac <UTIL_SEQ_Run+0x1bc>)
 800a70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a712:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a714:	4b24      	ldr	r3, [pc, #144]	; (800a7a8 <UTIL_SEQ_Run+0x1b8>)
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	4b21      	ldr	r3, [pc, #132]	; (800a7a0 <UTIL_SEQ_Run+0x1b0>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	401a      	ands	r2, r3
 800a71e:	4b1e      	ldr	r3, [pc, #120]	; (800a798 <UTIL_SEQ_Run+0x1a8>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4013      	ands	r3, r2
 800a724:	2b00      	cmp	r3, #0
 800a726:	d007      	beq.n	800a738 <UTIL_SEQ_Run+0x148>
 800a728:	4b21      	ldr	r3, [pc, #132]	; (800a7b0 <UTIL_SEQ_Run+0x1c0>)
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	4b21      	ldr	r3, [pc, #132]	; (800a7b4 <UTIL_SEQ_Run+0x1c4>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4013      	ands	r3, r2
 800a732:	2b00      	cmp	r3, #0
 800a734:	f43f af6a 	beq.w	800a60c <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a738:	4b1a      	ldr	r3, [pc, #104]	; (800a7a4 <UTIL_SEQ_Run+0x1b4>)
 800a73a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a73e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a740:	f000 f92a 	bl	800a998 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a744:	f3ef 8310 	mrs	r3, PRIMASK
 800a748:	613b      	str	r3, [r7, #16]
  return(result);
 800a74a:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a74c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a74e:	b672      	cpsid	i
}
 800a750:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800a752:	4b15      	ldr	r3, [pc, #84]	; (800a7a8 <UTIL_SEQ_Run+0x1b8>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	4b12      	ldr	r3, [pc, #72]	; (800a7a0 <UTIL_SEQ_Run+0x1b0>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	401a      	ands	r2, r3
 800a75c:	4b0e      	ldr	r3, [pc, #56]	; (800a798 <UTIL_SEQ_Run+0x1a8>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4013      	ands	r3, r2
 800a762:	2b00      	cmp	r3, #0
 800a764:	d108      	bne.n	800a778 <UTIL_SEQ_Run+0x188>
 800a766:	4b12      	ldr	r3, [pc, #72]	; (800a7b0 <UTIL_SEQ_Run+0x1c0>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	4b12      	ldr	r3, [pc, #72]	; (800a7b4 <UTIL_SEQ_Run+0x1c4>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4013      	ands	r3, r2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800a774:	f7f6 f8cb 	bl	800090e <UTIL_SEQ_Idle>
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f383 8810 	msr	PRIMASK, r3
}
 800a782:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800a784:	f000 f90f 	bl	800a9a6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a788:	4a03      	ldr	r2, [pc, #12]	; (800a798 <UTIL_SEQ_Run+0x1a8>)
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	6013      	str	r3, [r2, #0]

  return;
 800a78e:	bf00      	nop
}
 800a790:	3730      	adds	r7, #48	; 0x30
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	2000002c 	.word	0x2000002c
 800a79c:	20001378 	.word	0x20001378
 800a7a0:	20000028 	.word	0x20000028
 800a7a4:	200012f4 	.word	0x200012f4
 800a7a8:	200012e8 	.word	0x200012e8
 800a7ac:	200012f8 	.word	0x200012f8
 800a7b0:	200012ec 	.word	0x200012ec
 800a7b4:	200012f0 	.word	0x200012f0

0800a7b8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a7c8:	617b      	str	r3, [r7, #20]
  return(result);
 800a7ca:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a7cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7ce:	b672      	cpsid	i
}
 800a7d0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 f8ee 	bl	800a9b4 <SEQ_BitPosition>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4a06      	ldr	r2, [pc, #24]	; (800a7f8 <UTIL_SEQ_RegTask+0x40>)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	f383 8810 	msr	PRIMASK, r3
}
 800a7ee:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a7f0:	bf00      	nop
}
 800a7f2:	3720      	adds	r7, #32
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	200012f8 	.word	0x200012f8

0800a7fc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b087      	sub	sp, #28
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a806:	f3ef 8310 	mrs	r3, PRIMASK
 800a80a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a80c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a80e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a810:	b672      	cpsid	i
}
 800a812:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a814:	4b0d      	ldr	r3, [pc, #52]	; (800a84c <UTIL_SEQ_SetTask+0x50>)
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	4a0b      	ldr	r2, [pc, #44]	; (800a84c <UTIL_SEQ_SetTask+0x50>)
 800a81e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a820:	4a0b      	ldr	r2, [pc, #44]	; (800a850 <UTIL_SEQ_SetTask+0x54>)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	431a      	orrs	r2, r3
 800a82c:	4908      	ldr	r1, [pc, #32]	; (800a850 <UTIL_SEQ_SetTask+0x54>)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	f383 8810 	msr	PRIMASK, r3
}
 800a83e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a840:	bf00      	nop
}
 800a842:	371c      	adds	r7, #28
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	200012e8 	.word	0x200012e8
 800a850:	20001378 	.word	0x20001378

0800a854 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a854:	b480      	push	{r7}
 800a856:	b087      	sub	sp, #28
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a85c:	f3ef 8310 	mrs	r3, PRIMASK
 800a860:	60fb      	str	r3, [r7, #12]
  return(result);
 800a862:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a864:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a866:	b672      	cpsid	i
}
 800a868:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	43da      	mvns	r2, r3
 800a86e:	4b08      	ldr	r3, [pc, #32]	; (800a890 <UTIL_SEQ_PauseTask+0x3c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4013      	ands	r3, r2
 800a874:	4a06      	ldr	r2, [pc, #24]	; (800a890 <UTIL_SEQ_PauseTask+0x3c>)
 800a876:	6013      	str	r3, [r2, #0]
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	f383 8810 	msr	PRIMASK, r3
}
 800a882:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a884:	bf00      	nop
}
 800a886:	371c      	adds	r7, #28
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	20000028 	.word	0x20000028

0800a894 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a894:	b480      	push	{r7}
 800a896:	b087      	sub	sp, #28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a89c:	f3ef 8310 	mrs	r3, PRIMASK
 800a8a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a8a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8a6:	b672      	cpsid	i
}
 800a8a8:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a8aa:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <UTIL_SEQ_ResumeTask+0x3c>)
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	4a07      	ldr	r2, [pc, #28]	; (800a8d0 <UTIL_SEQ_ResumeTask+0x3c>)
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	f383 8810 	msr	PRIMASK, r3
}
 800a8c0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a8c2:	bf00      	nop
}
 800a8c4:	371c      	adds	r7, #28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	20000028 	.word	0x20000028

0800a8d4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a8e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a8e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8e6:	b672      	cpsid	i
}
 800a8e8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a8ea:	4b09      	ldr	r3, [pc, #36]	; (800a910 <UTIL_SEQ_SetEvt+0x3c>)
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	4a07      	ldr	r2, [pc, #28]	; (800a910 <UTIL_SEQ_SetEvt+0x3c>)
 800a8f4:	6013      	str	r3, [r2, #0]
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f383 8810 	msr	PRIMASK, r3
}
 800a900:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a902:	bf00      	nop
}
 800a904:	371c      	adds	r7, #28
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	200012ec 	.word	0x200012ec

0800a914 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a91c:	4b1b      	ldr	r3, [pc, #108]	; (800a98c <UTIL_SEQ_WaitEvt+0x78>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a922:	4b1a      	ldr	r3, [pc, #104]	; (800a98c <UTIL_SEQ_WaitEvt+0x78>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a92a:	d102      	bne.n	800a932 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	e005      	b.n	800a93e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800a932:	4b16      	ldr	r3, [pc, #88]	; (800a98c <UTIL_SEQ_WaitEvt+0x78>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2201      	movs	r2, #1
 800a938:	fa02 f303 	lsl.w	r3, r2, r3
 800a93c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a93e:	4b14      	ldr	r3, [pc, #80]	; (800a990 <UTIL_SEQ_WaitEvt+0x7c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800a944:	4a12      	ldr	r2, [pc, #72]	; (800a990 <UTIL_SEQ_WaitEvt+0x7c>)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800a94a:	e005      	b.n	800a958 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800a94c:	4b10      	ldr	r3, [pc, #64]	; (800a990 <UTIL_SEQ_WaitEvt+0x7c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4619      	mov	r1, r3
 800a952:	6978      	ldr	r0, [r7, #20]
 800a954:	f7f5 ffe2 	bl	800091c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800a958:	4b0e      	ldr	r3, [pc, #56]	; (800a994 <UTIL_SEQ_WaitEvt+0x80>)
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	4b0c      	ldr	r3, [pc, #48]	; (800a990 <UTIL_SEQ_WaitEvt+0x7c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4013      	ands	r3, r2
 800a962:	2b00      	cmp	r3, #0
 800a964:	d0f2      	beq.n	800a94c <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a966:	4a09      	ldr	r2, [pc, #36]	; (800a98c <UTIL_SEQ_WaitEvt+0x78>)
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800a96c:	4b08      	ldr	r3, [pc, #32]	; (800a990 <UTIL_SEQ_WaitEvt+0x7c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	43da      	mvns	r2, r3
 800a972:	4b08      	ldr	r3, [pc, #32]	; (800a994 <UTIL_SEQ_WaitEvt+0x80>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4013      	ands	r3, r2
 800a978:	4a06      	ldr	r2, [pc, #24]	; (800a994 <UTIL_SEQ_WaitEvt+0x80>)
 800a97a:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800a97c:	4a04      	ldr	r2, [pc, #16]	; (800a990 <UTIL_SEQ_WaitEvt+0x7c>)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6013      	str	r3, [r2, #0]

  return;
 800a982:	bf00      	nop
}
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	200012f4 	.word	0x200012f4
 800a990:	200012f0 	.word	0x200012f0
 800a994:	200012ec 	.word	0x200012ec

0800a998 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a998:	b480      	push	{r7}
 800a99a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a99c:	bf00      	nop
}
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a9aa:	bf00      	nop
}
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	0c1b      	lsrs	r3, r3, #16
 800a9c4:	041b      	lsls	r3, r3, #16
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d104      	bne.n	800a9d4 <SEQ_BitPosition+0x20>
 800a9ca:	2310      	movs	r3, #16
 800a9cc:	73fb      	strb	r3, [r7, #15]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	041b      	lsls	r3, r3, #16
 800a9d2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d105      	bne.n	800a9ea <SEQ_BitPosition+0x36>
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	73fb      	strb	r3, [r7, #15]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	021b      	lsls	r3, r3, #8
 800a9e8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d105      	bne.n	800aa00 <SEQ_BitPosition+0x4c>
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	73fb      	strb	r3, [r7, #15]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	011b      	lsls	r3, r3, #4
 800a9fe:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	0f1b      	lsrs	r3, r3, #28
 800aa04:	4a07      	ldr	r2, [pc, #28]	; (800aa24 <SEQ_BitPosition+0x70>)
 800aa06:	5cd2      	ldrb	r2, [r2, r3]
 800aa08:	7bfb      	ldrb	r3, [r7, #15]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	f1c3 031f 	rsb	r3, r3, #31
 800aa14:	b2db      	uxtb	r3, r3
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	0800c2ac 	.word	0x0800c2ac

0800aa28 <__errno>:
 800aa28:	4b01      	ldr	r3, [pc, #4]	; (800aa30 <__errno+0x8>)
 800aa2a:	6818      	ldr	r0, [r3, #0]
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20000030 	.word	0x20000030

0800aa34 <__libc_init_array>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	4d0d      	ldr	r5, [pc, #52]	; (800aa6c <__libc_init_array+0x38>)
 800aa38:	4c0d      	ldr	r4, [pc, #52]	; (800aa70 <__libc_init_array+0x3c>)
 800aa3a:	1b64      	subs	r4, r4, r5
 800aa3c:	10a4      	asrs	r4, r4, #2
 800aa3e:	2600      	movs	r6, #0
 800aa40:	42a6      	cmp	r6, r4
 800aa42:	d109      	bne.n	800aa58 <__libc_init_array+0x24>
 800aa44:	4d0b      	ldr	r5, [pc, #44]	; (800aa74 <__libc_init_array+0x40>)
 800aa46:	4c0c      	ldr	r4, [pc, #48]	; (800aa78 <__libc_init_array+0x44>)
 800aa48:	f001 f858 	bl	800bafc <_init>
 800aa4c:	1b64      	subs	r4, r4, r5
 800aa4e:	10a4      	asrs	r4, r4, #2
 800aa50:	2600      	movs	r6, #0
 800aa52:	42a6      	cmp	r6, r4
 800aa54:	d105      	bne.n	800aa62 <__libc_init_array+0x2e>
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
 800aa58:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa5c:	4798      	blx	r3
 800aa5e:	3601      	adds	r6, #1
 800aa60:	e7ee      	b.n	800aa40 <__libc_init_array+0xc>
 800aa62:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa66:	4798      	blx	r3
 800aa68:	3601      	adds	r6, #1
 800aa6a:	e7f2      	b.n	800aa52 <__libc_init_array+0x1e>
 800aa6c:	0800c35c 	.word	0x0800c35c
 800aa70:	0800c35c 	.word	0x0800c35c
 800aa74:	0800c35c 	.word	0x0800c35c
 800aa78:	0800c360 	.word	0x0800c360

0800aa7c <memcpy>:
 800aa7c:	440a      	add	r2, r1
 800aa7e:	4291      	cmp	r1, r2
 800aa80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aa84:	d100      	bne.n	800aa88 <memcpy+0xc>
 800aa86:	4770      	bx	lr
 800aa88:	b510      	push	{r4, lr}
 800aa8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa92:	4291      	cmp	r1, r2
 800aa94:	d1f9      	bne.n	800aa8a <memcpy+0xe>
 800aa96:	bd10      	pop	{r4, pc}

0800aa98 <memset>:
 800aa98:	4402      	add	r2, r0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d100      	bne.n	800aaa2 <memset+0xa>
 800aaa0:	4770      	bx	lr
 800aaa2:	f803 1b01 	strb.w	r1, [r3], #1
 800aaa6:	e7f9      	b.n	800aa9c <memset+0x4>

0800aaa8 <iprintf>:
 800aaa8:	b40f      	push	{r0, r1, r2, r3}
 800aaaa:	4b0a      	ldr	r3, [pc, #40]	; (800aad4 <iprintf+0x2c>)
 800aaac:	b513      	push	{r0, r1, r4, lr}
 800aaae:	681c      	ldr	r4, [r3, #0]
 800aab0:	b124      	cbz	r4, 800aabc <iprintf+0x14>
 800aab2:	69a3      	ldr	r3, [r4, #24]
 800aab4:	b913      	cbnz	r3, 800aabc <iprintf+0x14>
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 fa74 	bl	800afa4 <__sinit>
 800aabc:	ab05      	add	r3, sp, #20
 800aabe:	9a04      	ldr	r2, [sp, #16]
 800aac0:	68a1      	ldr	r1, [r4, #8]
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	4620      	mov	r0, r4
 800aac6:	f000 fc45 	bl	800b354 <_vfiprintf_r>
 800aaca:	b002      	add	sp, #8
 800aacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aad0:	b004      	add	sp, #16
 800aad2:	4770      	bx	lr
 800aad4:	20000030 	.word	0x20000030

0800aad8 <putchar>:
 800aad8:	4b09      	ldr	r3, [pc, #36]	; (800ab00 <putchar+0x28>)
 800aada:	b513      	push	{r0, r1, r4, lr}
 800aadc:	681c      	ldr	r4, [r3, #0]
 800aade:	4601      	mov	r1, r0
 800aae0:	b134      	cbz	r4, 800aaf0 <putchar+0x18>
 800aae2:	69a3      	ldr	r3, [r4, #24]
 800aae4:	b923      	cbnz	r3, 800aaf0 <putchar+0x18>
 800aae6:	9001      	str	r0, [sp, #4]
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 fa5b 	bl	800afa4 <__sinit>
 800aaee:	9901      	ldr	r1, [sp, #4]
 800aaf0:	68a2      	ldr	r2, [r4, #8]
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	b002      	add	sp, #8
 800aaf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aafa:	f000 beef 	b.w	800b8dc <_putc_r>
 800aafe:	bf00      	nop
 800ab00:	20000030 	.word	0x20000030

0800ab04 <_puts_r>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	460e      	mov	r6, r1
 800ab08:	4605      	mov	r5, r0
 800ab0a:	b118      	cbz	r0, 800ab14 <_puts_r+0x10>
 800ab0c:	6983      	ldr	r3, [r0, #24]
 800ab0e:	b90b      	cbnz	r3, 800ab14 <_puts_r+0x10>
 800ab10:	f000 fa48 	bl	800afa4 <__sinit>
 800ab14:	69ab      	ldr	r3, [r5, #24]
 800ab16:	68ac      	ldr	r4, [r5, #8]
 800ab18:	b913      	cbnz	r3, 800ab20 <_puts_r+0x1c>
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	f000 fa42 	bl	800afa4 <__sinit>
 800ab20:	4b2c      	ldr	r3, [pc, #176]	; (800abd4 <_puts_r+0xd0>)
 800ab22:	429c      	cmp	r4, r3
 800ab24:	d120      	bne.n	800ab68 <_puts_r+0x64>
 800ab26:	686c      	ldr	r4, [r5, #4]
 800ab28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab2a:	07db      	lsls	r3, r3, #31
 800ab2c:	d405      	bmi.n	800ab3a <_puts_r+0x36>
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	0598      	lsls	r0, r3, #22
 800ab32:	d402      	bmi.n	800ab3a <_puts_r+0x36>
 800ab34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab36:	f000 fad3 	bl	800b0e0 <__retarget_lock_acquire_recursive>
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	0719      	lsls	r1, r3, #28
 800ab3e:	d51d      	bpl.n	800ab7c <_puts_r+0x78>
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	b1db      	cbz	r3, 800ab7c <_puts_r+0x78>
 800ab44:	3e01      	subs	r6, #1
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	60a3      	str	r3, [r4, #8]
 800ab50:	bb39      	cbnz	r1, 800aba2 <_puts_r+0x9e>
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	da38      	bge.n	800abc8 <_puts_r+0xc4>
 800ab56:	4622      	mov	r2, r4
 800ab58:	210a      	movs	r1, #10
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f000 f848 	bl	800abf0 <__swbuf_r>
 800ab60:	3001      	adds	r0, #1
 800ab62:	d011      	beq.n	800ab88 <_puts_r+0x84>
 800ab64:	250a      	movs	r5, #10
 800ab66:	e011      	b.n	800ab8c <_puts_r+0x88>
 800ab68:	4b1b      	ldr	r3, [pc, #108]	; (800abd8 <_puts_r+0xd4>)
 800ab6a:	429c      	cmp	r4, r3
 800ab6c:	d101      	bne.n	800ab72 <_puts_r+0x6e>
 800ab6e:	68ac      	ldr	r4, [r5, #8]
 800ab70:	e7da      	b.n	800ab28 <_puts_r+0x24>
 800ab72:	4b1a      	ldr	r3, [pc, #104]	; (800abdc <_puts_r+0xd8>)
 800ab74:	429c      	cmp	r4, r3
 800ab76:	bf08      	it	eq
 800ab78:	68ec      	ldreq	r4, [r5, #12]
 800ab7a:	e7d5      	b.n	800ab28 <_puts_r+0x24>
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f000 f888 	bl	800ac94 <__swsetup_r>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d0dd      	beq.n	800ab44 <_puts_r+0x40>
 800ab88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ab8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab8e:	07da      	lsls	r2, r3, #31
 800ab90:	d405      	bmi.n	800ab9e <_puts_r+0x9a>
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	059b      	lsls	r3, r3, #22
 800ab96:	d402      	bmi.n	800ab9e <_puts_r+0x9a>
 800ab98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab9a:	f000 faa2 	bl	800b0e2 <__retarget_lock_release_recursive>
 800ab9e:	4628      	mov	r0, r5
 800aba0:	bd70      	pop	{r4, r5, r6, pc}
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	da04      	bge.n	800abb0 <_puts_r+0xac>
 800aba6:	69a2      	ldr	r2, [r4, #24]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	dc06      	bgt.n	800abba <_puts_r+0xb6>
 800abac:	290a      	cmp	r1, #10
 800abae:	d004      	beq.n	800abba <_puts_r+0xb6>
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	1c5a      	adds	r2, r3, #1
 800abb4:	6022      	str	r2, [r4, #0]
 800abb6:	7019      	strb	r1, [r3, #0]
 800abb8:	e7c5      	b.n	800ab46 <_puts_r+0x42>
 800abba:	4622      	mov	r2, r4
 800abbc:	4628      	mov	r0, r5
 800abbe:	f000 f817 	bl	800abf0 <__swbuf_r>
 800abc2:	3001      	adds	r0, #1
 800abc4:	d1bf      	bne.n	800ab46 <_puts_r+0x42>
 800abc6:	e7df      	b.n	800ab88 <_puts_r+0x84>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	250a      	movs	r5, #10
 800abcc:	1c5a      	adds	r2, r3, #1
 800abce:	6022      	str	r2, [r4, #0]
 800abd0:	701d      	strb	r5, [r3, #0]
 800abd2:	e7db      	b.n	800ab8c <_puts_r+0x88>
 800abd4:	0800c2e0 	.word	0x0800c2e0
 800abd8:	0800c300 	.word	0x0800c300
 800abdc:	0800c2c0 	.word	0x0800c2c0

0800abe0 <puts>:
 800abe0:	4b02      	ldr	r3, [pc, #8]	; (800abec <puts+0xc>)
 800abe2:	4601      	mov	r1, r0
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	f7ff bf8d 	b.w	800ab04 <_puts_r>
 800abea:	bf00      	nop
 800abec:	20000030 	.word	0x20000030

0800abf0 <__swbuf_r>:
 800abf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf2:	460e      	mov	r6, r1
 800abf4:	4614      	mov	r4, r2
 800abf6:	4605      	mov	r5, r0
 800abf8:	b118      	cbz	r0, 800ac02 <__swbuf_r+0x12>
 800abfa:	6983      	ldr	r3, [r0, #24]
 800abfc:	b90b      	cbnz	r3, 800ac02 <__swbuf_r+0x12>
 800abfe:	f000 f9d1 	bl	800afa4 <__sinit>
 800ac02:	4b21      	ldr	r3, [pc, #132]	; (800ac88 <__swbuf_r+0x98>)
 800ac04:	429c      	cmp	r4, r3
 800ac06:	d12b      	bne.n	800ac60 <__swbuf_r+0x70>
 800ac08:	686c      	ldr	r4, [r5, #4]
 800ac0a:	69a3      	ldr	r3, [r4, #24]
 800ac0c:	60a3      	str	r3, [r4, #8]
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	071a      	lsls	r2, r3, #28
 800ac12:	d52f      	bpl.n	800ac74 <__swbuf_r+0x84>
 800ac14:	6923      	ldr	r3, [r4, #16]
 800ac16:	b36b      	cbz	r3, 800ac74 <__swbuf_r+0x84>
 800ac18:	6923      	ldr	r3, [r4, #16]
 800ac1a:	6820      	ldr	r0, [r4, #0]
 800ac1c:	1ac0      	subs	r0, r0, r3
 800ac1e:	6963      	ldr	r3, [r4, #20]
 800ac20:	b2f6      	uxtb	r6, r6
 800ac22:	4283      	cmp	r3, r0
 800ac24:	4637      	mov	r7, r6
 800ac26:	dc04      	bgt.n	800ac32 <__swbuf_r+0x42>
 800ac28:	4621      	mov	r1, r4
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f000 f926 	bl	800ae7c <_fflush_r>
 800ac30:	bb30      	cbnz	r0, 800ac80 <__swbuf_r+0x90>
 800ac32:	68a3      	ldr	r3, [r4, #8]
 800ac34:	3b01      	subs	r3, #1
 800ac36:	60a3      	str	r3, [r4, #8]
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	6022      	str	r2, [r4, #0]
 800ac3e:	701e      	strb	r6, [r3, #0]
 800ac40:	6963      	ldr	r3, [r4, #20]
 800ac42:	3001      	adds	r0, #1
 800ac44:	4283      	cmp	r3, r0
 800ac46:	d004      	beq.n	800ac52 <__swbuf_r+0x62>
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	07db      	lsls	r3, r3, #31
 800ac4c:	d506      	bpl.n	800ac5c <__swbuf_r+0x6c>
 800ac4e:	2e0a      	cmp	r6, #10
 800ac50:	d104      	bne.n	800ac5c <__swbuf_r+0x6c>
 800ac52:	4621      	mov	r1, r4
 800ac54:	4628      	mov	r0, r5
 800ac56:	f000 f911 	bl	800ae7c <_fflush_r>
 800ac5a:	b988      	cbnz	r0, 800ac80 <__swbuf_r+0x90>
 800ac5c:	4638      	mov	r0, r7
 800ac5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac60:	4b0a      	ldr	r3, [pc, #40]	; (800ac8c <__swbuf_r+0x9c>)
 800ac62:	429c      	cmp	r4, r3
 800ac64:	d101      	bne.n	800ac6a <__swbuf_r+0x7a>
 800ac66:	68ac      	ldr	r4, [r5, #8]
 800ac68:	e7cf      	b.n	800ac0a <__swbuf_r+0x1a>
 800ac6a:	4b09      	ldr	r3, [pc, #36]	; (800ac90 <__swbuf_r+0xa0>)
 800ac6c:	429c      	cmp	r4, r3
 800ac6e:	bf08      	it	eq
 800ac70:	68ec      	ldreq	r4, [r5, #12]
 800ac72:	e7ca      	b.n	800ac0a <__swbuf_r+0x1a>
 800ac74:	4621      	mov	r1, r4
 800ac76:	4628      	mov	r0, r5
 800ac78:	f000 f80c 	bl	800ac94 <__swsetup_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d0cb      	beq.n	800ac18 <__swbuf_r+0x28>
 800ac80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac84:	e7ea      	b.n	800ac5c <__swbuf_r+0x6c>
 800ac86:	bf00      	nop
 800ac88:	0800c2e0 	.word	0x0800c2e0
 800ac8c:	0800c300 	.word	0x0800c300
 800ac90:	0800c2c0 	.word	0x0800c2c0

0800ac94 <__swsetup_r>:
 800ac94:	4b32      	ldr	r3, [pc, #200]	; (800ad60 <__swsetup_r+0xcc>)
 800ac96:	b570      	push	{r4, r5, r6, lr}
 800ac98:	681d      	ldr	r5, [r3, #0]
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	b125      	cbz	r5, 800acaa <__swsetup_r+0x16>
 800aca0:	69ab      	ldr	r3, [r5, #24]
 800aca2:	b913      	cbnz	r3, 800acaa <__swsetup_r+0x16>
 800aca4:	4628      	mov	r0, r5
 800aca6:	f000 f97d 	bl	800afa4 <__sinit>
 800acaa:	4b2e      	ldr	r3, [pc, #184]	; (800ad64 <__swsetup_r+0xd0>)
 800acac:	429c      	cmp	r4, r3
 800acae:	d10f      	bne.n	800acd0 <__swsetup_r+0x3c>
 800acb0:	686c      	ldr	r4, [r5, #4]
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acb8:	0719      	lsls	r1, r3, #28
 800acba:	d42c      	bmi.n	800ad16 <__swsetup_r+0x82>
 800acbc:	06dd      	lsls	r5, r3, #27
 800acbe:	d411      	bmi.n	800ace4 <__swsetup_r+0x50>
 800acc0:	2309      	movs	r3, #9
 800acc2:	6033      	str	r3, [r6, #0]
 800acc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acce:	e03e      	b.n	800ad4e <__swsetup_r+0xba>
 800acd0:	4b25      	ldr	r3, [pc, #148]	; (800ad68 <__swsetup_r+0xd4>)
 800acd2:	429c      	cmp	r4, r3
 800acd4:	d101      	bne.n	800acda <__swsetup_r+0x46>
 800acd6:	68ac      	ldr	r4, [r5, #8]
 800acd8:	e7eb      	b.n	800acb2 <__swsetup_r+0x1e>
 800acda:	4b24      	ldr	r3, [pc, #144]	; (800ad6c <__swsetup_r+0xd8>)
 800acdc:	429c      	cmp	r4, r3
 800acde:	bf08      	it	eq
 800ace0:	68ec      	ldreq	r4, [r5, #12]
 800ace2:	e7e6      	b.n	800acb2 <__swsetup_r+0x1e>
 800ace4:	0758      	lsls	r0, r3, #29
 800ace6:	d512      	bpl.n	800ad0e <__swsetup_r+0x7a>
 800ace8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acea:	b141      	cbz	r1, 800acfe <__swsetup_r+0x6a>
 800acec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acf0:	4299      	cmp	r1, r3
 800acf2:	d002      	beq.n	800acfa <__swsetup_r+0x66>
 800acf4:	4630      	mov	r0, r6
 800acf6:	f000 fa59 	bl	800b1ac <_free_r>
 800acfa:	2300      	movs	r3, #0
 800acfc:	6363      	str	r3, [r4, #52]	; 0x34
 800acfe:	89a3      	ldrh	r3, [r4, #12]
 800ad00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad04:	81a3      	strh	r3, [r4, #12]
 800ad06:	2300      	movs	r3, #0
 800ad08:	6063      	str	r3, [r4, #4]
 800ad0a:	6923      	ldr	r3, [r4, #16]
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	f043 0308 	orr.w	r3, r3, #8
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	b94b      	cbnz	r3, 800ad2e <__swsetup_r+0x9a>
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad24:	d003      	beq.n	800ad2e <__swsetup_r+0x9a>
 800ad26:	4621      	mov	r1, r4
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f000 f9ff 	bl	800b12c <__smakebuf_r>
 800ad2e:	89a0      	ldrh	r0, [r4, #12]
 800ad30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad34:	f010 0301 	ands.w	r3, r0, #1
 800ad38:	d00a      	beq.n	800ad50 <__swsetup_r+0xbc>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60a3      	str	r3, [r4, #8]
 800ad3e:	6963      	ldr	r3, [r4, #20]
 800ad40:	425b      	negs	r3, r3
 800ad42:	61a3      	str	r3, [r4, #24]
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	b943      	cbnz	r3, 800ad5a <__swsetup_r+0xc6>
 800ad48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad4c:	d1ba      	bne.n	800acc4 <__swsetup_r+0x30>
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}
 800ad50:	0781      	lsls	r1, r0, #30
 800ad52:	bf58      	it	pl
 800ad54:	6963      	ldrpl	r3, [r4, #20]
 800ad56:	60a3      	str	r3, [r4, #8]
 800ad58:	e7f4      	b.n	800ad44 <__swsetup_r+0xb0>
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	e7f7      	b.n	800ad4e <__swsetup_r+0xba>
 800ad5e:	bf00      	nop
 800ad60:	20000030 	.word	0x20000030
 800ad64:	0800c2e0 	.word	0x0800c2e0
 800ad68:	0800c300 	.word	0x0800c300
 800ad6c:	0800c2c0 	.word	0x0800c2c0

0800ad70 <__sflush_r>:
 800ad70:	898a      	ldrh	r2, [r1, #12]
 800ad72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad76:	4605      	mov	r5, r0
 800ad78:	0710      	lsls	r0, r2, #28
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	d458      	bmi.n	800ae30 <__sflush_r+0xc0>
 800ad7e:	684b      	ldr	r3, [r1, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	dc05      	bgt.n	800ad90 <__sflush_r+0x20>
 800ad84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	dc02      	bgt.n	800ad90 <__sflush_r+0x20>
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad92:	2e00      	cmp	r6, #0
 800ad94:	d0f9      	beq.n	800ad8a <__sflush_r+0x1a>
 800ad96:	2300      	movs	r3, #0
 800ad98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad9c:	682f      	ldr	r7, [r5, #0]
 800ad9e:	602b      	str	r3, [r5, #0]
 800ada0:	d032      	beq.n	800ae08 <__sflush_r+0x98>
 800ada2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	075a      	lsls	r2, r3, #29
 800ada8:	d505      	bpl.n	800adb6 <__sflush_r+0x46>
 800adaa:	6863      	ldr	r3, [r4, #4]
 800adac:	1ac0      	subs	r0, r0, r3
 800adae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adb0:	b10b      	cbz	r3, 800adb6 <__sflush_r+0x46>
 800adb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adb4:	1ac0      	subs	r0, r0, r3
 800adb6:	2300      	movs	r3, #0
 800adb8:	4602      	mov	r2, r0
 800adba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adbc:	6a21      	ldr	r1, [r4, #32]
 800adbe:	4628      	mov	r0, r5
 800adc0:	47b0      	blx	r6
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	d106      	bne.n	800add6 <__sflush_r+0x66>
 800adc8:	6829      	ldr	r1, [r5, #0]
 800adca:	291d      	cmp	r1, #29
 800adcc:	d82c      	bhi.n	800ae28 <__sflush_r+0xb8>
 800adce:	4a2a      	ldr	r2, [pc, #168]	; (800ae78 <__sflush_r+0x108>)
 800add0:	40ca      	lsrs	r2, r1
 800add2:	07d6      	lsls	r6, r2, #31
 800add4:	d528      	bpl.n	800ae28 <__sflush_r+0xb8>
 800add6:	2200      	movs	r2, #0
 800add8:	6062      	str	r2, [r4, #4]
 800adda:	04d9      	lsls	r1, r3, #19
 800addc:	6922      	ldr	r2, [r4, #16]
 800adde:	6022      	str	r2, [r4, #0]
 800ade0:	d504      	bpl.n	800adec <__sflush_r+0x7c>
 800ade2:	1c42      	adds	r2, r0, #1
 800ade4:	d101      	bne.n	800adea <__sflush_r+0x7a>
 800ade6:	682b      	ldr	r3, [r5, #0]
 800ade8:	b903      	cbnz	r3, 800adec <__sflush_r+0x7c>
 800adea:	6560      	str	r0, [r4, #84]	; 0x54
 800adec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adee:	602f      	str	r7, [r5, #0]
 800adf0:	2900      	cmp	r1, #0
 800adf2:	d0ca      	beq.n	800ad8a <__sflush_r+0x1a>
 800adf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adf8:	4299      	cmp	r1, r3
 800adfa:	d002      	beq.n	800ae02 <__sflush_r+0x92>
 800adfc:	4628      	mov	r0, r5
 800adfe:	f000 f9d5 	bl	800b1ac <_free_r>
 800ae02:	2000      	movs	r0, #0
 800ae04:	6360      	str	r0, [r4, #52]	; 0x34
 800ae06:	e7c1      	b.n	800ad8c <__sflush_r+0x1c>
 800ae08:	6a21      	ldr	r1, [r4, #32]
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	47b0      	blx	r6
 800ae10:	1c41      	adds	r1, r0, #1
 800ae12:	d1c7      	bne.n	800ada4 <__sflush_r+0x34>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0c4      	beq.n	800ada4 <__sflush_r+0x34>
 800ae1a:	2b1d      	cmp	r3, #29
 800ae1c:	d001      	beq.n	800ae22 <__sflush_r+0xb2>
 800ae1e:	2b16      	cmp	r3, #22
 800ae20:	d101      	bne.n	800ae26 <__sflush_r+0xb6>
 800ae22:	602f      	str	r7, [r5, #0]
 800ae24:	e7b1      	b.n	800ad8a <__sflush_r+0x1a>
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae2c:	81a3      	strh	r3, [r4, #12]
 800ae2e:	e7ad      	b.n	800ad8c <__sflush_r+0x1c>
 800ae30:	690f      	ldr	r7, [r1, #16]
 800ae32:	2f00      	cmp	r7, #0
 800ae34:	d0a9      	beq.n	800ad8a <__sflush_r+0x1a>
 800ae36:	0793      	lsls	r3, r2, #30
 800ae38:	680e      	ldr	r6, [r1, #0]
 800ae3a:	bf08      	it	eq
 800ae3c:	694b      	ldreq	r3, [r1, #20]
 800ae3e:	600f      	str	r7, [r1, #0]
 800ae40:	bf18      	it	ne
 800ae42:	2300      	movne	r3, #0
 800ae44:	eba6 0807 	sub.w	r8, r6, r7
 800ae48:	608b      	str	r3, [r1, #8]
 800ae4a:	f1b8 0f00 	cmp.w	r8, #0
 800ae4e:	dd9c      	ble.n	800ad8a <__sflush_r+0x1a>
 800ae50:	6a21      	ldr	r1, [r4, #32]
 800ae52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae54:	4643      	mov	r3, r8
 800ae56:	463a      	mov	r2, r7
 800ae58:	4628      	mov	r0, r5
 800ae5a:	47b0      	blx	r6
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	dc06      	bgt.n	800ae6e <__sflush_r+0xfe>
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae66:	81a3      	strh	r3, [r4, #12]
 800ae68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae6c:	e78e      	b.n	800ad8c <__sflush_r+0x1c>
 800ae6e:	4407      	add	r7, r0
 800ae70:	eba8 0800 	sub.w	r8, r8, r0
 800ae74:	e7e9      	b.n	800ae4a <__sflush_r+0xda>
 800ae76:	bf00      	nop
 800ae78:	20400001 	.word	0x20400001

0800ae7c <_fflush_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	690b      	ldr	r3, [r1, #16]
 800ae80:	4605      	mov	r5, r0
 800ae82:	460c      	mov	r4, r1
 800ae84:	b913      	cbnz	r3, 800ae8c <_fflush_r+0x10>
 800ae86:	2500      	movs	r5, #0
 800ae88:	4628      	mov	r0, r5
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	b118      	cbz	r0, 800ae96 <_fflush_r+0x1a>
 800ae8e:	6983      	ldr	r3, [r0, #24]
 800ae90:	b90b      	cbnz	r3, 800ae96 <_fflush_r+0x1a>
 800ae92:	f000 f887 	bl	800afa4 <__sinit>
 800ae96:	4b14      	ldr	r3, [pc, #80]	; (800aee8 <_fflush_r+0x6c>)
 800ae98:	429c      	cmp	r4, r3
 800ae9a:	d11b      	bne.n	800aed4 <_fflush_r+0x58>
 800ae9c:	686c      	ldr	r4, [r5, #4]
 800ae9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0ef      	beq.n	800ae86 <_fflush_r+0xa>
 800aea6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aea8:	07d0      	lsls	r0, r2, #31
 800aeaa:	d404      	bmi.n	800aeb6 <_fflush_r+0x3a>
 800aeac:	0599      	lsls	r1, r3, #22
 800aeae:	d402      	bmi.n	800aeb6 <_fflush_r+0x3a>
 800aeb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeb2:	f000 f915 	bl	800b0e0 <__retarget_lock_acquire_recursive>
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	4621      	mov	r1, r4
 800aeba:	f7ff ff59 	bl	800ad70 <__sflush_r>
 800aebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aec0:	07da      	lsls	r2, r3, #31
 800aec2:	4605      	mov	r5, r0
 800aec4:	d4e0      	bmi.n	800ae88 <_fflush_r+0xc>
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	059b      	lsls	r3, r3, #22
 800aeca:	d4dd      	bmi.n	800ae88 <_fflush_r+0xc>
 800aecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aece:	f000 f908 	bl	800b0e2 <__retarget_lock_release_recursive>
 800aed2:	e7d9      	b.n	800ae88 <_fflush_r+0xc>
 800aed4:	4b05      	ldr	r3, [pc, #20]	; (800aeec <_fflush_r+0x70>)
 800aed6:	429c      	cmp	r4, r3
 800aed8:	d101      	bne.n	800aede <_fflush_r+0x62>
 800aeda:	68ac      	ldr	r4, [r5, #8]
 800aedc:	e7df      	b.n	800ae9e <_fflush_r+0x22>
 800aede:	4b04      	ldr	r3, [pc, #16]	; (800aef0 <_fflush_r+0x74>)
 800aee0:	429c      	cmp	r4, r3
 800aee2:	bf08      	it	eq
 800aee4:	68ec      	ldreq	r4, [r5, #12]
 800aee6:	e7da      	b.n	800ae9e <_fflush_r+0x22>
 800aee8:	0800c2e0 	.word	0x0800c2e0
 800aeec:	0800c300 	.word	0x0800c300
 800aef0:	0800c2c0 	.word	0x0800c2c0

0800aef4 <std>:
 800aef4:	2300      	movs	r3, #0
 800aef6:	b510      	push	{r4, lr}
 800aef8:	4604      	mov	r4, r0
 800aefa:	e9c0 3300 	strd	r3, r3, [r0]
 800aefe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af02:	6083      	str	r3, [r0, #8]
 800af04:	8181      	strh	r1, [r0, #12]
 800af06:	6643      	str	r3, [r0, #100]	; 0x64
 800af08:	81c2      	strh	r2, [r0, #14]
 800af0a:	6183      	str	r3, [r0, #24]
 800af0c:	4619      	mov	r1, r3
 800af0e:	2208      	movs	r2, #8
 800af10:	305c      	adds	r0, #92	; 0x5c
 800af12:	f7ff fdc1 	bl	800aa98 <memset>
 800af16:	4b05      	ldr	r3, [pc, #20]	; (800af2c <std+0x38>)
 800af18:	6263      	str	r3, [r4, #36]	; 0x24
 800af1a:	4b05      	ldr	r3, [pc, #20]	; (800af30 <std+0x3c>)
 800af1c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af1e:	4b05      	ldr	r3, [pc, #20]	; (800af34 <std+0x40>)
 800af20:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af22:	4b05      	ldr	r3, [pc, #20]	; (800af38 <std+0x44>)
 800af24:	6224      	str	r4, [r4, #32]
 800af26:	6323      	str	r3, [r4, #48]	; 0x30
 800af28:	bd10      	pop	{r4, pc}
 800af2a:	bf00      	nop
 800af2c:	0800b98d 	.word	0x0800b98d
 800af30:	0800b9af 	.word	0x0800b9af
 800af34:	0800b9e7 	.word	0x0800b9e7
 800af38:	0800ba0b 	.word	0x0800ba0b

0800af3c <_cleanup_r>:
 800af3c:	4901      	ldr	r1, [pc, #4]	; (800af44 <_cleanup_r+0x8>)
 800af3e:	f000 b8af 	b.w	800b0a0 <_fwalk_reent>
 800af42:	bf00      	nop
 800af44:	0800ae7d 	.word	0x0800ae7d

0800af48 <__sfmoreglue>:
 800af48:	b570      	push	{r4, r5, r6, lr}
 800af4a:	1e4a      	subs	r2, r1, #1
 800af4c:	2568      	movs	r5, #104	; 0x68
 800af4e:	4355      	muls	r5, r2
 800af50:	460e      	mov	r6, r1
 800af52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af56:	f000 f979 	bl	800b24c <_malloc_r>
 800af5a:	4604      	mov	r4, r0
 800af5c:	b140      	cbz	r0, 800af70 <__sfmoreglue+0x28>
 800af5e:	2100      	movs	r1, #0
 800af60:	e9c0 1600 	strd	r1, r6, [r0]
 800af64:	300c      	adds	r0, #12
 800af66:	60a0      	str	r0, [r4, #8]
 800af68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af6c:	f7ff fd94 	bl	800aa98 <memset>
 800af70:	4620      	mov	r0, r4
 800af72:	bd70      	pop	{r4, r5, r6, pc}

0800af74 <__sfp_lock_acquire>:
 800af74:	4801      	ldr	r0, [pc, #4]	; (800af7c <__sfp_lock_acquire+0x8>)
 800af76:	f000 b8b3 	b.w	800b0e0 <__retarget_lock_acquire_recursive>
 800af7a:	bf00      	nop
 800af7c:	200015fc 	.word	0x200015fc

0800af80 <__sfp_lock_release>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__sfp_lock_release+0x8>)
 800af82:	f000 b8ae 	b.w	800b0e2 <__retarget_lock_release_recursive>
 800af86:	bf00      	nop
 800af88:	200015fc 	.word	0x200015fc

0800af8c <__sinit_lock_acquire>:
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <__sinit_lock_acquire+0x8>)
 800af8e:	f000 b8a7 	b.w	800b0e0 <__retarget_lock_acquire_recursive>
 800af92:	bf00      	nop
 800af94:	200015f7 	.word	0x200015f7

0800af98 <__sinit_lock_release>:
 800af98:	4801      	ldr	r0, [pc, #4]	; (800afa0 <__sinit_lock_release+0x8>)
 800af9a:	f000 b8a2 	b.w	800b0e2 <__retarget_lock_release_recursive>
 800af9e:	bf00      	nop
 800afa0:	200015f7 	.word	0x200015f7

0800afa4 <__sinit>:
 800afa4:	b510      	push	{r4, lr}
 800afa6:	4604      	mov	r4, r0
 800afa8:	f7ff fff0 	bl	800af8c <__sinit_lock_acquire>
 800afac:	69a3      	ldr	r3, [r4, #24]
 800afae:	b11b      	cbz	r3, 800afb8 <__sinit+0x14>
 800afb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb4:	f7ff bff0 	b.w	800af98 <__sinit_lock_release>
 800afb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afbc:	6523      	str	r3, [r4, #80]	; 0x50
 800afbe:	4b13      	ldr	r3, [pc, #76]	; (800b00c <__sinit+0x68>)
 800afc0:	4a13      	ldr	r2, [pc, #76]	; (800b010 <__sinit+0x6c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	62a2      	str	r2, [r4, #40]	; 0x28
 800afc6:	42a3      	cmp	r3, r4
 800afc8:	bf04      	itt	eq
 800afca:	2301      	moveq	r3, #1
 800afcc:	61a3      	streq	r3, [r4, #24]
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 f820 	bl	800b014 <__sfp>
 800afd4:	6060      	str	r0, [r4, #4]
 800afd6:	4620      	mov	r0, r4
 800afd8:	f000 f81c 	bl	800b014 <__sfp>
 800afdc:	60a0      	str	r0, [r4, #8]
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 f818 	bl	800b014 <__sfp>
 800afe4:	2200      	movs	r2, #0
 800afe6:	60e0      	str	r0, [r4, #12]
 800afe8:	2104      	movs	r1, #4
 800afea:	6860      	ldr	r0, [r4, #4]
 800afec:	f7ff ff82 	bl	800aef4 <std>
 800aff0:	68a0      	ldr	r0, [r4, #8]
 800aff2:	2201      	movs	r2, #1
 800aff4:	2109      	movs	r1, #9
 800aff6:	f7ff ff7d 	bl	800aef4 <std>
 800affa:	68e0      	ldr	r0, [r4, #12]
 800affc:	2202      	movs	r2, #2
 800affe:	2112      	movs	r1, #18
 800b000:	f7ff ff78 	bl	800aef4 <std>
 800b004:	2301      	movs	r3, #1
 800b006:	61a3      	str	r3, [r4, #24]
 800b008:	e7d2      	b.n	800afb0 <__sinit+0xc>
 800b00a:	bf00      	nop
 800b00c:	0800c2bc 	.word	0x0800c2bc
 800b010:	0800af3d 	.word	0x0800af3d

0800b014 <__sfp>:
 800b014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b016:	4607      	mov	r7, r0
 800b018:	f7ff ffac 	bl	800af74 <__sfp_lock_acquire>
 800b01c:	4b1e      	ldr	r3, [pc, #120]	; (800b098 <__sfp+0x84>)
 800b01e:	681e      	ldr	r6, [r3, #0]
 800b020:	69b3      	ldr	r3, [r6, #24]
 800b022:	b913      	cbnz	r3, 800b02a <__sfp+0x16>
 800b024:	4630      	mov	r0, r6
 800b026:	f7ff ffbd 	bl	800afa4 <__sinit>
 800b02a:	3648      	adds	r6, #72	; 0x48
 800b02c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b030:	3b01      	subs	r3, #1
 800b032:	d503      	bpl.n	800b03c <__sfp+0x28>
 800b034:	6833      	ldr	r3, [r6, #0]
 800b036:	b30b      	cbz	r3, 800b07c <__sfp+0x68>
 800b038:	6836      	ldr	r6, [r6, #0]
 800b03a:	e7f7      	b.n	800b02c <__sfp+0x18>
 800b03c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b040:	b9d5      	cbnz	r5, 800b078 <__sfp+0x64>
 800b042:	4b16      	ldr	r3, [pc, #88]	; (800b09c <__sfp+0x88>)
 800b044:	60e3      	str	r3, [r4, #12]
 800b046:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b04a:	6665      	str	r5, [r4, #100]	; 0x64
 800b04c:	f000 f847 	bl	800b0de <__retarget_lock_init_recursive>
 800b050:	f7ff ff96 	bl	800af80 <__sfp_lock_release>
 800b054:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b058:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b05c:	6025      	str	r5, [r4, #0]
 800b05e:	61a5      	str	r5, [r4, #24]
 800b060:	2208      	movs	r2, #8
 800b062:	4629      	mov	r1, r5
 800b064:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b068:	f7ff fd16 	bl	800aa98 <memset>
 800b06c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b070:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b074:	4620      	mov	r0, r4
 800b076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b078:	3468      	adds	r4, #104	; 0x68
 800b07a:	e7d9      	b.n	800b030 <__sfp+0x1c>
 800b07c:	2104      	movs	r1, #4
 800b07e:	4638      	mov	r0, r7
 800b080:	f7ff ff62 	bl	800af48 <__sfmoreglue>
 800b084:	4604      	mov	r4, r0
 800b086:	6030      	str	r0, [r6, #0]
 800b088:	2800      	cmp	r0, #0
 800b08a:	d1d5      	bne.n	800b038 <__sfp+0x24>
 800b08c:	f7ff ff78 	bl	800af80 <__sfp_lock_release>
 800b090:	230c      	movs	r3, #12
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	e7ee      	b.n	800b074 <__sfp+0x60>
 800b096:	bf00      	nop
 800b098:	0800c2bc 	.word	0x0800c2bc
 800b09c:	ffff0001 	.word	0xffff0001

0800b0a0 <_fwalk_reent>:
 800b0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	4688      	mov	r8, r1
 800b0a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0ac:	2700      	movs	r7, #0
 800b0ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0b2:	f1b9 0901 	subs.w	r9, r9, #1
 800b0b6:	d505      	bpl.n	800b0c4 <_fwalk_reent+0x24>
 800b0b8:	6824      	ldr	r4, [r4, #0]
 800b0ba:	2c00      	cmp	r4, #0
 800b0bc:	d1f7      	bne.n	800b0ae <_fwalk_reent+0xe>
 800b0be:	4638      	mov	r0, r7
 800b0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0c4:	89ab      	ldrh	r3, [r5, #12]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d907      	bls.n	800b0da <_fwalk_reent+0x3a>
 800b0ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	d003      	beq.n	800b0da <_fwalk_reent+0x3a>
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	47c0      	blx	r8
 800b0d8:	4307      	orrs	r7, r0
 800b0da:	3568      	adds	r5, #104	; 0x68
 800b0dc:	e7e9      	b.n	800b0b2 <_fwalk_reent+0x12>

0800b0de <__retarget_lock_init_recursive>:
 800b0de:	4770      	bx	lr

0800b0e0 <__retarget_lock_acquire_recursive>:
 800b0e0:	4770      	bx	lr

0800b0e2 <__retarget_lock_release_recursive>:
 800b0e2:	4770      	bx	lr

0800b0e4 <__swhatbuf_r>:
 800b0e4:	b570      	push	{r4, r5, r6, lr}
 800b0e6:	460e      	mov	r6, r1
 800b0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ec:	2900      	cmp	r1, #0
 800b0ee:	b096      	sub	sp, #88	; 0x58
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	461d      	mov	r5, r3
 800b0f4:	da07      	bge.n	800b106 <__swhatbuf_r+0x22>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	602b      	str	r3, [r5, #0]
 800b0fa:	89b3      	ldrh	r3, [r6, #12]
 800b0fc:	061a      	lsls	r2, r3, #24
 800b0fe:	d410      	bmi.n	800b122 <__swhatbuf_r+0x3e>
 800b100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b104:	e00e      	b.n	800b124 <__swhatbuf_r+0x40>
 800b106:	466a      	mov	r2, sp
 800b108:	f000 fca6 	bl	800ba58 <_fstat_r>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	dbf2      	blt.n	800b0f6 <__swhatbuf_r+0x12>
 800b110:	9a01      	ldr	r2, [sp, #4]
 800b112:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b116:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b11a:	425a      	negs	r2, r3
 800b11c:	415a      	adcs	r2, r3
 800b11e:	602a      	str	r2, [r5, #0]
 800b120:	e7ee      	b.n	800b100 <__swhatbuf_r+0x1c>
 800b122:	2340      	movs	r3, #64	; 0x40
 800b124:	2000      	movs	r0, #0
 800b126:	6023      	str	r3, [r4, #0]
 800b128:	b016      	add	sp, #88	; 0x58
 800b12a:	bd70      	pop	{r4, r5, r6, pc}

0800b12c <__smakebuf_r>:
 800b12c:	898b      	ldrh	r3, [r1, #12]
 800b12e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b130:	079d      	lsls	r5, r3, #30
 800b132:	4606      	mov	r6, r0
 800b134:	460c      	mov	r4, r1
 800b136:	d507      	bpl.n	800b148 <__smakebuf_r+0x1c>
 800b138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	6123      	str	r3, [r4, #16]
 800b140:	2301      	movs	r3, #1
 800b142:	6163      	str	r3, [r4, #20]
 800b144:	b002      	add	sp, #8
 800b146:	bd70      	pop	{r4, r5, r6, pc}
 800b148:	ab01      	add	r3, sp, #4
 800b14a:	466a      	mov	r2, sp
 800b14c:	f7ff ffca 	bl	800b0e4 <__swhatbuf_r>
 800b150:	9900      	ldr	r1, [sp, #0]
 800b152:	4605      	mov	r5, r0
 800b154:	4630      	mov	r0, r6
 800b156:	f000 f879 	bl	800b24c <_malloc_r>
 800b15a:	b948      	cbnz	r0, 800b170 <__smakebuf_r+0x44>
 800b15c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b160:	059a      	lsls	r2, r3, #22
 800b162:	d4ef      	bmi.n	800b144 <__smakebuf_r+0x18>
 800b164:	f023 0303 	bic.w	r3, r3, #3
 800b168:	f043 0302 	orr.w	r3, r3, #2
 800b16c:	81a3      	strh	r3, [r4, #12]
 800b16e:	e7e3      	b.n	800b138 <__smakebuf_r+0xc>
 800b170:	4b0d      	ldr	r3, [pc, #52]	; (800b1a8 <__smakebuf_r+0x7c>)
 800b172:	62b3      	str	r3, [r6, #40]	; 0x28
 800b174:	89a3      	ldrh	r3, [r4, #12]
 800b176:	6020      	str	r0, [r4, #0]
 800b178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b17c:	81a3      	strh	r3, [r4, #12]
 800b17e:	9b00      	ldr	r3, [sp, #0]
 800b180:	6163      	str	r3, [r4, #20]
 800b182:	9b01      	ldr	r3, [sp, #4]
 800b184:	6120      	str	r0, [r4, #16]
 800b186:	b15b      	cbz	r3, 800b1a0 <__smakebuf_r+0x74>
 800b188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b18c:	4630      	mov	r0, r6
 800b18e:	f000 fc75 	bl	800ba7c <_isatty_r>
 800b192:	b128      	cbz	r0, 800b1a0 <__smakebuf_r+0x74>
 800b194:	89a3      	ldrh	r3, [r4, #12]
 800b196:	f023 0303 	bic.w	r3, r3, #3
 800b19a:	f043 0301 	orr.w	r3, r3, #1
 800b19e:	81a3      	strh	r3, [r4, #12]
 800b1a0:	89a0      	ldrh	r0, [r4, #12]
 800b1a2:	4305      	orrs	r5, r0
 800b1a4:	81a5      	strh	r5, [r4, #12]
 800b1a6:	e7cd      	b.n	800b144 <__smakebuf_r+0x18>
 800b1a8:	0800af3d 	.word	0x0800af3d

0800b1ac <_free_r>:
 800b1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ae:	2900      	cmp	r1, #0
 800b1b0:	d048      	beq.n	800b244 <_free_r+0x98>
 800b1b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1b6:	9001      	str	r0, [sp, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f1a1 0404 	sub.w	r4, r1, #4
 800b1be:	bfb8      	it	lt
 800b1c0:	18e4      	addlt	r4, r4, r3
 800b1c2:	f000 fc7d 	bl	800bac0 <__malloc_lock>
 800b1c6:	4a20      	ldr	r2, [pc, #128]	; (800b248 <_free_r+0x9c>)
 800b1c8:	9801      	ldr	r0, [sp, #4]
 800b1ca:	6813      	ldr	r3, [r2, #0]
 800b1cc:	4615      	mov	r5, r2
 800b1ce:	b933      	cbnz	r3, 800b1de <_free_r+0x32>
 800b1d0:	6063      	str	r3, [r4, #4]
 800b1d2:	6014      	str	r4, [r2, #0]
 800b1d4:	b003      	add	sp, #12
 800b1d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1da:	f000 bc77 	b.w	800bacc <__malloc_unlock>
 800b1de:	42a3      	cmp	r3, r4
 800b1e0:	d90b      	bls.n	800b1fa <_free_r+0x4e>
 800b1e2:	6821      	ldr	r1, [r4, #0]
 800b1e4:	1862      	adds	r2, r4, r1
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	bf04      	itt	eq
 800b1ea:	681a      	ldreq	r2, [r3, #0]
 800b1ec:	685b      	ldreq	r3, [r3, #4]
 800b1ee:	6063      	str	r3, [r4, #4]
 800b1f0:	bf04      	itt	eq
 800b1f2:	1852      	addeq	r2, r2, r1
 800b1f4:	6022      	streq	r2, [r4, #0]
 800b1f6:	602c      	str	r4, [r5, #0]
 800b1f8:	e7ec      	b.n	800b1d4 <_free_r+0x28>
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	b10b      	cbz	r3, 800b204 <_free_r+0x58>
 800b200:	42a3      	cmp	r3, r4
 800b202:	d9fa      	bls.n	800b1fa <_free_r+0x4e>
 800b204:	6811      	ldr	r1, [r2, #0]
 800b206:	1855      	adds	r5, r2, r1
 800b208:	42a5      	cmp	r5, r4
 800b20a:	d10b      	bne.n	800b224 <_free_r+0x78>
 800b20c:	6824      	ldr	r4, [r4, #0]
 800b20e:	4421      	add	r1, r4
 800b210:	1854      	adds	r4, r2, r1
 800b212:	42a3      	cmp	r3, r4
 800b214:	6011      	str	r1, [r2, #0]
 800b216:	d1dd      	bne.n	800b1d4 <_free_r+0x28>
 800b218:	681c      	ldr	r4, [r3, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	6053      	str	r3, [r2, #4]
 800b21e:	4421      	add	r1, r4
 800b220:	6011      	str	r1, [r2, #0]
 800b222:	e7d7      	b.n	800b1d4 <_free_r+0x28>
 800b224:	d902      	bls.n	800b22c <_free_r+0x80>
 800b226:	230c      	movs	r3, #12
 800b228:	6003      	str	r3, [r0, #0]
 800b22a:	e7d3      	b.n	800b1d4 <_free_r+0x28>
 800b22c:	6825      	ldr	r5, [r4, #0]
 800b22e:	1961      	adds	r1, r4, r5
 800b230:	428b      	cmp	r3, r1
 800b232:	bf04      	itt	eq
 800b234:	6819      	ldreq	r1, [r3, #0]
 800b236:	685b      	ldreq	r3, [r3, #4]
 800b238:	6063      	str	r3, [r4, #4]
 800b23a:	bf04      	itt	eq
 800b23c:	1949      	addeq	r1, r1, r5
 800b23e:	6021      	streq	r1, [r4, #0]
 800b240:	6054      	str	r4, [r2, #4]
 800b242:	e7c7      	b.n	800b1d4 <_free_r+0x28>
 800b244:	b003      	add	sp, #12
 800b246:	bd30      	pop	{r4, r5, pc}
 800b248:	20001388 	.word	0x20001388

0800b24c <_malloc_r>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	1ccd      	adds	r5, r1, #3
 800b250:	f025 0503 	bic.w	r5, r5, #3
 800b254:	3508      	adds	r5, #8
 800b256:	2d0c      	cmp	r5, #12
 800b258:	bf38      	it	cc
 800b25a:	250c      	movcc	r5, #12
 800b25c:	2d00      	cmp	r5, #0
 800b25e:	4606      	mov	r6, r0
 800b260:	db01      	blt.n	800b266 <_malloc_r+0x1a>
 800b262:	42a9      	cmp	r1, r5
 800b264:	d903      	bls.n	800b26e <_malloc_r+0x22>
 800b266:	230c      	movs	r3, #12
 800b268:	6033      	str	r3, [r6, #0]
 800b26a:	2000      	movs	r0, #0
 800b26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b26e:	f000 fc27 	bl	800bac0 <__malloc_lock>
 800b272:	4921      	ldr	r1, [pc, #132]	; (800b2f8 <_malloc_r+0xac>)
 800b274:	680a      	ldr	r2, [r1, #0]
 800b276:	4614      	mov	r4, r2
 800b278:	b99c      	cbnz	r4, 800b2a2 <_malloc_r+0x56>
 800b27a:	4f20      	ldr	r7, [pc, #128]	; (800b2fc <_malloc_r+0xb0>)
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	b923      	cbnz	r3, 800b28a <_malloc_r+0x3e>
 800b280:	4621      	mov	r1, r4
 800b282:	4630      	mov	r0, r6
 800b284:	f000 fb72 	bl	800b96c <_sbrk_r>
 800b288:	6038      	str	r0, [r7, #0]
 800b28a:	4629      	mov	r1, r5
 800b28c:	4630      	mov	r0, r6
 800b28e:	f000 fb6d 	bl	800b96c <_sbrk_r>
 800b292:	1c43      	adds	r3, r0, #1
 800b294:	d123      	bne.n	800b2de <_malloc_r+0x92>
 800b296:	230c      	movs	r3, #12
 800b298:	6033      	str	r3, [r6, #0]
 800b29a:	4630      	mov	r0, r6
 800b29c:	f000 fc16 	bl	800bacc <__malloc_unlock>
 800b2a0:	e7e3      	b.n	800b26a <_malloc_r+0x1e>
 800b2a2:	6823      	ldr	r3, [r4, #0]
 800b2a4:	1b5b      	subs	r3, r3, r5
 800b2a6:	d417      	bmi.n	800b2d8 <_malloc_r+0x8c>
 800b2a8:	2b0b      	cmp	r3, #11
 800b2aa:	d903      	bls.n	800b2b4 <_malloc_r+0x68>
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	441c      	add	r4, r3
 800b2b0:	6025      	str	r5, [r4, #0]
 800b2b2:	e004      	b.n	800b2be <_malloc_r+0x72>
 800b2b4:	6863      	ldr	r3, [r4, #4]
 800b2b6:	42a2      	cmp	r2, r4
 800b2b8:	bf0c      	ite	eq
 800b2ba:	600b      	streq	r3, [r1, #0]
 800b2bc:	6053      	strne	r3, [r2, #4]
 800b2be:	4630      	mov	r0, r6
 800b2c0:	f000 fc04 	bl	800bacc <__malloc_unlock>
 800b2c4:	f104 000b 	add.w	r0, r4, #11
 800b2c8:	1d23      	adds	r3, r4, #4
 800b2ca:	f020 0007 	bic.w	r0, r0, #7
 800b2ce:	1ac2      	subs	r2, r0, r3
 800b2d0:	d0cc      	beq.n	800b26c <_malloc_r+0x20>
 800b2d2:	1a1b      	subs	r3, r3, r0
 800b2d4:	50a3      	str	r3, [r4, r2]
 800b2d6:	e7c9      	b.n	800b26c <_malloc_r+0x20>
 800b2d8:	4622      	mov	r2, r4
 800b2da:	6864      	ldr	r4, [r4, #4]
 800b2dc:	e7cc      	b.n	800b278 <_malloc_r+0x2c>
 800b2de:	1cc4      	adds	r4, r0, #3
 800b2e0:	f024 0403 	bic.w	r4, r4, #3
 800b2e4:	42a0      	cmp	r0, r4
 800b2e6:	d0e3      	beq.n	800b2b0 <_malloc_r+0x64>
 800b2e8:	1a21      	subs	r1, r4, r0
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	f000 fb3e 	bl	800b96c <_sbrk_r>
 800b2f0:	3001      	adds	r0, #1
 800b2f2:	d1dd      	bne.n	800b2b0 <_malloc_r+0x64>
 800b2f4:	e7cf      	b.n	800b296 <_malloc_r+0x4a>
 800b2f6:	bf00      	nop
 800b2f8:	20001388 	.word	0x20001388
 800b2fc:	2000138c 	.word	0x2000138c

0800b300 <__sfputc_r>:
 800b300:	6893      	ldr	r3, [r2, #8]
 800b302:	3b01      	subs	r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	b410      	push	{r4}
 800b308:	6093      	str	r3, [r2, #8]
 800b30a:	da08      	bge.n	800b31e <__sfputc_r+0x1e>
 800b30c:	6994      	ldr	r4, [r2, #24]
 800b30e:	42a3      	cmp	r3, r4
 800b310:	db01      	blt.n	800b316 <__sfputc_r+0x16>
 800b312:	290a      	cmp	r1, #10
 800b314:	d103      	bne.n	800b31e <__sfputc_r+0x1e>
 800b316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b31a:	f7ff bc69 	b.w	800abf0 <__swbuf_r>
 800b31e:	6813      	ldr	r3, [r2, #0]
 800b320:	1c58      	adds	r0, r3, #1
 800b322:	6010      	str	r0, [r2, #0]
 800b324:	7019      	strb	r1, [r3, #0]
 800b326:	4608      	mov	r0, r1
 800b328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <__sfputs_r>:
 800b32e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b330:	4606      	mov	r6, r0
 800b332:	460f      	mov	r7, r1
 800b334:	4614      	mov	r4, r2
 800b336:	18d5      	adds	r5, r2, r3
 800b338:	42ac      	cmp	r4, r5
 800b33a:	d101      	bne.n	800b340 <__sfputs_r+0x12>
 800b33c:	2000      	movs	r0, #0
 800b33e:	e007      	b.n	800b350 <__sfputs_r+0x22>
 800b340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b344:	463a      	mov	r2, r7
 800b346:	4630      	mov	r0, r6
 800b348:	f7ff ffda 	bl	800b300 <__sfputc_r>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d1f3      	bne.n	800b338 <__sfputs_r+0xa>
 800b350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b354 <_vfiprintf_r>:
 800b354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b358:	460d      	mov	r5, r1
 800b35a:	b09d      	sub	sp, #116	; 0x74
 800b35c:	4614      	mov	r4, r2
 800b35e:	4698      	mov	r8, r3
 800b360:	4606      	mov	r6, r0
 800b362:	b118      	cbz	r0, 800b36c <_vfiprintf_r+0x18>
 800b364:	6983      	ldr	r3, [r0, #24]
 800b366:	b90b      	cbnz	r3, 800b36c <_vfiprintf_r+0x18>
 800b368:	f7ff fe1c 	bl	800afa4 <__sinit>
 800b36c:	4b89      	ldr	r3, [pc, #548]	; (800b594 <_vfiprintf_r+0x240>)
 800b36e:	429d      	cmp	r5, r3
 800b370:	d11b      	bne.n	800b3aa <_vfiprintf_r+0x56>
 800b372:	6875      	ldr	r5, [r6, #4]
 800b374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b376:	07d9      	lsls	r1, r3, #31
 800b378:	d405      	bmi.n	800b386 <_vfiprintf_r+0x32>
 800b37a:	89ab      	ldrh	r3, [r5, #12]
 800b37c:	059a      	lsls	r2, r3, #22
 800b37e:	d402      	bmi.n	800b386 <_vfiprintf_r+0x32>
 800b380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b382:	f7ff fead 	bl	800b0e0 <__retarget_lock_acquire_recursive>
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	071b      	lsls	r3, r3, #28
 800b38a:	d501      	bpl.n	800b390 <_vfiprintf_r+0x3c>
 800b38c:	692b      	ldr	r3, [r5, #16]
 800b38e:	b9eb      	cbnz	r3, 800b3cc <_vfiprintf_r+0x78>
 800b390:	4629      	mov	r1, r5
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff fc7e 	bl	800ac94 <__swsetup_r>
 800b398:	b1c0      	cbz	r0, 800b3cc <_vfiprintf_r+0x78>
 800b39a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b39c:	07dc      	lsls	r4, r3, #31
 800b39e:	d50e      	bpl.n	800b3be <_vfiprintf_r+0x6a>
 800b3a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3a4:	b01d      	add	sp, #116	; 0x74
 800b3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3aa:	4b7b      	ldr	r3, [pc, #492]	; (800b598 <_vfiprintf_r+0x244>)
 800b3ac:	429d      	cmp	r5, r3
 800b3ae:	d101      	bne.n	800b3b4 <_vfiprintf_r+0x60>
 800b3b0:	68b5      	ldr	r5, [r6, #8]
 800b3b2:	e7df      	b.n	800b374 <_vfiprintf_r+0x20>
 800b3b4:	4b79      	ldr	r3, [pc, #484]	; (800b59c <_vfiprintf_r+0x248>)
 800b3b6:	429d      	cmp	r5, r3
 800b3b8:	bf08      	it	eq
 800b3ba:	68f5      	ldreq	r5, [r6, #12]
 800b3bc:	e7da      	b.n	800b374 <_vfiprintf_r+0x20>
 800b3be:	89ab      	ldrh	r3, [r5, #12]
 800b3c0:	0598      	lsls	r0, r3, #22
 800b3c2:	d4ed      	bmi.n	800b3a0 <_vfiprintf_r+0x4c>
 800b3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3c6:	f7ff fe8c 	bl	800b0e2 <__retarget_lock_release_recursive>
 800b3ca:	e7e9      	b.n	800b3a0 <_vfiprintf_r+0x4c>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b3d0:	2320      	movs	r3, #32
 800b3d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3da:	2330      	movs	r3, #48	; 0x30
 800b3dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5a0 <_vfiprintf_r+0x24c>
 800b3e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3e4:	f04f 0901 	mov.w	r9, #1
 800b3e8:	4623      	mov	r3, r4
 800b3ea:	469a      	mov	sl, r3
 800b3ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3f0:	b10a      	cbz	r2, 800b3f6 <_vfiprintf_r+0xa2>
 800b3f2:	2a25      	cmp	r2, #37	; 0x25
 800b3f4:	d1f9      	bne.n	800b3ea <_vfiprintf_r+0x96>
 800b3f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b3fa:	d00b      	beq.n	800b414 <_vfiprintf_r+0xc0>
 800b3fc:	465b      	mov	r3, fp
 800b3fe:	4622      	mov	r2, r4
 800b400:	4629      	mov	r1, r5
 800b402:	4630      	mov	r0, r6
 800b404:	f7ff ff93 	bl	800b32e <__sfputs_r>
 800b408:	3001      	adds	r0, #1
 800b40a:	f000 80aa 	beq.w	800b562 <_vfiprintf_r+0x20e>
 800b40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b410:	445a      	add	r2, fp
 800b412:	9209      	str	r2, [sp, #36]	; 0x24
 800b414:	f89a 3000 	ldrb.w	r3, [sl]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 80a2 	beq.w	800b562 <_vfiprintf_r+0x20e>
 800b41e:	2300      	movs	r3, #0
 800b420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b428:	f10a 0a01 	add.w	sl, sl, #1
 800b42c:	9304      	str	r3, [sp, #16]
 800b42e:	9307      	str	r3, [sp, #28]
 800b430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b434:	931a      	str	r3, [sp, #104]	; 0x68
 800b436:	4654      	mov	r4, sl
 800b438:	2205      	movs	r2, #5
 800b43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b43e:	4858      	ldr	r0, [pc, #352]	; (800b5a0 <_vfiprintf_r+0x24c>)
 800b440:	f7f4 fea6 	bl	8000190 <memchr>
 800b444:	9a04      	ldr	r2, [sp, #16]
 800b446:	b9d8      	cbnz	r0, 800b480 <_vfiprintf_r+0x12c>
 800b448:	06d1      	lsls	r1, r2, #27
 800b44a:	bf44      	itt	mi
 800b44c:	2320      	movmi	r3, #32
 800b44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b452:	0713      	lsls	r3, r2, #28
 800b454:	bf44      	itt	mi
 800b456:	232b      	movmi	r3, #43	; 0x2b
 800b458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b45c:	f89a 3000 	ldrb.w	r3, [sl]
 800b460:	2b2a      	cmp	r3, #42	; 0x2a
 800b462:	d015      	beq.n	800b490 <_vfiprintf_r+0x13c>
 800b464:	9a07      	ldr	r2, [sp, #28]
 800b466:	4654      	mov	r4, sl
 800b468:	2000      	movs	r0, #0
 800b46a:	f04f 0c0a 	mov.w	ip, #10
 800b46e:	4621      	mov	r1, r4
 800b470:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b474:	3b30      	subs	r3, #48	; 0x30
 800b476:	2b09      	cmp	r3, #9
 800b478:	d94e      	bls.n	800b518 <_vfiprintf_r+0x1c4>
 800b47a:	b1b0      	cbz	r0, 800b4aa <_vfiprintf_r+0x156>
 800b47c:	9207      	str	r2, [sp, #28]
 800b47e:	e014      	b.n	800b4aa <_vfiprintf_r+0x156>
 800b480:	eba0 0308 	sub.w	r3, r0, r8
 800b484:	fa09 f303 	lsl.w	r3, r9, r3
 800b488:	4313      	orrs	r3, r2
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	46a2      	mov	sl, r4
 800b48e:	e7d2      	b.n	800b436 <_vfiprintf_r+0xe2>
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	1d19      	adds	r1, r3, #4
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	9103      	str	r1, [sp, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	bfbb      	ittet	lt
 800b49c:	425b      	neglt	r3, r3
 800b49e:	f042 0202 	orrlt.w	r2, r2, #2
 800b4a2:	9307      	strge	r3, [sp, #28]
 800b4a4:	9307      	strlt	r3, [sp, #28]
 800b4a6:	bfb8      	it	lt
 800b4a8:	9204      	strlt	r2, [sp, #16]
 800b4aa:	7823      	ldrb	r3, [r4, #0]
 800b4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ae:	d10c      	bne.n	800b4ca <_vfiprintf_r+0x176>
 800b4b0:	7863      	ldrb	r3, [r4, #1]
 800b4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b4:	d135      	bne.n	800b522 <_vfiprintf_r+0x1ce>
 800b4b6:	9b03      	ldr	r3, [sp, #12]
 800b4b8:	1d1a      	adds	r2, r3, #4
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	9203      	str	r2, [sp, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	bfb8      	it	lt
 800b4c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b4c6:	3402      	adds	r4, #2
 800b4c8:	9305      	str	r3, [sp, #20]
 800b4ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5b0 <_vfiprintf_r+0x25c>
 800b4ce:	7821      	ldrb	r1, [r4, #0]
 800b4d0:	2203      	movs	r2, #3
 800b4d2:	4650      	mov	r0, sl
 800b4d4:	f7f4 fe5c 	bl	8000190 <memchr>
 800b4d8:	b140      	cbz	r0, 800b4ec <_vfiprintf_r+0x198>
 800b4da:	2340      	movs	r3, #64	; 0x40
 800b4dc:	eba0 000a 	sub.w	r0, r0, sl
 800b4e0:	fa03 f000 	lsl.w	r0, r3, r0
 800b4e4:	9b04      	ldr	r3, [sp, #16]
 800b4e6:	4303      	orrs	r3, r0
 800b4e8:	3401      	adds	r4, #1
 800b4ea:	9304      	str	r3, [sp, #16]
 800b4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f0:	482c      	ldr	r0, [pc, #176]	; (800b5a4 <_vfiprintf_r+0x250>)
 800b4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4f6:	2206      	movs	r2, #6
 800b4f8:	f7f4 fe4a 	bl	8000190 <memchr>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d03f      	beq.n	800b580 <_vfiprintf_r+0x22c>
 800b500:	4b29      	ldr	r3, [pc, #164]	; (800b5a8 <_vfiprintf_r+0x254>)
 800b502:	bb1b      	cbnz	r3, 800b54c <_vfiprintf_r+0x1f8>
 800b504:	9b03      	ldr	r3, [sp, #12]
 800b506:	3307      	adds	r3, #7
 800b508:	f023 0307 	bic.w	r3, r3, #7
 800b50c:	3308      	adds	r3, #8
 800b50e:	9303      	str	r3, [sp, #12]
 800b510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b512:	443b      	add	r3, r7
 800b514:	9309      	str	r3, [sp, #36]	; 0x24
 800b516:	e767      	b.n	800b3e8 <_vfiprintf_r+0x94>
 800b518:	fb0c 3202 	mla	r2, ip, r2, r3
 800b51c:	460c      	mov	r4, r1
 800b51e:	2001      	movs	r0, #1
 800b520:	e7a5      	b.n	800b46e <_vfiprintf_r+0x11a>
 800b522:	2300      	movs	r3, #0
 800b524:	3401      	adds	r4, #1
 800b526:	9305      	str	r3, [sp, #20]
 800b528:	4619      	mov	r1, r3
 800b52a:	f04f 0c0a 	mov.w	ip, #10
 800b52e:	4620      	mov	r0, r4
 800b530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b534:	3a30      	subs	r2, #48	; 0x30
 800b536:	2a09      	cmp	r2, #9
 800b538:	d903      	bls.n	800b542 <_vfiprintf_r+0x1ee>
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0c5      	beq.n	800b4ca <_vfiprintf_r+0x176>
 800b53e:	9105      	str	r1, [sp, #20]
 800b540:	e7c3      	b.n	800b4ca <_vfiprintf_r+0x176>
 800b542:	fb0c 2101 	mla	r1, ip, r1, r2
 800b546:	4604      	mov	r4, r0
 800b548:	2301      	movs	r3, #1
 800b54a:	e7f0      	b.n	800b52e <_vfiprintf_r+0x1da>
 800b54c:	ab03      	add	r3, sp, #12
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	462a      	mov	r2, r5
 800b552:	4b16      	ldr	r3, [pc, #88]	; (800b5ac <_vfiprintf_r+0x258>)
 800b554:	a904      	add	r1, sp, #16
 800b556:	4630      	mov	r0, r6
 800b558:	f3af 8000 	nop.w
 800b55c:	4607      	mov	r7, r0
 800b55e:	1c78      	adds	r0, r7, #1
 800b560:	d1d6      	bne.n	800b510 <_vfiprintf_r+0x1bc>
 800b562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b564:	07d9      	lsls	r1, r3, #31
 800b566:	d405      	bmi.n	800b574 <_vfiprintf_r+0x220>
 800b568:	89ab      	ldrh	r3, [r5, #12]
 800b56a:	059a      	lsls	r2, r3, #22
 800b56c:	d402      	bmi.n	800b574 <_vfiprintf_r+0x220>
 800b56e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b570:	f7ff fdb7 	bl	800b0e2 <__retarget_lock_release_recursive>
 800b574:	89ab      	ldrh	r3, [r5, #12]
 800b576:	065b      	lsls	r3, r3, #25
 800b578:	f53f af12 	bmi.w	800b3a0 <_vfiprintf_r+0x4c>
 800b57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b57e:	e711      	b.n	800b3a4 <_vfiprintf_r+0x50>
 800b580:	ab03      	add	r3, sp, #12
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	462a      	mov	r2, r5
 800b586:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <_vfiprintf_r+0x258>)
 800b588:	a904      	add	r1, sp, #16
 800b58a:	4630      	mov	r0, r6
 800b58c:	f000 f880 	bl	800b690 <_printf_i>
 800b590:	e7e4      	b.n	800b55c <_vfiprintf_r+0x208>
 800b592:	bf00      	nop
 800b594:	0800c2e0 	.word	0x0800c2e0
 800b598:	0800c300 	.word	0x0800c300
 800b59c:	0800c2c0 	.word	0x0800c2c0
 800b5a0:	0800c320 	.word	0x0800c320
 800b5a4:	0800c32a 	.word	0x0800c32a
 800b5a8:	00000000 	.word	0x00000000
 800b5ac:	0800b32f 	.word	0x0800b32f
 800b5b0:	0800c326 	.word	0x0800c326

0800b5b4 <_printf_common>:
 800b5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b8:	4616      	mov	r6, r2
 800b5ba:	4699      	mov	r9, r3
 800b5bc:	688a      	ldr	r2, [r1, #8]
 800b5be:	690b      	ldr	r3, [r1, #16]
 800b5c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	bfb8      	it	lt
 800b5c8:	4613      	movlt	r3, r2
 800b5ca:	6033      	str	r3, [r6, #0]
 800b5cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	b10a      	cbz	r2, 800b5da <_printf_common+0x26>
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	6033      	str	r3, [r6, #0]
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	0699      	lsls	r1, r3, #26
 800b5de:	bf42      	ittt	mi
 800b5e0:	6833      	ldrmi	r3, [r6, #0]
 800b5e2:	3302      	addmi	r3, #2
 800b5e4:	6033      	strmi	r3, [r6, #0]
 800b5e6:	6825      	ldr	r5, [r4, #0]
 800b5e8:	f015 0506 	ands.w	r5, r5, #6
 800b5ec:	d106      	bne.n	800b5fc <_printf_common+0x48>
 800b5ee:	f104 0a19 	add.w	sl, r4, #25
 800b5f2:	68e3      	ldr	r3, [r4, #12]
 800b5f4:	6832      	ldr	r2, [r6, #0]
 800b5f6:	1a9b      	subs	r3, r3, r2
 800b5f8:	42ab      	cmp	r3, r5
 800b5fa:	dc26      	bgt.n	800b64a <_printf_common+0x96>
 800b5fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b600:	1e13      	subs	r3, r2, #0
 800b602:	6822      	ldr	r2, [r4, #0]
 800b604:	bf18      	it	ne
 800b606:	2301      	movne	r3, #1
 800b608:	0692      	lsls	r2, r2, #26
 800b60a:	d42b      	bmi.n	800b664 <_printf_common+0xb0>
 800b60c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b610:	4649      	mov	r1, r9
 800b612:	4638      	mov	r0, r7
 800b614:	47c0      	blx	r8
 800b616:	3001      	adds	r0, #1
 800b618:	d01e      	beq.n	800b658 <_printf_common+0xa4>
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	68e5      	ldr	r5, [r4, #12]
 800b61e:	6832      	ldr	r2, [r6, #0]
 800b620:	f003 0306 	and.w	r3, r3, #6
 800b624:	2b04      	cmp	r3, #4
 800b626:	bf08      	it	eq
 800b628:	1aad      	subeq	r5, r5, r2
 800b62a:	68a3      	ldr	r3, [r4, #8]
 800b62c:	6922      	ldr	r2, [r4, #16]
 800b62e:	bf0c      	ite	eq
 800b630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b634:	2500      	movne	r5, #0
 800b636:	4293      	cmp	r3, r2
 800b638:	bfc4      	itt	gt
 800b63a:	1a9b      	subgt	r3, r3, r2
 800b63c:	18ed      	addgt	r5, r5, r3
 800b63e:	2600      	movs	r6, #0
 800b640:	341a      	adds	r4, #26
 800b642:	42b5      	cmp	r5, r6
 800b644:	d11a      	bne.n	800b67c <_printf_common+0xc8>
 800b646:	2000      	movs	r0, #0
 800b648:	e008      	b.n	800b65c <_printf_common+0xa8>
 800b64a:	2301      	movs	r3, #1
 800b64c:	4652      	mov	r2, sl
 800b64e:	4649      	mov	r1, r9
 800b650:	4638      	mov	r0, r7
 800b652:	47c0      	blx	r8
 800b654:	3001      	adds	r0, #1
 800b656:	d103      	bne.n	800b660 <_printf_common+0xac>
 800b658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b660:	3501      	adds	r5, #1
 800b662:	e7c6      	b.n	800b5f2 <_printf_common+0x3e>
 800b664:	18e1      	adds	r1, r4, r3
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	2030      	movs	r0, #48	; 0x30
 800b66a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b66e:	4422      	add	r2, r4
 800b670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b678:	3302      	adds	r3, #2
 800b67a:	e7c7      	b.n	800b60c <_printf_common+0x58>
 800b67c:	2301      	movs	r3, #1
 800b67e:	4622      	mov	r2, r4
 800b680:	4649      	mov	r1, r9
 800b682:	4638      	mov	r0, r7
 800b684:	47c0      	blx	r8
 800b686:	3001      	adds	r0, #1
 800b688:	d0e6      	beq.n	800b658 <_printf_common+0xa4>
 800b68a:	3601      	adds	r6, #1
 800b68c:	e7d9      	b.n	800b642 <_printf_common+0x8e>
	...

0800b690 <_printf_i>:
 800b690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	460c      	mov	r4, r1
 800b696:	4691      	mov	r9, r2
 800b698:	7e27      	ldrb	r7, [r4, #24]
 800b69a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b69c:	2f78      	cmp	r7, #120	; 0x78
 800b69e:	4680      	mov	r8, r0
 800b6a0:	469a      	mov	sl, r3
 800b6a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6a6:	d807      	bhi.n	800b6b8 <_printf_i+0x28>
 800b6a8:	2f62      	cmp	r7, #98	; 0x62
 800b6aa:	d80a      	bhi.n	800b6c2 <_printf_i+0x32>
 800b6ac:	2f00      	cmp	r7, #0
 800b6ae:	f000 80d8 	beq.w	800b862 <_printf_i+0x1d2>
 800b6b2:	2f58      	cmp	r7, #88	; 0x58
 800b6b4:	f000 80a3 	beq.w	800b7fe <_printf_i+0x16e>
 800b6b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b6bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6c0:	e03a      	b.n	800b738 <_printf_i+0xa8>
 800b6c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6c6:	2b15      	cmp	r3, #21
 800b6c8:	d8f6      	bhi.n	800b6b8 <_printf_i+0x28>
 800b6ca:	a001      	add	r0, pc, #4	; (adr r0, 800b6d0 <_printf_i+0x40>)
 800b6cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b6d0:	0800b729 	.word	0x0800b729
 800b6d4:	0800b73d 	.word	0x0800b73d
 800b6d8:	0800b6b9 	.word	0x0800b6b9
 800b6dc:	0800b6b9 	.word	0x0800b6b9
 800b6e0:	0800b6b9 	.word	0x0800b6b9
 800b6e4:	0800b6b9 	.word	0x0800b6b9
 800b6e8:	0800b73d 	.word	0x0800b73d
 800b6ec:	0800b6b9 	.word	0x0800b6b9
 800b6f0:	0800b6b9 	.word	0x0800b6b9
 800b6f4:	0800b6b9 	.word	0x0800b6b9
 800b6f8:	0800b6b9 	.word	0x0800b6b9
 800b6fc:	0800b849 	.word	0x0800b849
 800b700:	0800b76d 	.word	0x0800b76d
 800b704:	0800b82b 	.word	0x0800b82b
 800b708:	0800b6b9 	.word	0x0800b6b9
 800b70c:	0800b6b9 	.word	0x0800b6b9
 800b710:	0800b86b 	.word	0x0800b86b
 800b714:	0800b6b9 	.word	0x0800b6b9
 800b718:	0800b76d 	.word	0x0800b76d
 800b71c:	0800b6b9 	.word	0x0800b6b9
 800b720:	0800b6b9 	.word	0x0800b6b9
 800b724:	0800b833 	.word	0x0800b833
 800b728:	680b      	ldr	r3, [r1, #0]
 800b72a:	1d1a      	adds	r2, r3, #4
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	600a      	str	r2, [r1, #0]
 800b730:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b738:	2301      	movs	r3, #1
 800b73a:	e0a3      	b.n	800b884 <_printf_i+0x1f4>
 800b73c:	6825      	ldr	r5, [r4, #0]
 800b73e:	6808      	ldr	r0, [r1, #0]
 800b740:	062e      	lsls	r6, r5, #24
 800b742:	f100 0304 	add.w	r3, r0, #4
 800b746:	d50a      	bpl.n	800b75e <_printf_i+0xce>
 800b748:	6805      	ldr	r5, [r0, #0]
 800b74a:	600b      	str	r3, [r1, #0]
 800b74c:	2d00      	cmp	r5, #0
 800b74e:	da03      	bge.n	800b758 <_printf_i+0xc8>
 800b750:	232d      	movs	r3, #45	; 0x2d
 800b752:	426d      	negs	r5, r5
 800b754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b758:	485e      	ldr	r0, [pc, #376]	; (800b8d4 <_printf_i+0x244>)
 800b75a:	230a      	movs	r3, #10
 800b75c:	e019      	b.n	800b792 <_printf_i+0x102>
 800b75e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b762:	6805      	ldr	r5, [r0, #0]
 800b764:	600b      	str	r3, [r1, #0]
 800b766:	bf18      	it	ne
 800b768:	b22d      	sxthne	r5, r5
 800b76a:	e7ef      	b.n	800b74c <_printf_i+0xbc>
 800b76c:	680b      	ldr	r3, [r1, #0]
 800b76e:	6825      	ldr	r5, [r4, #0]
 800b770:	1d18      	adds	r0, r3, #4
 800b772:	6008      	str	r0, [r1, #0]
 800b774:	0628      	lsls	r0, r5, #24
 800b776:	d501      	bpl.n	800b77c <_printf_i+0xec>
 800b778:	681d      	ldr	r5, [r3, #0]
 800b77a:	e002      	b.n	800b782 <_printf_i+0xf2>
 800b77c:	0669      	lsls	r1, r5, #25
 800b77e:	d5fb      	bpl.n	800b778 <_printf_i+0xe8>
 800b780:	881d      	ldrh	r5, [r3, #0]
 800b782:	4854      	ldr	r0, [pc, #336]	; (800b8d4 <_printf_i+0x244>)
 800b784:	2f6f      	cmp	r7, #111	; 0x6f
 800b786:	bf0c      	ite	eq
 800b788:	2308      	moveq	r3, #8
 800b78a:	230a      	movne	r3, #10
 800b78c:	2100      	movs	r1, #0
 800b78e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b792:	6866      	ldr	r6, [r4, #4]
 800b794:	60a6      	str	r6, [r4, #8]
 800b796:	2e00      	cmp	r6, #0
 800b798:	bfa2      	ittt	ge
 800b79a:	6821      	ldrge	r1, [r4, #0]
 800b79c:	f021 0104 	bicge.w	r1, r1, #4
 800b7a0:	6021      	strge	r1, [r4, #0]
 800b7a2:	b90d      	cbnz	r5, 800b7a8 <_printf_i+0x118>
 800b7a4:	2e00      	cmp	r6, #0
 800b7a6:	d04d      	beq.n	800b844 <_printf_i+0x1b4>
 800b7a8:	4616      	mov	r6, r2
 800b7aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7ae:	fb03 5711 	mls	r7, r3, r1, r5
 800b7b2:	5dc7      	ldrb	r7, [r0, r7]
 800b7b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7b8:	462f      	mov	r7, r5
 800b7ba:	42bb      	cmp	r3, r7
 800b7bc:	460d      	mov	r5, r1
 800b7be:	d9f4      	bls.n	800b7aa <_printf_i+0x11a>
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	d10b      	bne.n	800b7dc <_printf_i+0x14c>
 800b7c4:	6823      	ldr	r3, [r4, #0]
 800b7c6:	07df      	lsls	r7, r3, #31
 800b7c8:	d508      	bpl.n	800b7dc <_printf_i+0x14c>
 800b7ca:	6923      	ldr	r3, [r4, #16]
 800b7cc:	6861      	ldr	r1, [r4, #4]
 800b7ce:	4299      	cmp	r1, r3
 800b7d0:	bfde      	ittt	le
 800b7d2:	2330      	movle	r3, #48	; 0x30
 800b7d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7d8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b7dc:	1b92      	subs	r2, r2, r6
 800b7de:	6122      	str	r2, [r4, #16]
 800b7e0:	f8cd a000 	str.w	sl, [sp]
 800b7e4:	464b      	mov	r3, r9
 800b7e6:	aa03      	add	r2, sp, #12
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	f7ff fee2 	bl	800b5b4 <_printf_common>
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	d14c      	bne.n	800b88e <_printf_i+0x1fe>
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7f8:	b004      	add	sp, #16
 800b7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7fe:	4835      	ldr	r0, [pc, #212]	; (800b8d4 <_printf_i+0x244>)
 800b800:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	680e      	ldr	r6, [r1, #0]
 800b808:	061f      	lsls	r7, r3, #24
 800b80a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b80e:	600e      	str	r6, [r1, #0]
 800b810:	d514      	bpl.n	800b83c <_printf_i+0x1ac>
 800b812:	07d9      	lsls	r1, r3, #31
 800b814:	bf44      	itt	mi
 800b816:	f043 0320 	orrmi.w	r3, r3, #32
 800b81a:	6023      	strmi	r3, [r4, #0]
 800b81c:	b91d      	cbnz	r5, 800b826 <_printf_i+0x196>
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	f023 0320 	bic.w	r3, r3, #32
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	2310      	movs	r3, #16
 800b828:	e7b0      	b.n	800b78c <_printf_i+0xfc>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	f043 0320 	orr.w	r3, r3, #32
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	2378      	movs	r3, #120	; 0x78
 800b834:	4828      	ldr	r0, [pc, #160]	; (800b8d8 <_printf_i+0x248>)
 800b836:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b83a:	e7e3      	b.n	800b804 <_printf_i+0x174>
 800b83c:	065e      	lsls	r6, r3, #25
 800b83e:	bf48      	it	mi
 800b840:	b2ad      	uxthmi	r5, r5
 800b842:	e7e6      	b.n	800b812 <_printf_i+0x182>
 800b844:	4616      	mov	r6, r2
 800b846:	e7bb      	b.n	800b7c0 <_printf_i+0x130>
 800b848:	680b      	ldr	r3, [r1, #0]
 800b84a:	6826      	ldr	r6, [r4, #0]
 800b84c:	6960      	ldr	r0, [r4, #20]
 800b84e:	1d1d      	adds	r5, r3, #4
 800b850:	600d      	str	r5, [r1, #0]
 800b852:	0635      	lsls	r5, r6, #24
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	d501      	bpl.n	800b85c <_printf_i+0x1cc>
 800b858:	6018      	str	r0, [r3, #0]
 800b85a:	e002      	b.n	800b862 <_printf_i+0x1d2>
 800b85c:	0671      	lsls	r1, r6, #25
 800b85e:	d5fb      	bpl.n	800b858 <_printf_i+0x1c8>
 800b860:	8018      	strh	r0, [r3, #0]
 800b862:	2300      	movs	r3, #0
 800b864:	6123      	str	r3, [r4, #16]
 800b866:	4616      	mov	r6, r2
 800b868:	e7ba      	b.n	800b7e0 <_printf_i+0x150>
 800b86a:	680b      	ldr	r3, [r1, #0]
 800b86c:	1d1a      	adds	r2, r3, #4
 800b86e:	600a      	str	r2, [r1, #0]
 800b870:	681e      	ldr	r6, [r3, #0]
 800b872:	6862      	ldr	r2, [r4, #4]
 800b874:	2100      	movs	r1, #0
 800b876:	4630      	mov	r0, r6
 800b878:	f7f4 fc8a 	bl	8000190 <memchr>
 800b87c:	b108      	cbz	r0, 800b882 <_printf_i+0x1f2>
 800b87e:	1b80      	subs	r0, r0, r6
 800b880:	6060      	str	r0, [r4, #4]
 800b882:	6863      	ldr	r3, [r4, #4]
 800b884:	6123      	str	r3, [r4, #16]
 800b886:	2300      	movs	r3, #0
 800b888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b88c:	e7a8      	b.n	800b7e0 <_printf_i+0x150>
 800b88e:	6923      	ldr	r3, [r4, #16]
 800b890:	4632      	mov	r2, r6
 800b892:	4649      	mov	r1, r9
 800b894:	4640      	mov	r0, r8
 800b896:	47d0      	blx	sl
 800b898:	3001      	adds	r0, #1
 800b89a:	d0ab      	beq.n	800b7f4 <_printf_i+0x164>
 800b89c:	6823      	ldr	r3, [r4, #0]
 800b89e:	079b      	lsls	r3, r3, #30
 800b8a0:	d413      	bmi.n	800b8ca <_printf_i+0x23a>
 800b8a2:	68e0      	ldr	r0, [r4, #12]
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	4298      	cmp	r0, r3
 800b8a8:	bfb8      	it	lt
 800b8aa:	4618      	movlt	r0, r3
 800b8ac:	e7a4      	b.n	800b7f8 <_printf_i+0x168>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	4632      	mov	r2, r6
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	4640      	mov	r0, r8
 800b8b6:	47d0      	blx	sl
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	d09b      	beq.n	800b7f4 <_printf_i+0x164>
 800b8bc:	3501      	adds	r5, #1
 800b8be:	68e3      	ldr	r3, [r4, #12]
 800b8c0:	9903      	ldr	r1, [sp, #12]
 800b8c2:	1a5b      	subs	r3, r3, r1
 800b8c4:	42ab      	cmp	r3, r5
 800b8c6:	dcf2      	bgt.n	800b8ae <_printf_i+0x21e>
 800b8c8:	e7eb      	b.n	800b8a2 <_printf_i+0x212>
 800b8ca:	2500      	movs	r5, #0
 800b8cc:	f104 0619 	add.w	r6, r4, #25
 800b8d0:	e7f5      	b.n	800b8be <_printf_i+0x22e>
 800b8d2:	bf00      	nop
 800b8d4:	0800c331 	.word	0x0800c331
 800b8d8:	0800c342 	.word	0x0800c342

0800b8dc <_putc_r>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	460d      	mov	r5, r1
 800b8e0:	4614      	mov	r4, r2
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	b118      	cbz	r0, 800b8ee <_putc_r+0x12>
 800b8e6:	6983      	ldr	r3, [r0, #24]
 800b8e8:	b90b      	cbnz	r3, 800b8ee <_putc_r+0x12>
 800b8ea:	f7ff fb5b 	bl	800afa4 <__sinit>
 800b8ee:	4b1c      	ldr	r3, [pc, #112]	; (800b960 <_putc_r+0x84>)
 800b8f0:	429c      	cmp	r4, r3
 800b8f2:	d124      	bne.n	800b93e <_putc_r+0x62>
 800b8f4:	6874      	ldr	r4, [r6, #4]
 800b8f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8f8:	07d8      	lsls	r0, r3, #31
 800b8fa:	d405      	bmi.n	800b908 <_putc_r+0x2c>
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	0599      	lsls	r1, r3, #22
 800b900:	d402      	bmi.n	800b908 <_putc_r+0x2c>
 800b902:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b904:	f7ff fbec 	bl	800b0e0 <__retarget_lock_acquire_recursive>
 800b908:	68a3      	ldr	r3, [r4, #8]
 800b90a:	3b01      	subs	r3, #1
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	60a3      	str	r3, [r4, #8]
 800b910:	da05      	bge.n	800b91e <_putc_r+0x42>
 800b912:	69a2      	ldr	r2, [r4, #24]
 800b914:	4293      	cmp	r3, r2
 800b916:	db1c      	blt.n	800b952 <_putc_r+0x76>
 800b918:	b2eb      	uxtb	r3, r5
 800b91a:	2b0a      	cmp	r3, #10
 800b91c:	d019      	beq.n	800b952 <_putc_r+0x76>
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	1c5a      	adds	r2, r3, #1
 800b922:	6022      	str	r2, [r4, #0]
 800b924:	701d      	strb	r5, [r3, #0]
 800b926:	b2ed      	uxtb	r5, r5
 800b928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b92a:	07da      	lsls	r2, r3, #31
 800b92c:	d405      	bmi.n	800b93a <_putc_r+0x5e>
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	059b      	lsls	r3, r3, #22
 800b932:	d402      	bmi.n	800b93a <_putc_r+0x5e>
 800b934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b936:	f7ff fbd4 	bl	800b0e2 <__retarget_lock_release_recursive>
 800b93a:	4628      	mov	r0, r5
 800b93c:	bd70      	pop	{r4, r5, r6, pc}
 800b93e:	4b09      	ldr	r3, [pc, #36]	; (800b964 <_putc_r+0x88>)
 800b940:	429c      	cmp	r4, r3
 800b942:	d101      	bne.n	800b948 <_putc_r+0x6c>
 800b944:	68b4      	ldr	r4, [r6, #8]
 800b946:	e7d6      	b.n	800b8f6 <_putc_r+0x1a>
 800b948:	4b07      	ldr	r3, [pc, #28]	; (800b968 <_putc_r+0x8c>)
 800b94a:	429c      	cmp	r4, r3
 800b94c:	bf08      	it	eq
 800b94e:	68f4      	ldreq	r4, [r6, #12]
 800b950:	e7d1      	b.n	800b8f6 <_putc_r+0x1a>
 800b952:	4629      	mov	r1, r5
 800b954:	4622      	mov	r2, r4
 800b956:	4630      	mov	r0, r6
 800b958:	f7ff f94a 	bl	800abf0 <__swbuf_r>
 800b95c:	4605      	mov	r5, r0
 800b95e:	e7e3      	b.n	800b928 <_putc_r+0x4c>
 800b960:	0800c2e0 	.word	0x0800c2e0
 800b964:	0800c300 	.word	0x0800c300
 800b968:	0800c2c0 	.word	0x0800c2c0

0800b96c <_sbrk_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4d06      	ldr	r5, [pc, #24]	; (800b988 <_sbrk_r+0x1c>)
 800b970:	2300      	movs	r3, #0
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	f7f6 fd54 	bl	8002424 <_sbrk>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_sbrk_r+0x1a>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_sbrk_r+0x1a>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	20001600 	.word	0x20001600

0800b98c <__sread>:
 800b98c:	b510      	push	{r4, lr}
 800b98e:	460c      	mov	r4, r1
 800b990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b994:	f000 f8a0 	bl	800bad8 <_read_r>
 800b998:	2800      	cmp	r0, #0
 800b99a:	bfab      	itete	ge
 800b99c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b99e:	89a3      	ldrhlt	r3, [r4, #12]
 800b9a0:	181b      	addge	r3, r3, r0
 800b9a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9a6:	bfac      	ite	ge
 800b9a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9aa:	81a3      	strhlt	r3, [r4, #12]
 800b9ac:	bd10      	pop	{r4, pc}

0800b9ae <__swrite>:
 800b9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b2:	461f      	mov	r7, r3
 800b9b4:	898b      	ldrh	r3, [r1, #12]
 800b9b6:	05db      	lsls	r3, r3, #23
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	4616      	mov	r6, r2
 800b9be:	d505      	bpl.n	800b9cc <__swrite+0x1e>
 800b9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f000 f868 	bl	800ba9c <_lseek_r>
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9d6:	81a3      	strh	r3, [r4, #12]
 800b9d8:	4632      	mov	r2, r6
 800b9da:	463b      	mov	r3, r7
 800b9dc:	4628      	mov	r0, r5
 800b9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e2:	f000 b817 	b.w	800ba14 <_write_r>

0800b9e6 <__sseek>:
 800b9e6:	b510      	push	{r4, lr}
 800b9e8:	460c      	mov	r4, r1
 800b9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ee:	f000 f855 	bl	800ba9c <_lseek_r>
 800b9f2:	1c43      	adds	r3, r0, #1
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	bf15      	itete	ne
 800b9f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba02:	81a3      	strheq	r3, [r4, #12]
 800ba04:	bf18      	it	ne
 800ba06:	81a3      	strhne	r3, [r4, #12]
 800ba08:	bd10      	pop	{r4, pc}

0800ba0a <__sclose>:
 800ba0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba0e:	f000 b813 	b.w	800ba38 <_close_r>
	...

0800ba14 <_write_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d07      	ldr	r5, [pc, #28]	; (800ba34 <_write_r+0x20>)
 800ba18:	4604      	mov	r4, r0
 800ba1a:	4608      	mov	r0, r1
 800ba1c:	4611      	mov	r1, r2
 800ba1e:	2200      	movs	r2, #0
 800ba20:	602a      	str	r2, [r5, #0]
 800ba22:	461a      	mov	r2, r3
 800ba24:	f7fd f9ba 	bl	8008d9c <_write>
 800ba28:	1c43      	adds	r3, r0, #1
 800ba2a:	d102      	bne.n	800ba32 <_write_r+0x1e>
 800ba2c:	682b      	ldr	r3, [r5, #0]
 800ba2e:	b103      	cbz	r3, 800ba32 <_write_r+0x1e>
 800ba30:	6023      	str	r3, [r4, #0]
 800ba32:	bd38      	pop	{r3, r4, r5, pc}
 800ba34:	20001600 	.word	0x20001600

0800ba38 <_close_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4d06      	ldr	r5, [pc, #24]	; (800ba54 <_close_r+0x1c>)
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	4604      	mov	r4, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	602b      	str	r3, [r5, #0]
 800ba44:	f7f6 fcba 	bl	80023bc <_close>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d102      	bne.n	800ba52 <_close_r+0x1a>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	b103      	cbz	r3, 800ba52 <_close_r+0x1a>
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	20001600 	.word	0x20001600

0800ba58 <_fstat_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d07      	ldr	r5, [pc, #28]	; (800ba78 <_fstat_r+0x20>)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	4611      	mov	r1, r2
 800ba64:	602b      	str	r3, [r5, #0]
 800ba66:	f7f6 fcb5 	bl	80023d4 <_fstat>
 800ba6a:	1c43      	adds	r3, r0, #1
 800ba6c:	d102      	bne.n	800ba74 <_fstat_r+0x1c>
 800ba6e:	682b      	ldr	r3, [r5, #0]
 800ba70:	b103      	cbz	r3, 800ba74 <_fstat_r+0x1c>
 800ba72:	6023      	str	r3, [r4, #0]
 800ba74:	bd38      	pop	{r3, r4, r5, pc}
 800ba76:	bf00      	nop
 800ba78:	20001600 	.word	0x20001600

0800ba7c <_isatty_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4d06      	ldr	r5, [pc, #24]	; (800ba98 <_isatty_r+0x1c>)
 800ba80:	2300      	movs	r3, #0
 800ba82:	4604      	mov	r4, r0
 800ba84:	4608      	mov	r0, r1
 800ba86:	602b      	str	r3, [r5, #0]
 800ba88:	f7f6 fcb4 	bl	80023f4 <_isatty>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d102      	bne.n	800ba96 <_isatty_r+0x1a>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	b103      	cbz	r3, 800ba96 <_isatty_r+0x1a>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
 800ba98:	20001600 	.word	0x20001600

0800ba9c <_lseek_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4d07      	ldr	r5, [pc, #28]	; (800babc <_lseek_r+0x20>)
 800baa0:	4604      	mov	r4, r0
 800baa2:	4608      	mov	r0, r1
 800baa4:	4611      	mov	r1, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	f7f6 fcad 	bl	800240a <_lseek>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_lseek_r+0x1e>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_lseek_r+0x1e>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20001600 	.word	0x20001600

0800bac0 <__malloc_lock>:
 800bac0:	4801      	ldr	r0, [pc, #4]	; (800bac8 <__malloc_lock+0x8>)
 800bac2:	f7ff bb0d 	b.w	800b0e0 <__retarget_lock_acquire_recursive>
 800bac6:	bf00      	nop
 800bac8:	200015f8 	.word	0x200015f8

0800bacc <__malloc_unlock>:
 800bacc:	4801      	ldr	r0, [pc, #4]	; (800bad4 <__malloc_unlock+0x8>)
 800bace:	f7ff bb08 	b.w	800b0e2 <__retarget_lock_release_recursive>
 800bad2:	bf00      	nop
 800bad4:	200015f8 	.word	0x200015f8

0800bad8 <_read_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4d07      	ldr	r5, [pc, #28]	; (800baf8 <_read_r+0x20>)
 800badc:	4604      	mov	r4, r0
 800bade:	4608      	mov	r0, r1
 800bae0:	4611      	mov	r1, r2
 800bae2:	2200      	movs	r2, #0
 800bae4:	602a      	str	r2, [r5, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	f7f6 fc4b 	bl	8002382 <_read>
 800baec:	1c43      	adds	r3, r0, #1
 800baee:	d102      	bne.n	800baf6 <_read_r+0x1e>
 800baf0:	682b      	ldr	r3, [r5, #0]
 800baf2:	b103      	cbz	r3, 800baf6 <_read_r+0x1e>
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
 800baf8:	20001600 	.word	0x20001600

0800bafc <_init>:
 800bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafe:	bf00      	nop
 800bb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb02:	bc08      	pop	{r3}
 800bb04:	469e      	mov	lr, r3
 800bb06:	4770      	bx	lr

0800bb08 <_fini>:
 800bb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0a:	bf00      	nop
 800bb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb0e:	bc08      	pop	{r3}
 800bb10:	469e      	mov	lr, r3
 800bb12:	4770      	bx	lr
