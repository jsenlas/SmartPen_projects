
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009384  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080094c0  080094c0  000194c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009704  08009704  00019704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009708  08009708  00019708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000004  0800970c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000034  0800973c  00020034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 00000090  200000d0  080097d5  000200d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000025  20000160  08009865  00020160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000188  0800988a  00020188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003ec  2000019c  0800989b  0002019c  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20000588  0800989b  00020588  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020199  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   00036ee8  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 000064ba  00000000  00000000  000570b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00002570  00000000  00000000  0005d570  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 000022b8  00000000  00000000  0005fae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00034b58  00000000  00000000  00061d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   000298c3  00000000  00000000  000968f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0012b2c9  00000000  00000000  000c01b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  001eb47c  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000995c  00000000  00000000  001eb4f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000019c 	.word	0x2000019c
 8000158:	00000000 	.word	0x00000000
 800015c:	080094a8 	.word	0x080094a8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001a0 	.word	0x200001a0
 8000178:	080094a8 	.word	0x080094a8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000196:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800019a:	4905      	ldr	r1, [pc, #20]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4313      	orrs	r3, r2
 80001a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ae:	4770      	bx	lr
 80001b0:	58000800 	.word	0x58000800

080001b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4313      	orrs	r3, r2
 80001ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4013      	ands	r3, r2
 80001d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d8:	68fb      	ldr	r3, [r7, #12]
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e6:	b480      	push	{r7}
 80001e8:	b085      	sub	sp, #20
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80001ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001f2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80001f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4013      	ands	r3, r2
 800020e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000210:	68fb      	ldr	r3, [r7, #12]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <APPD_Init>:
static void APPD_SetCPU2GpioConfig( void );
static void APPD_BleDtbCfg( void );

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800021e:	b580      	push	{r7, lr}
 8000220:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000222:	f002 fe09 	bl	8002e38 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000226:	f002 fe0d 	bl	8002e44 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800022a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800022e:	f7ff ffad 	bl	800018c <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000232:	f000 f821 	bl	8000278 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000236:	f000 f8bf 	bl	80003b8 <APPD_BleDtbCfg>

  return;
 800023a:	bf00      	nop
}
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <APPD_EnableCPU2+0x34>)
 8000248:	1d3c      	adds	r4, r7, #4
 800024a:	461d      	mov	r5, r3
 800024c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000254:	c403      	stmia	r4!, {r0, r1}
 8000256:	8022      	strh	r2, [r4, #0]
 8000258:	3402      	adds	r4, #2
 800025a:	0c13      	lsrs	r3, r2, #16
 800025c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800025e:	f008 fbd9 	bl	8008a14 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f007 ff37 	bl	80080d8 <SHCI_C2_DEBUG_Init>

  return;
 800026a:	bf00      	nop
}
 800026c:	3720      	adds	r7, #32
 800026e:	46bd      	mov	sp, r7
 8000270:	bdb0      	pop	{r4, r5, r7, pc}
 8000272:	bf00      	nop
 8000274:	080094c0 	.word	0x080094c0

08000278 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_config = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000298:	2300      	movs	r3, #0
 800029a:	77fb      	strb	r3, [r7, #31]
 800029c:	e033      	b.n	8000306 <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800029e:	7ffb      	ldrb	r3, [r7, #31]
 80002a0:	4a42      	ldr	r2, [pc, #264]	; (80003ac <APPD_SetCPU2GpioConfig+0x134>)
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	4413      	add	r3, r2
 80002a6:	799b      	ldrb	r3, [r3, #6]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d028      	beq.n	80002fe <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002ac:	7ffb      	ldrb	r3, [r7, #31]
 80002ae:	4a3f      	ldr	r2, [pc, #252]	; (80003ac <APPD_SetCPU2GpioConfig+0x134>)
 80002b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002b4:	4a3e      	ldr	r2, [pc, #248]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d00f      	beq.n	80002da <APPD_SetCPU2GpioConfig+0x62>
 80002ba:	4a3e      	ldr	r2, [pc, #248]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d015      	beq.n	80002ec <APPD_SetCPU2GpioConfig+0x74>
 80002c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002c4:	d000      	beq.n	80002c8 <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80002c6:	e01b      	b.n	8000300 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80002c8:	7ffb      	ldrb	r3, [r7, #31]
 80002ca:	4a38      	ldr	r2, [pc, #224]	; (80003ac <APPD_SetCPU2GpioConfig+0x134>)
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	4413      	add	r3, r2
 80002d0:	889a      	ldrh	r2, [r3, #4]
 80002d2:	8bbb      	ldrh	r3, [r7, #28]
 80002d4:	4313      	orrs	r3, r2
 80002d6:	83bb      	strh	r3, [r7, #28]
          break;
 80002d8:	e012      	b.n	8000300 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80002da:	7ffb      	ldrb	r3, [r7, #31]
 80002dc:	4a33      	ldr	r2, [pc, #204]	; (80003ac <APPD_SetCPU2GpioConfig+0x134>)
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	4413      	add	r3, r2
 80002e2:	889a      	ldrh	r2, [r3, #4]
 80002e4:	8b7b      	ldrh	r3, [r7, #26]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	837b      	strh	r3, [r7, #26]
          break;
 80002ea:	e009      	b.n	8000300 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80002ec:	7ffb      	ldrb	r3, [r7, #31]
 80002ee:	4a2f      	ldr	r2, [pc, #188]	; (80003ac <APPD_SetCPU2GpioConfig+0x134>)
 80002f0:	00db      	lsls	r3, r3, #3
 80002f2:	4413      	add	r3, r2
 80002f4:	889a      	ldrh	r2, [r3, #4]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	833b      	strh	r3, [r7, #24]
          break;
 80002fc:	e000      	b.n	8000300 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 80002fe:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000300:	7ffb      	ldrb	r3, [r7, #31]
 8000302:	3301      	adds	r3, #1
 8000304:	77fb      	strb	r3, [r7, #31]
 8000306:	7ffb      	ldrb	r3, [r7, #31]
 8000308:	2b21      	cmp	r3, #33	; 0x21
 800030a:	d9c8      	bls.n	800029e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000310:	2301      	movs	r3, #1
 8000312:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000314:	2303      	movs	r3, #3
 8000316:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000318:	8bbb      	ldrh	r3, [r7, #28]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d014      	beq.n	8000348 <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 800031e:	8bbb      	ldrh	r3, [r7, #28]
 8000320:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000322:	2001      	movs	r0, #1
 8000324:	f7ff ff46 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000328:	2001      	movs	r0, #1
 800032a:	f7ff ff5c 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	4619      	mov	r1, r3
 8000332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000336:	f002 ff23 	bl	8003180 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800033a:	8bbb      	ldrh	r3, [r7, #28]
 800033c:	2200      	movs	r2, #0
 800033e:	4619      	mov	r1, r3
 8000340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000344:	f003 f88c 	bl	8003460 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000348:	8b7b      	ldrh	r3, [r7, #26]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d012      	beq.n	8000374 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 800034e:	8b7b      	ldrh	r3, [r7, #26]
 8000350:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000352:	2002      	movs	r0, #2
 8000354:	f7ff ff2e 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000358:	2002      	movs	r0, #2
 800035a:	f7ff ff44 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4619      	mov	r1, r3
 8000362:	4813      	ldr	r0, [pc, #76]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 8000364:	f002 ff0c 	bl	8003180 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000368:	8b7b      	ldrh	r3, [r7, #26]
 800036a:	2200      	movs	r2, #0
 800036c:	4619      	mov	r1, r3
 800036e:	4810      	ldr	r0, [pc, #64]	; (80003b0 <APPD_SetCPU2GpioConfig+0x138>)
 8000370:	f003 f876 	bl	8003460 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000374:	8b3b      	ldrh	r3, [r7, #24]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d013      	beq.n	80003a2 <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 800037a:	8b3b      	ldrh	r3, [r7, #24]
 800037c:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800037e:	2004      	movs	r0, #4
 8000380:	f7ff ff18 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000384:	2004      	movs	r0, #4
 8000386:	f7ff ff2e 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4809      	ldr	r0, [pc, #36]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 8000390:	f002 fef6 	bl	8003180 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000394:	8b3b      	ldrh	r3, [r7, #24]
 8000396:	2200      	movs	r2, #0
 8000398:	4619      	mov	r1, r3
 800039a:	4806      	ldr	r0, [pc, #24]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 800039c:	f003 f860 	bl	8003460 <HAL_GPIO_WritePin>
  }
  
  return;
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
}
 80003a4:	3720      	adds	r7, #32
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	08009514 	.word	0x08009514
 80003b0:	48000400 	.word	0x48000400
 80003b4:	48000800 	.word	0x48000800

080003b8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

  return;
 80003bc:	bf00      	nop
}
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
	...

080003c8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80003d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003d6:	f023 0207 	bic.w	r2, r3, #7
 80003da:	4905      	ldr	r1, [pc, #20]	; (80003f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4313      	orrs	r3, r2
 80003e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	58000400 	.word	0x58000400

080003f4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80003fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4313      	orrs	r3, r2
 800040e:	608b      	str	r3, [r1, #8]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <APPE_Init>:
static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status );
static void APPE_SysUserEvtRx( void * pPayload );

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000420:	f000 f814 	bl	800044c <SystemPower_Config>
  
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000424:	4908      	ldr	r1, [pc, #32]	; (8000448 <APPE_Init+0x2c>)
 8000426:	2000      	movs	r0, #0
 8000428:	f000 fcf6 	bl	8000e18 <HW_TS_Init>

  APPD_Init();
 800042c:	f7ff fef7 	bl	800021e <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000430:	2101      	movs	r1, #1
 8000432:	2001      	movs	r0, #1
 8000434:	f008 fd90 	bl	8008f58 <UTIL_LPM_SetOffMode>

  Led_Init();
 8000438:	f000 f84e 	bl	80004d8 <Led_Init>

  Button_Init();
 800043c:	f000 f85c 	bl	80004f8 <Button_Init>

  appe_Tl_Init();	/**< Initialize all transport layers */
 8000440:	f000 f814 	bl	800046c <appe_Tl_Init>
   * From now, the application is waiting for the ready event ( VS_HCI_C2_Ready )
   * received on the system channel before starting the Stack
   * This system event is received with APPE_SysUserEvtRx()
   */

  return;
 8000444:	bf00      	nop
}
 8000446:	bd80      	pop	{r7, pc}
 8000448:	200001c4 	.word	0x200001c4

0800044c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000450:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000454:	f7ff ffce 	bl	80003f4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000458:	f008 fd6c 	bl	8008f34 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800045c:	2004      	movs	r0, #4
 800045e:	f7ff ffb3 	bl	80003c8 <LL_C2_PWR_SetPowerMode>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  /**
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
 8000462:	f003 fde7 	bl	8004034 <HAL_PWREx_EnableVddUSB>
#endif

  return;
 8000466:	bf00      	nop
}
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8000472:	f008 f919 	bl	80086a8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000476:	4a11      	ldr	r2, [pc, #68]	; (80004bc <appe_Tl_Init+0x50>)
 8000478:	2100      	movs	r1, #0
 800047a:	2008      	movs	r0, #8
 800047c:	f008 feae 	bl	80091dc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <appe_Tl_Init+0x54>)
 8000482:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <appe_Tl_Init+0x58>)
 8000486:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000488:	463b      	mov	r3, r7
 800048a:	4619      	mov	r1, r3
 800048c:	480e      	ldr	r0, [pc, #56]	; (80004c8 <appe_Tl_Init+0x5c>)
 800048e:	f007 ffd1 	bl	8008434 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <appe_Tl_Init+0x60>)
 8000494:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <appe_Tl_Init+0x64>)
 8000498:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <appe_Tl_Init+0x68>)
 800049c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800049e:	f240 533c 	movw	r3, #1340	; 0x53c
 80004a2:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80004a4:	f107 0308 	add.w	r3, r7, #8
 80004a8:	4618      	mov	r0, r3
 80004aa:	f008 fa3f 	bl	800892c <TL_MM_Init>

  TL_Enable();
 80004ae:	f008 f8f5 	bl	800869c <TL_Enable>

  return;
 80004b2:	bf00      	nop
}
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	0800846d 	.word	0x0800846d
 80004c0:	20030724 	.word	0x20030724
 80004c4:	08000509 	.word	0x08000509
 80004c8:	0800051f 	.word	0x0800051f
 80004cc:	2003093c 	.word	0x2003093c
 80004d0:	20030830 	.word	0x20030830
 80004d4:	200301e8 	.word	0x200301e8

080004d8 <Led_Init>:

static void Led_Init( void )
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80004dc:	2000      	movs	r0, #0
 80004de:	f002 fa55 	bl	800298c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80004e2:	2001      	movs	r0, #1
 80004e4:	f002 fa52 	bl	800298c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80004e8:	2002      	movs	r0, #2
 80004ea:	f002 fa4f 	bl	800298c <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80004ee:	2001      	movs	r0, #1
 80004f0:	f002 fa96 	bl	8002a20 <BSP_LED_On>
#endif

  return;
 80004f4:	bf00      	nop
}
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <Button_Init>:

static void Button_Init( void )
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80004fc:	2101      	movs	r1, #1
 80004fe:	2000      	movs	r0, #0
 8000500:	f002 fac2 	bl	8002a88 <BSP_PB_Init>
#endif

  return;
 8000504:	bf00      	nop
}
 8000506:	bd80      	pop	{r7, pc}

08000508 <APPE_SysStatusNot>:



static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  return;
 8000512:	bf00      	nop
}
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
  /**< Traces channel initialization */
  APPD_EnableCPU2();
 8000526:	f7ff fe8b 	bl	8000240 <APPD_EnableCPU2>

  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800052a:	2100      	movs	r1, #0
 800052c:	2001      	movs	r0, #1
 800052e:	f008 fd13 	bl	8008f58 <UTIL_LPM_SetOffMode>

  APP_BLE_Init( );
 8000532:	f001 fbb7 	bl	8001ca4 <APP_BLE_Init>
  return;
 8000536:	bf00      	nop
}
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000542:	f008 fd37 	bl	8008fb4 <UTIL_LPM_EnterLowPower>
#endif
  return;
 8000546:	bf00      	nop
}
 8000548:	bd80      	pop	{r7, pc}

0800054a <UTIL_SEQ_EvtIdle>:

void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000558:	f008 fd60 	bl	800901c <UTIL_SEQ_Run>

  return;
 800055c:	bf00      	nop
}
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800056c:	2100      	movs	r1, #0
 800056e:	2008      	movs	r0, #8
 8000570:	f008 fe54 	bl	800921c <UTIL_SEQ_SetTask>
  return;
 8000574:	bf00      	nop
}
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000584:	2002      	movs	r0, #2
 8000586:	f008 feaf 	bl	80092e8 <UTIL_SEQ_SetEvt>
  return;
 800058a:	bf00      	nop
}
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	b082      	sub	sp, #8
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800059a:	2002      	movs	r0, #2
 800059c:	f008 fec2 	bl	8009324 <UTIL_SEQ_WaitEvt>
  return;
 80005a0:	bf00      	nop
}
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005b8:	d000      	beq.n	80005bc <HAL_GPIO_EXTI_Callback+0x14>
    case BUTTON_SW1_PIN:
     APP_BLE_Key_Button1_Action();
      break; 

    default:
      break;
 80005ba:	e002      	b.n	80005c2 <HAL_GPIO_EXTI_Callback+0x1a>
     APP_BLE_Key_Button1_Action();
 80005bc:	f001 fc6a 	bl	8001e94 <APP_BLE_Key_Button1_Action>
      break; 
 80005c0:	bf00      	nop
  }
  return;
 80005c2:	bf00      	nop
}
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <LL_EXTI_EnableIT_0_31>:
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80005d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80005da:	4905      	ldr	r1, [pc, #20]	; (80005f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	58000800 	.word	0x58000800

080005f4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4904      	ldr	r1, [pc, #16]	; (8000614 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4313      	orrs	r3, r2
 8000606:	600b      	str	r3, [r1, #0]

}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	58000800 	.word	0x58000800

08000618 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800061e:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <ReadRtcSsrValue+0x3c>)
 8000620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000622:	b29b      	uxth	r3, r3
 8000624:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <ReadRtcSsrValue+0x3c>)
 8000628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800062a:	b29b      	uxth	r3, r3
 800062c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800062e:	e005      	b.n	800063c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <ReadRtcSsrValue+0x3c>)
 8000636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000638:	b29b      	uxth	r3, r3
 800063a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	429a      	cmp	r2, r3
 8000642:	d1f5      	bne.n	8000630 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000644:	683b      	ldr	r3, [r7, #0]
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40002800 	.word	0x40002800

08000658 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	460a      	mov	r2, r1
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	4613      	mov	r3, r2
 8000666:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000668:	79ba      	ldrb	r2, [r7, #6]
 800066a:	491d      	ldr	r1, [pc, #116]	; (80006e0 <LinkTimerAfter+0x88>)
 800066c:	4613      	mov	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4413      	add	r3, r2
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	440b      	add	r3, r1
 8000676:	3315      	adds	r3, #21
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	2b06      	cmp	r3, #6
 8000680:	d009      	beq.n	8000696 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000682:	7bfa      	ldrb	r2, [r7, #15]
 8000684:	4916      	ldr	r1, [pc, #88]	; (80006e0 <LinkTimerAfter+0x88>)
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	440b      	add	r3, r1
 8000690:	3314      	adds	r3, #20
 8000692:	79fa      	ldrb	r2, [r7, #7]
 8000694:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000696:	79fa      	ldrb	r2, [r7, #7]
 8000698:	4911      	ldr	r1, [pc, #68]	; (80006e0 <LinkTimerAfter+0x88>)
 800069a:	4613      	mov	r3, r2
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	4413      	add	r3, r2
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	440b      	add	r3, r1
 80006a4:	3315      	adds	r3, #21
 80006a6:	7bfa      	ldrb	r2, [r7, #15]
 80006a8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <LinkTimerAfter+0x88>)
 80006ae:	4613      	mov	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	440b      	add	r3, r1
 80006b8:	3314      	adds	r3, #20
 80006ba:	79ba      	ldrb	r2, [r7, #6]
 80006bc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	4907      	ldr	r1, [pc, #28]	; (80006e0 <LinkTimerAfter+0x88>)
 80006c2:	4613      	mov	r3, r2
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	4413      	add	r3, r2
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	440b      	add	r3, r1
 80006cc:	3315      	adds	r3, #21
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	701a      	strb	r2, [r3, #0]

  return;
 80006d2:	bf00      	nop
}
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	20000034 	.word	0x20000034

080006e4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <LinkTimerBefore+0xb8>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	79ba      	ldrb	r2, [r7, #6]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d032      	beq.n	8000766 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000700:	79ba      	ldrb	r2, [r7, #6]
 8000702:	4927      	ldr	r1, [pc, #156]	; (80007a0 <LinkTimerBefore+0xbc>)
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	440b      	add	r3, r1
 800070e:	3314      	adds	r3, #20
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000714:	7bfa      	ldrb	r2, [r7, #15]
 8000716:	4922      	ldr	r1, [pc, #136]	; (80007a0 <LinkTimerBefore+0xbc>)
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	440b      	add	r3, r1
 8000722:	3315      	adds	r3, #21
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	491d      	ldr	r1, [pc, #116]	; (80007a0 <LinkTimerBefore+0xbc>)
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	440b      	add	r3, r1
 8000736:	3315      	adds	r3, #21
 8000738:	79ba      	ldrb	r2, [r7, #6]
 800073a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800073c:	79fa      	ldrb	r2, [r7, #7]
 800073e:	4918      	ldr	r1, [pc, #96]	; (80007a0 <LinkTimerBefore+0xbc>)
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	440b      	add	r3, r1
 800074a:	3314      	adds	r3, #20
 800074c:	7bfa      	ldrb	r2, [r7, #15]
 800074e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	4913      	ldr	r1, [pc, #76]	; (80007a0 <LinkTimerBefore+0xbc>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	440b      	add	r3, r1
 800075e:	3314      	adds	r3, #20
 8000760:	79fa      	ldrb	r2, [r7, #7]
 8000762:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000764:	e014      	b.n	8000790 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	490d      	ldr	r1, [pc, #52]	; (80007a0 <LinkTimerBefore+0xbc>)
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	440b      	add	r3, r1
 8000774:	3315      	adds	r3, #21
 8000776:	79ba      	ldrb	r2, [r7, #6]
 8000778:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800077a:	79ba      	ldrb	r2, [r7, #6]
 800077c:	4908      	ldr	r1, [pc, #32]	; (80007a0 <LinkTimerBefore+0xbc>)
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	440b      	add	r3, r1
 8000788:	3314      	adds	r3, #20
 800078a:	79fa      	ldrb	r2, [r7, #7]
 800078c:	701a      	strb	r2, [r3, #0]
  return;
 800078e:	bf00      	nop
}
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	200000c4 	.word	0x200000c4
 80007a0:	20000034 	.word	0x20000034

080007a4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80007ae:	4b4e      	ldr	r3, [pc, #312]	; (80008e8 <linkTimer+0x144>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b06      	cmp	r3, #6
 80007b6:	d118      	bne.n	80007ea <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80007b8:	4b4b      	ldr	r3, [pc, #300]	; (80008e8 <linkTimer+0x144>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <linkTimer+0x148>)
 80007c0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80007c2:	4a49      	ldr	r2, [pc, #292]	; (80008e8 <linkTimer+0x144>)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	4949      	ldr	r1, [pc, #292]	; (80008f0 <linkTimer+0x14c>)
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	3315      	adds	r3, #21
 80007d8:	2206      	movs	r2, #6
 80007da:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80007dc:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <linkTimer+0x150>)
 80007de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007e2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	81fb      	strh	r3, [r7, #14]
 80007e8:	e078      	b.n	80008dc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80007ea:	f000 f909 	bl	8000a00 <ReturnTimeElapsed>
 80007ee:	4603      	mov	r3, r0
 80007f0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	493e      	ldr	r1, [pc, #248]	; (80008f0 <linkTimer+0x14c>)
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	440b      	add	r3, r1
 8000800:	3308      	adds	r3, #8
 8000802:	6819      	ldr	r1, [r3, #0]
 8000804:	89fb      	ldrh	r3, [r7, #14]
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	4419      	add	r1, r3
 800080a:	4839      	ldr	r0, [pc, #228]	; (80008f0 <linkTimer+0x14c>)
 800080c:	4613      	mov	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	4413      	add	r3, r2
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	4403      	add	r3, r0
 8000816:	3308      	adds	r3, #8
 8000818:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800081a:	79fa      	ldrb	r2, [r7, #7]
 800081c:	4934      	ldr	r1, [pc, #208]	; (80008f0 <linkTimer+0x14c>)
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3308      	adds	r3, #8
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <linkTimer+0x144>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	4619      	mov	r1, r3
 8000836:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <linkTimer+0x14c>)
 8000838:	460b      	mov	r3, r1
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	440b      	add	r3, r1
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4413      	add	r3, r2
 8000842:	3308      	adds	r3, #8
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	429a      	cmp	r2, r3
 800084a:	d337      	bcc.n	80008bc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <linkTimer+0x144>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000852:	7b7a      	ldrb	r2, [r7, #13]
 8000854:	4926      	ldr	r1, [pc, #152]	; (80008f0 <linkTimer+0x14c>)
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	440b      	add	r3, r1
 8000860:	3315      	adds	r3, #21
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000866:	e013      	b.n	8000890 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000868:	7b7a      	ldrb	r2, [r7, #13]
 800086a:	4921      	ldr	r1, [pc, #132]	; (80008f0 <linkTimer+0x14c>)
 800086c:	4613      	mov	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	4413      	add	r3, r2
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	440b      	add	r3, r1
 8000876:	3315      	adds	r3, #21
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800087c:	7b7a      	ldrb	r2, [r7, #13]
 800087e:	491c      	ldr	r1, [pc, #112]	; (80008f0 <linkTimer+0x14c>)
 8000880:	4613      	mov	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	440b      	add	r3, r1
 800088a:	3315      	adds	r3, #21
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000890:	7b3b      	ldrb	r3, [r7, #12]
 8000892:	2b06      	cmp	r3, #6
 8000894:	d00b      	beq.n	80008ae <linkTimer+0x10a>
 8000896:	7b3a      	ldrb	r2, [r7, #12]
 8000898:	4915      	ldr	r1, [pc, #84]	; (80008f0 <linkTimer+0x14c>)
 800089a:	4613      	mov	r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	4413      	add	r3, r2
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	440b      	add	r3, r1
 80008a4:	3308      	adds	r3, #8
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d2dc      	bcs.n	8000868 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80008ae:	7b7a      	ldrb	r2, [r7, #13]
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fecf 	bl	8000658 <LinkTimerAfter>
 80008ba:	e00f      	b.n	80008dc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <linkTimer+0x144>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff0c 	bl	80006e4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <linkTimer+0x144>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <linkTimer+0x148>)
 80008d4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <linkTimer+0x144>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80008dc:	89fb      	ldrh	r3, [r7, #14]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000c4 	.word	0x200000c4
 80008ec:	200000c5 	.word	0x200000c5
 80008f0:	20000034 	.word	0x20000034
 80008f4:	200000c8 	.word	0x200000c8

080008f8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000908:	4b39      	ldr	r3, [pc, #228]	; (80009f0 <UnlinkTimer+0xf8>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	79fa      	ldrb	r2, [r7, #7]
 8000910:	429a      	cmp	r2, r3
 8000912:	d111      	bne.n	8000938 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000914:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <UnlinkTimer+0xf8>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <UnlinkTimer+0xfc>)
 800091c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	4935      	ldr	r1, [pc, #212]	; (80009f8 <UnlinkTimer+0x100>)
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	440b      	add	r3, r1
 800092c:	3315      	adds	r3, #21
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <UnlinkTimer+0xf8>)
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	e03e      	b.n	80009b6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	492f      	ldr	r1, [pc, #188]	; (80009f8 <UnlinkTimer+0x100>)
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	3314      	adds	r3, #20
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800094c:	79fa      	ldrb	r2, [r7, #7]
 800094e:	492a      	ldr	r1, [pc, #168]	; (80009f8 <UnlinkTimer+0x100>)
 8000950:	4613      	mov	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	3315      	adds	r3, #21
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000960:	79f9      	ldrb	r1, [r7, #7]
 8000962:	7bfa      	ldrb	r2, [r7, #15]
 8000964:	4824      	ldr	r0, [pc, #144]	; (80009f8 <UnlinkTimer+0x100>)
 8000966:	460b      	mov	r3, r1
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	440b      	add	r3, r1
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	4403      	add	r3, r0
 8000970:	3315      	adds	r3, #21
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2d8      	uxtb	r0, r3
 8000976:	4920      	ldr	r1, [pc, #128]	; (80009f8 <UnlinkTimer+0x100>)
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	440b      	add	r3, r1
 8000982:	3315      	adds	r3, #21
 8000984:	4602      	mov	r2, r0
 8000986:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000988:	7bbb      	ldrb	r3, [r7, #14]
 800098a:	2b06      	cmp	r3, #6
 800098c:	d013      	beq.n	80009b6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800098e:	79f9      	ldrb	r1, [r7, #7]
 8000990:	7bba      	ldrb	r2, [r7, #14]
 8000992:	4819      	ldr	r0, [pc, #100]	; (80009f8 <UnlinkTimer+0x100>)
 8000994:	460b      	mov	r3, r1
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	440b      	add	r3, r1
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	4403      	add	r3, r0
 800099e:	3314      	adds	r3, #20
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2d8      	uxtb	r0, r3
 80009a4:	4914      	ldr	r1, [pc, #80]	; (80009f8 <UnlinkTimer+0x100>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	440b      	add	r3, r1
 80009b0:	3314      	adds	r3, #20
 80009b2:	4602      	mov	r2, r0
 80009b4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	490f      	ldr	r1, [pc, #60]	; (80009f8 <UnlinkTimer+0x100>)
 80009ba:	4613      	mov	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4413      	add	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	440b      	add	r3, r1
 80009c4:	330c      	adds	r3, #12
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <UnlinkTimer+0xf8>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d107      	bne.n	80009e4 <UnlinkTimer+0xec>
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d104      	bne.n	80009e4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <UnlinkTimer+0x104>)
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e0:	601a      	str	r2, [r3, #0]
  }

  return;
 80009e2:	bf00      	nop
 80009e4:	bf00      	nop
}
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	200000c4 	.word	0x200000c4
 80009f4:	200000c5 	.word	0x200000c5
 80009f8:	20000034 	.word	0x20000034
 80009fc:	200000c8 	.word	0x200000c8

08000a00 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <ReturnTimeElapsed+0x70>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a0e:	d026      	beq.n	8000a5e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a10:	f7ff fe02 	bl	8000618 <ReadRtcSsrValue>
 8000a14:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <ReturnTimeElapsed+0x70>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d805      	bhi.n	8000a2c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <ReturnTimeElapsed+0x70>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	e00a      	b.n	8000a42 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <ReturnTimeElapsed+0x74>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <ReturnTimeElapsed+0x70>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <ReturnTimeElapsed+0x78>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <ReturnTimeElapsed+0x7c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	40d3      	lsrs	r3, r2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	e001      	b.n	8000a62 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	b29b      	uxth	r3, r3
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000c8 	.word	0x200000c8
 8000a74:	200001be 	.word	0x200001be
 8000a78:	200001bd 	.word	0x200001bd
 8000a7c:	200001bc 	.word	0x200001bc

08000a80 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d108      	bne.n	8000aa2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a90:	f7ff fdc2 	bl	8000618 <ReadRtcSsrValue>
 8000a94:	4602      	mov	r2, r0
 8000a96:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <RestartWakeupCounter+0xa8>)
 8000a98:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f002 fb53 	bl	8003146 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000aa0:	e03e      	b.n	8000b20 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d803      	bhi.n	8000ab0 <RestartWakeupCounter+0x30>
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <RestartWakeupCounter+0xac>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d002      	beq.n	8000ab6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ab6:	bf00      	nop
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <RestartWakeupCounter+0xb0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0f7      	beq.n	8000ab8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <RestartWakeupCounter+0xb0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <RestartWakeupCounter+0xb0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000adc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <RestartWakeupCounter+0xb4>)
 8000ae0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ae4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	f002 fb3b 	bl	8003162 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <RestartWakeupCounter+0xb8>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	0c1b      	lsrs	r3, r3, #16
 8000af2:	041b      	lsls	r3, r3, #16
 8000af4:	88fa      	ldrh	r2, [r7, #6]
 8000af6:	4910      	ldr	r1, [pc, #64]	; (8000b38 <RestartWakeupCounter+0xb8>)
 8000af8:	4313      	orrs	r3, r2
 8000afa:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000afc:	f7ff fd8c 	bl	8000618 <ReadRtcSsrValue>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <RestartWakeupCounter+0xa8>)
 8000b04:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <RestartWakeupCounter+0xb0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <RestartWakeupCounter+0xb0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b18:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b1a:	f3af 8000 	nop.w
  return ;
 8000b1e:	bf00      	nop
}
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000c8 	.word	0x200000c8
 8000b2c:	200001bc 	.word	0x200001bc
 8000b30:	200001b8 	.word	0x200001b8
 8000b34:	58000800 	.word	0x58000800
 8000b38:	40002800 	.word	0x40002800

08000b3c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b42:	4b47      	ldr	r3, [pc, #284]	; (8000c60 <RescheduleTimerList+0x124>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b4e:	d108      	bne.n	8000b62 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b50:	bf00      	nop
 8000b52:	4b44      	ldr	r3, [pc, #272]	; (8000c64 <RescheduleTimerList+0x128>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1f7      	bne.n	8000b52 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b62:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <RescheduleTimerList+0x128>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <RescheduleTimerList+0x128>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b74:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000b76:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <RescheduleTimerList+0x12c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000b7c:	7bfa      	ldrb	r2, [r7, #15]
 8000b7e:	493b      	ldr	r1, [pc, #236]	; (8000c6c <RescheduleTimerList+0x130>)
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	440b      	add	r3, r1
 8000b8a:	3308      	adds	r3, #8
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000b90:	f7ff ff36 	bl	8000a00 <ReturnTimeElapsed>
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d205      	bcs.n	8000bac <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ba4:	4b32      	ldr	r3, [pc, #200]	; (8000c70 <RescheduleTimerList+0x134>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	e04d      	b.n	8000c48 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <RescheduleTimerList+0x138>)
 8000bb0:	8812      	ldrh	r2, [r2, #0]
 8000bb2:	b292      	uxth	r2, r2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d906      	bls.n	8000bcc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <RescheduleTimerList+0x138>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <RescheduleTimerList+0x134>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	e03d      	b.n	8000c48 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <RescheduleTimerList+0x134>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bdc:	e034      	b.n	8000c48 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000bde:	7bfa      	ldrb	r2, [r7, #15]
 8000be0:	4922      	ldr	r1, [pc, #136]	; (8000c6c <RescheduleTimerList+0x130>)
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	440b      	add	r3, r1
 8000bec:	3308      	adds	r3, #8
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d20a      	bcs.n	8000c0c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000bf6:	7bfa      	ldrb	r2, [r7, #15]
 8000bf8:	491c      	ldr	r1, [pc, #112]	; (8000c6c <RescheduleTimerList+0x130>)
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	440b      	add	r3, r1
 8000c04:	3308      	adds	r3, #8
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e013      	b.n	8000c34 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	4917      	ldr	r1, [pc, #92]	; (8000c6c <RescheduleTimerList+0x130>)
 8000c10:	4613      	mov	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	4413      	add	r3, r2
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	440b      	add	r3, r1
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	6819      	ldr	r1, [r3, #0]
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	1ac9      	subs	r1, r1, r3
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <RescheduleTimerList+0x130>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	4403      	add	r3, r0
 8000c30:	3308      	adds	r3, #8
 8000c32:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c34:	7bfa      	ldrb	r2, [r7, #15]
 8000c36:	490d      	ldr	r1, [pc, #52]	; (8000c6c <RescheduleTimerList+0x130>)
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	440b      	add	r3, r1
 8000c42:	3315      	adds	r3, #21
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d1c7      	bne.n	8000bde <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c4e:	89bb      	ldrh	r3, [r7, #12]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff15 	bl	8000a80 <RestartWakeupCounter>

  return ;
 8000c56:	bf00      	nop
}
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40002800 	.word	0x40002800
 8000c64:	200001b8 	.word	0x200001b8
 8000c68:	200000c4 	.word	0x200000c4
 8000c6c:	20000034 	.word	0x20000034
 8000c70:	200000cc 	.word	0x200000cc
 8000c74:	200001c0 	.word	0x200001c0

08000c78 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8000c82:	617b      	str	r3, [r7, #20]
  return(result);
 8000c84:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c8a:	4b5e      	ldr	r3, [pc, #376]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	22ca      	movs	r2, #202	; 0xca
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
 8000c94:	4b5b      	ldr	r3, [pc, #364]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2253      	movs	r2, #83	; 0x53
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000c9e:	4b59      	ldr	r3, [pc, #356]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	4b57      	ldr	r3, [pc, #348]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cb0:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000cb2:	4b55      	ldr	r3, [pc, #340]	; (8000e08 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000cba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cbe:	4953      	ldr	r1, [pc, #332]	; (8000e0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	440b      	add	r3, r1
 8000cca:	330c      	adds	r3, #12
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d170      	bne.n	8000db6 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000cd4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cd8:	494c      	ldr	r1, [pc, #304]	; (8000e0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cda:	4613      	mov	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	440b      	add	r3, r1
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000ce8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cec:	4947      	ldr	r1, [pc, #284]	; (8000e0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	440b      	add	r3, r1
 8000cf8:	3310      	adds	r3, #16
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000cfe:	4b44      	ldr	r3, [pc, #272]	; (8000e10 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d04e      	beq.n	8000da6 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d08:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d0c:	493f      	ldr	r1, [pc, #252]	; (8000e0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	330d      	adds	r3, #13
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d125      	bne.n	8000d6e <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000d22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d26:	2101      	movs	r1, #1
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fde5 	bl	80008f8 <UnlinkTimer>
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d38:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d3c:	4933      	ldr	r1, [pc, #204]	; (8000e0c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d3e:	4613      	mov	r3, r2
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	4413      	add	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	440b      	add	r3, r1
 8000d48:	3304      	adds	r3, #4
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fa46 	bl	80011e4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d58:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	22ca      	movs	r2, #202	; 0xca
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
 8000d62:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2253      	movs	r2, #83	; 0x53
 8000d6a:	625a      	str	r2, [r3, #36]	; 0x24
 8000d6c:	e013      	b.n	8000d96 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f9a7 	bl	80010d0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	22ca      	movs	r2, #202	; 0xca
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2253      	movs	r2, #83	; 0x53
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000d96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d9a:	69fa      	ldr	r2, [r7, #28]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	69b8      	ldr	r0, [r7, #24]
 8000da0:	f000 faa6 	bl	80012f0 <HW_TS_RTC_Int_AppNot>
 8000da4:	e024      	b.n	8000df0 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8000da6:	f7ff fec9 	bl	8000b3c <RescheduleTimerList>
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	f383 8810 	msr	PRIMASK, r3
 8000db4:	e01c      	b.n	8000df0 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000db6:	bf00      	nop
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f7      	beq.n	8000db8 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ddc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000de0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	22ff      	movs	r2, #255	; 0xff
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000dfa:	bf00      	nop
}
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200001b8 	.word	0x200001b8
 8000e08:	200000c4 	.word	0x200000c4
 8000e0c:	20000034 	.word	0x20000034
 8000e10:	200000cc 	.word	0x200000cc
 8000e14:	58000800 	.word	0x58000800

08000e18 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000e24:	4a64      	ldr	r2, [pc, #400]	; (8000fb8 <HW_TS_Init+0x1a0>)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e2a:	4b63      	ldr	r3, [pc, #396]	; (8000fb8 <HW_TS_Init+0x1a0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	22ca      	movs	r2, #202	; 0xca
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
 8000e34:	4b60      	ldr	r3, [pc, #384]	; (8000fb8 <HW_TS_Init+0x1a0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2253      	movs	r2, #83	; 0x53
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e3e:	4b5f      	ldr	r3, [pc, #380]	; (8000fbc <HW_TS_Init+0x1a4>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	4a5e      	ldr	r2, [pc, #376]	; (8000fbc <HW_TS_Init+0x1a4>)
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000e4a:	4b5c      	ldr	r3, [pc, #368]	; (8000fbc <HW_TS_Init+0x1a4>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f1c3 0304 	rsb	r3, r3, #4
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <HW_TS_Init+0x1a8>)
 8000e5e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000e60:	4b56      	ldr	r3, [pc, #344]	; (8000fbc <HW_TS_Init+0x1a4>)
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000e68:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000e6c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	fa92 f2a2 	rbit	r2, r2
 8000e74:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	2a00      	cmp	r2, #0
 8000e7e:	d101      	bne.n	8000e84 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000e80:	2220      	movs	r2, #32
 8000e82:	e003      	b.n	8000e8c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	fab2 f282 	clz	r2, r2
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	40d3      	lsrs	r3, r2
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b4b      	ldr	r3, [pc, #300]	; (8000fc4 <HW_TS_Init+0x1ac>)
 8000e96:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000e98:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <HW_TS_Init+0x1a4>)
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HW_TS_Init+0x1b0>)
 8000eaa:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000eac:	4b46      	ldr	r3, [pc, #280]	; (8000fc8 <HW_TS_Init+0x1b0>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	4a44      	ldr	r2, [pc, #272]	; (8000fc4 <HW_TS_Init+0x1ac>)
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	fb02 f303 	mul.w	r3, r2, r3
 8000eba:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000ebe:	4a40      	ldr	r2, [pc, #256]	; (8000fc0 <HW_TS_Init+0x1a8>)
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	40d3      	lsrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d904      	bls.n	8000eda <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000ed0:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <HW_TS_Init+0x1b4>)
 8000ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ed6:	801a      	strh	r2, [r3, #0]
 8000ed8:	e003      	b.n	8000ee2 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <HW_TS_Init+0x1b4>)
 8000ee0:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000ee2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ee6:	f7ff fb85 	bl	80005f4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000eea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000eee:	f7ff fb6d 	bl	80005cc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d143      	bne.n	8000f80 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ef8:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <HW_TS_Init+0x1b8>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000efe:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <HW_TS_Init+0x1bc>)
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f04:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	77fb      	strb	r3, [r7, #31]
 8000f0a:	e00c      	b.n	8000f26 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f0c:	7ffa      	ldrb	r2, [r7, #31]
 8000f0e:	4932      	ldr	r1, [pc, #200]	; (8000fd8 <HW_TS_Init+0x1c0>)
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	330c      	adds	r3, #12
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	3301      	adds	r3, #1
 8000f24:	77fb      	strb	r3, [r7, #31]
 8000f26:	7ffb      	ldrb	r3, [r7, #31]
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	d9ef      	bls.n	8000f0c <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <HW_TS_Init+0x1c4>)
 8000f2e:	2206      	movs	r2, #6
 8000f30:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HW_TS_Init+0x1a0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <HW_TS_Init+0x1a0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f44:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HW_TS_Init+0x1a0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <HW_TS_Init+0x1a0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f5a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <HW_TS_Init+0x1c8>)
 8000f5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f62:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f64:	2003      	movs	r0, #3
 8000f66:	f002 f8fc 	bl	8003162 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HW_TS_Init+0x1a0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HW_TS_Init+0x1a0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	e00a      	b.n	8000f96 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HW_TS_Init+0x1a0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f002 f8d8 	bl	8003146 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HW_TS_Init+0x1a0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	22ff      	movs	r2, #255	; 0xff
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f002 f88c 	bl	80030c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000faa:	2003      	movs	r0, #3
 8000fac:	f002 f8a3 	bl	80030f6 <HAL_NVIC_EnableIRQ>

  return;
 8000fb0:	bf00      	nop
}
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200001b8 	.word	0x200001b8
 8000fbc:	40002800 	.word	0x40002800
 8000fc0:	200001bc 	.word	0x200001bc
 8000fc4:	200001bd 	.word	0x200001bd
 8000fc8:	200001be 	.word	0x200001be
 8000fcc:	200001c0 	.word	0x200001c0
 8000fd0:	200000cc 	.word	0x200000cc
 8000fd4:	200000c8 	.word	0x200000c8
 8000fd8:	20000034 	.word	0x20000034
 8000fdc:	200000c4 	.word	0x200000c4
 8000fe0:	58000800 	.word	0x58000800

08000fe4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b08b      	sub	sp, #44	; 0x2c
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8000ffe:	61fb      	str	r3, [r7, #28]
  return(result);
 8001000:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001002:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001006:	e004      	b.n	8001012 <HW_TS_Create+0x2e>
  {
    loop++;
 8001008:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800100c:	3301      	adds	r3, #1
 800100e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001012:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001016:	2b05      	cmp	r3, #5
 8001018:	d80c      	bhi.n	8001034 <HW_TS_Create+0x50>
 800101a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800101e:	492b      	ldr	r1, [pc, #172]	; (80010cc <HW_TS_Create+0xe8>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	330c      	adds	r3, #12
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1e9      	bne.n	8001008 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001034:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001038:	2b06      	cmp	r3, #6
 800103a:	d037      	beq.n	80010ac <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800103c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001040:	4922      	ldr	r1, [pc, #136]	; (80010cc <HW_TS_Create+0xe8>)
 8001042:	4613      	mov	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	330c      	adds	r3, #12
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800105c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001060:	491a      	ldr	r1, [pc, #104]	; (80010cc <HW_TS_Create+0xe8>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	3310      	adds	r3, #16
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001072:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001076:	4915      	ldr	r1, [pc, #84]	; (80010cc <HW_TS_Create+0xe8>)
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	440b      	add	r3, r1
 8001082:	330d      	adds	r3, #13
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001088:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800108c:	490f      	ldr	r1, [pc, #60]	; (80010cc <HW_TS_Create+0xe8>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010a2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010aa:	e007      	b.n	80010bc <HW_TS_Create+0xd8>
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80010bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	372c      	adds	r7, #44	; 0x2c
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	20000034 	.word	0x20000034

080010d0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010da:	f3ef 8310 	mrs	r3, PRIMASK
 80010de:	60fb      	str	r3, [r7, #12]
  return(result);
 80010e0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80010e6:	2003      	movs	r0, #3
 80010e8:	f002 f813 	bl	8003112 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010ec:	4b37      	ldr	r3, [pc, #220]	; (80011cc <HW_TS_Stop+0xfc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	22ca      	movs	r2, #202	; 0xca
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24
 80010f6:	4b35      	ldr	r3, [pc, #212]	; (80011cc <HW_TS_Stop+0xfc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2253      	movs	r2, #83	; 0x53
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001100:	79fa      	ldrb	r2, [r7, #7]
 8001102:	4933      	ldr	r1, [pc, #204]	; (80011d0 <HW_TS_Stop+0x100>)
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	440b      	add	r3, r1
 800110e:	330c      	adds	r3, #12
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d148      	bne.n	80011aa <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fbeb 	bl	80008f8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <HW_TS_Stop+0x104>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001128:	7cfb      	ldrb	r3, [r7, #19]
 800112a:	2b06      	cmp	r3, #6
 800112c:	d135      	bne.n	800119a <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HW_TS_Stop+0x108>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113a:	d108      	bne.n	800114e <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800113c:	bf00      	nop
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HW_TS_Stop+0xfc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f7      	bne.n	800113e <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <HW_TS_Stop+0xfc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HW_TS_Stop+0xfc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001160:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001162:	bf00      	nop
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HW_TS_Stop+0xfc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f7      	beq.n	8001164 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HW_TS_Stop+0xfc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HW_TS_Stop+0xfc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001188:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HW_TS_Stop+0x10c>)
 800118c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001190:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001192:	2003      	movs	r0, #3
 8001194:	f001 ffe5 	bl	8003162 <HAL_NVIC_ClearPendingIRQ>
 8001198:	e007      	b.n	80011aa <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HW_TS_Stop+0x110>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	7cfa      	ldrb	r2, [r7, #19]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 80011a6:	f7ff fcc9 	bl	8000b3c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HW_TS_Stop+0xfc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	22ff      	movs	r2, #255	; 0xff
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011b4:	2003      	movs	r0, #3
 80011b6:	f001 ff9e 	bl	80030f6 <HAL_NVIC_EnableIRQ>
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011c4:	bf00      	nop
}
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001b8 	.word	0x200001b8
 80011d0:	20000034 	.word	0x20000034
 80011d4:	200000c4 	.word	0x200000c4
 80011d8:	40002800 	.word	0x40002800
 80011dc:	58000800 	.word	0x58000800
 80011e0:	200000c5 	.word	0x200000c5

080011e4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	493b      	ldr	r1, [pc, #236]	; (80012e0 <HW_TS_Start+0xfc>)
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	440b      	add	r3, r1
 80011fe:	330c      	adds	r3, #12
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d103      	bne.n	8001210 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff60 	bl	80010d0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001210:	f3ef 8310 	mrs	r3, PRIMASK
 8001214:	60fb      	str	r3, [r7, #12]
  return(result);
 8001216:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001218:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800121a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800121c:	2003      	movs	r0, #3
 800121e:	f001 ff78 	bl	8003112 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <HW_TS_Start+0x100>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	22ca      	movs	r2, #202	; 0xca
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HW_TS_Start+0x100>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2253      	movs	r2, #83	; 0x53
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	4929      	ldr	r1, [pc, #164]	; (80012e0 <HW_TS_Start+0xfc>)
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	330c      	adds	r3, #12
 8001246:	2202      	movs	r2, #2
 8001248:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	4924      	ldr	r1, [pc, #144]	; (80012e0 <HW_TS_Start+0xfc>)
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	3308      	adds	r3, #8
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800125e:	79fa      	ldrb	r2, [r7, #7]
 8001260:	491f      	ldr	r1, [pc, #124]	; (80012e0 <HW_TS_Start+0xfc>)
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	440b      	add	r3, r1
 800126c:	3304      	adds	r3, #4
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fa95 	bl	80007a4 <linkTimer>
 800127a:	4603      	mov	r3, r0
 800127c:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HW_TS_Start+0x104>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HW_TS_Start+0x108>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	7c7a      	ldrb	r2, [r7, #17]
 800128c:	429a      	cmp	r2, r3
 800128e:	d002      	beq.n	8001296 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8001290:	f7ff fc54 	bl	8000b3c <RescheduleTimerList>
 8001294:	e013      	b.n	80012be <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001296:	79fa      	ldrb	r2, [r7, #7]
 8001298:	4911      	ldr	r1, [pc, #68]	; (80012e0 <HW_TS_Start+0xfc>)
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	3308      	adds	r3, #8
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	8a7b      	ldrh	r3, [r7, #18]
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	1ac9      	subs	r1, r1, r3
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <HW_TS_Start+0xfc>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4403      	add	r3, r0
 80012ba:	3308      	adds	r3, #8
 80012bc:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HW_TS_Start+0x100>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	22ff      	movs	r2, #255	; 0xff
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012c8:	2003      	movs	r0, #3
 80012ca:	f001 ff14 	bl	80030f6 <HAL_NVIC_EnableIRQ>
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012d8:	bf00      	nop
}
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000034 	.word	0x20000034
 80012e4:	200001b8 	.word	0x200001b8
 80012e8:	200000c4 	.word	0x200000c4
 80012ec:	200000c5 	.word	0x200000c5

080012f0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	460b      	mov	r3, r1
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4798      	blx	r3

  return;
 8001302:	bf00      	nop
}
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <LL_EXTI_DisableIT_0_31>:
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <LL_EXTI_DisableIT_0_31+0x28>)
 8001316:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	43db      	mvns	r3, r3
 800131e:	4905      	ldr	r1, [pc, #20]	; (8001334 <LL_EXTI_DisableIT_0_31+0x28>)
 8001320:	4013      	ands	r3, r2
 8001322:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	58000800 	.word	0x58000800

08001338 <LL_EXTI_DisableIT_32_63>:
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <LL_EXTI_DisableIT_32_63+0x28>)
 8001342:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	43db      	mvns	r3, r3
 800134a:	4905      	ldr	r1, [pc, #20]	; (8001360 <LL_EXTI_DisableIT_32_63+0x28>)
 800134c:	4013      	ands	r3, r2
 800134e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	58000800 	.word	0x58000800

08001364 <LL_RCC_HSI48_Enable>:
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_RCC_HSI48_IsReady>:
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800138a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b02      	cmp	r3, #2
 8001398:	d101      	bne.n	800139e <LL_RCC_HSI48_IsReady+0x18>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <LL_RCC_HSI48_IsReady+0x1a>
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <LL_RCC_LSE_Enable>:
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_RCC_LSE_IsReady>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d101      	bne.n	80013e4 <LL_RCC_LSE_IsReady+0x18>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <LL_RCC_LSE_IsReady+0x1a>
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_RCC_SetRFWKPClockSource>:
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80013f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001400:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4313      	orrs	r3, r2
 800140c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001430:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4313      	orrs	r3, r2
 8001438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800147a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800149c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80014b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014c2:	d101      	bne.n	80014c8 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014e8:	d101      	bne.n	80014ee <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <LL_AHB3_GRP1_EnableClock>:
{
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4313      	orrs	r3, r2
 8001510:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4013      	ands	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_APB1_GRP1_EnableClock>:
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001538:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800153a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4313      	orrs	r3, r2
 8001542:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001548:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001550:	68fb      	ldr	r3, [r7, #12]
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	605a      	str	r2, [r3, #4]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	605a      	str	r2, [r3, #4]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	615a      	str	r2, [r3, #20]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	615a      	str	r2, [r3, #20]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	609a      	str	r2, [r3, #8]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	619a      	str	r2, [r3, #24]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	3220      	adds	r2, #32
 8001634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001638:	4a05      	ldr	r2, [pc, #20]	; (8001650 <LL_HSEM_1StepLock+0x2c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d001      	beq.n	8001642 <LL_HSEM_1StepLock+0x1e>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <LL_HSEM_1StepLock+0x20>
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	80000400 	.word	0x80000400

08001654 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	22ff      	movs	r2, #255	; 0xff
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	22ca      	movs	r2, #202	; 0xca
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2253      	movs	r2, #83	; 0x53
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 0207 	bic.w	r2, r3, #7
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main( void )
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <main+0x30>)
 80016ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016be:	611a      	str	r2, [r3, #16]

  HAL_Init();
 80016c0:	f001 fb20 	bl	8002d04 <HAL_Init>

  Reset_Device();
 80016c4:	f000 f81c 	bl	8001700 <Reset_Device>

  /**
   * When the application is expected to run at higher speed, it should be better to set the correct system clock
   * in system_stm32yyxx.c so that the initialization phase is running at max speed.
   */
  SystemClock_Config(); /**< Configure the system clock */
 80016c8:	f000 f886 	bl	80017d8 <SystemClock_Config>

  Init_Exti( );
 80016cc:	f000 f80c 	bl	80016e8 <Init_Exti>

  Init_RTC();
 80016d0:	f000 f858 	bl	8001784 <Init_RTC>

  APPE_Init( );
 80016d4:	f7fe fea2 	bl	800041c <APPE_Init>

  while(1)
  {
    UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016dc:	f007 fc9e 	bl	800901c <UTIL_SEQ_Run>
 80016e0:	e7fa      	b.n	80016d8 <main+0x24>
 80016e2:	bf00      	nop
 80016e4:	58004000 	.word	0x58004000

080016e8 <Init_Exti>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Exti( void )
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f0:	f7ff fe0c 	bl	800130c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80016f4:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80016f8:	f7ff fe1e 	bl	8001338 <LL_EXTI_DisableIT_32_63>

  return;
 80016fc:	bf00      	nop
}
 80016fe:	bd80      	pop	{r7, pc}

08001700 <Reset_Device>:

static void Reset_Device( void )
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8001704:	f000 f826 	bl	8001754 <Reset_BackupDomain>

  Reset_IPCC();
 8001708:	f000 f802 	bl	8001710 <Reset_IPCC>
#endif

  return;
 800170c:	bf00      	nop
}
 800170e:	bd80      	pop	{r7, pc}

08001710 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001714:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001718:	f7ff feef 	bl	80014fa <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800171c:	213f      	movs	r1, #63	; 0x3f
 800171e:	480c      	ldr	r0, [pc, #48]	; (8001750 <Reset_IPCC+0x40>)
 8001720:	f7ff ff63 	bl	80015ea <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001724:	213f      	movs	r1, #63	; 0x3f
 8001726:	480a      	ldr	r0, [pc, #40]	; (8001750 <Reset_IPCC+0x40>)
 8001728:	f7ff ff6d 	bl	8001606 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800172c:	213f      	movs	r1, #63	; 0x3f
 800172e:	4808      	ldr	r0, [pc, #32]	; (8001750 <Reset_IPCC+0x40>)
 8001730:	f7ff ff15 	bl	800155e <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001734:	213f      	movs	r1, #63	; 0x3f
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <Reset_IPCC+0x40>)
 8001738:	f7ff ff34 	bl	80015a4 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800173c:	213f      	movs	r1, #63	; 0x3f
 800173e:	4804      	ldr	r0, [pc, #16]	; (8001750 <Reset_IPCC+0x40>)
 8001740:	f7ff ff1f 	bl	8001582 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001744:	213f      	movs	r1, #63	; 0x3f
 8001746:	4802      	ldr	r0, [pc, #8]	; (8001750 <Reset_IPCC+0x40>)
 8001748:	f7ff ff3e 	bl	80015c8 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800174c:	bf00      	nop
}
 800174e:	bd80      	pop	{r7, pc}
 8001750:	58000c00 	.word	0x58000c00

08001754 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001758:	f7ff fea9 	bl	80014ae <LL_RCC_IsActiveFlag_PINRST>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <Reset_BackupDomain+0x2a>
 8001762:	f7ff feb7 	bl	80014d4 <LL_RCC_IsActiveFlag_SFTRST>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d108      	bne.n	800177e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800176c:	f002 fc52 	bl	8004014 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001770:	f002 fc50 	bl	8004014 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001774:	f7ff fe79 	bl	800146a <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001778:	f7ff fe88 	bl	800148c <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 800177c:	bf00      	nop
 800177e:	bf00      	nop
}
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <Init_RTC>:

static void Init_RTC( void )
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001788:	f002 fc44 	bl	8004014 <HAL_PWR_EnableBkUpAccess>

  /**
   *  Write twice the value to flush the APB-AHB bridge
   *  This bit shall be written in the register before writing the next one
   */
  HAL_PWR_EnableBkUpAccess();
 800178c:	f002 fc42 	bl	8004014 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8001790:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001794:	f7ff fe42 	bl	800141c <LL_RCC_SetRTCClockSource>

  __HAL_RCC_RTC_ENABLE(); /**< Enable RTC */
 8001798:	f7ff fe56 	bl	8001448 <LL_RCC_EnableRTC>

  hrtc.Instance = RTC; /**< Define instance */
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <Init_RTC+0x4c>)
 800179e:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <Init_RTC+0x50>)
 80017a0:	601a      	str	r2, [r3, #0]

  /**
   * Set the Asynchronous prescaler
   */
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <Init_RTC+0x4c>)
 80017a4:	220f      	movs	r2, #15
 80017a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <Init_RTC+0x4c>)
 80017aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80017ae:	60da      	str	r2, [r3, #12]
  HAL_RTC_Init(&hrtc);
 80017b0:	4807      	ldr	r0, [pc, #28]	; (80017d0 <Init_RTC+0x4c>)
 80017b2:	f003 f9c0 	bl	8004b36 <HAL_RTC_Init>

  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80017b6:	4807      	ldr	r0, [pc, #28]	; (80017d4 <Init_RTC+0x50>)
 80017b8:	f7ff ff59 	bl	800166e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80017bc:	2100      	movs	r1, #0
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <Init_RTC+0x50>)
 80017c0:	f7ff ff65 	bl	800168e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80017c4:	4803      	ldr	r0, [pc, #12]	; (80017d4 <Init_RTC+0x50>)
 80017c6:	f7ff ff45 	bl	8001654 <LL_RTC_EnableWriteProtection>

  return;
 80017ca:	bf00      	nop
}
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200001c4 	.word	0x200001c4
 80017d4:	40002800 	.word	0x40002800

080017d8 <SystemClock_Config>:
 *
 * @param  None
 * @retval None
 */
void SystemClock_Config( void )
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b09a      	sub	sp, #104	; 0x68
 80017dc:	af00      	add	r7, sp, #0
#if (CFG_USB_INTERFACE_ENABLE != 0)
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80017de:	f107 0318 	add.w	r3, r7, #24
 80017e2:	2250      	movs	r2, #80	; 0x50
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f007 fe55 	bl	8009496 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = { 0 };
 80017ec:	463b      	mov	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	615a      	str	r2, [r3, #20]

  /**
   * This prevents the CPU2 to disable the HSI48 oscillator when
   * it does not use anymore the RNG IP
   */
  LL_HSEM_1StepLock( HSEM, 5 );
 80017fc:	2105      	movs	r1, #5
 80017fe:	481f      	ldr	r0, [pc, #124]	; (800187c <SystemClock_Config+0xa4>)
 8001800:	f7ff ff10 	bl	8001624 <LL_HSEM_1StepLock>

  LL_RCC_HSI48_Enable();
 8001804:	f7ff fdae 	bl	8001364 <LL_RCC_HSI48_Enable>

  while(!LL_RCC_HSI48_IsReady());
 8001808:	bf00      	nop
 800180a:	f7ff fdbc 	bl	8001386 <LL_RCC_HSI48_IsReady>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0fa      	beq.n	800180a <SystemClock_Config+0x32>

  /* Select HSI48 as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001818:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800181a:	2300      	movs	r3, #0
 800181c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800181e:	f107 0318 	add.w	r3, r7, #24
 8001822:	4618      	mov	r0, r3
 8001824:	f002 fec6 	bl	80045b4 <HAL_RCCEx_PeriphCLKConfig>

  /*Configure the clock recovery system (CRS)**********************************/

  /* Enable CRS Clock */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001828:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800182c:	f7ff fe7e 	bl	800152c <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8001834:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001838:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 800183a:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 800183e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8001840:	2322      	movs	r3, #34	; 0x22
 8001842:	613b      	str	r3, [r7, #16]

  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]

  /* Set the TRIM[5:0] to the default value*/
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8001848:	2320      	movs	r3, #32
 800184a:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800184c:	463b      	mov	r3, r7
 800184e:	4618      	mov	r0, r3
 8001850:	f003 f826 	bl	80048a0 <HAL_RCCEx_CRSConfig>
#endif

        /**
         *  Write twice the value to flush the APB-AHB bridge to ensure the  bit is written
         */
        HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001854:	f002 fbde 	bl	8004014 <HAL_PWR_EnableBkUpAccess>
        HAL_PWR_EnableBkUpAccess();
 8001858:	f002 fbdc 	bl	8004014 <HAL_PWR_EnableBkUpAccess>

  /**
   * Select LSE clock
   */
  LL_RCC_LSE_Enable();
 800185c:	f7ff fda5 	bl	80013aa <LL_RCC_LSE_Enable>
  while(!LL_RCC_LSE_IsReady());
 8001860:	bf00      	nop
 8001862:	f7ff fdb3 	bl	80013cc <LL_RCC_LSE_IsReady>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0fa      	beq.n	8001862 <SystemClock_Config+0x8a>

  /**
   * Select wakeup source of BLE RF
   */
  LL_RCC_SetRFWKPClockSource(LL_RCC_RFWKP_CLKSOURCE_LSE);
 800186c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001870:	f7ff fdbe 	bl	80013f0 <LL_RCC_SetRFWKPClockSource>

  return;
 8001874:	bf00      	nop
}
 8001876:	3768      	adds	r7, #104	; 0x68
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	58001400 	.word	0x58001400

08001880 <Error_Handler>:
    __WFI( );
  }
}

void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <LL_PWR_SetPowerMode>:
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <LL_PWR_SetPowerMode+0x24>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 0207 	bic.w	r2, r3, #7
 80018a0:	4904      	ldr	r1, [pc, #16]	; (80018b4 <LL_PWR_SetPowerMode+0x24>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	58000400 	.word	0x58000400

080018b8 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <LL_PWR_ClearFlag_WU+0x14>)
 80018be:	221f      	movs	r2, #31
 80018c0:	619a      	str	r2, [r3, #24]
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	58000400 	.word	0x58000400

080018d0 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e2:	d101      	bne.n	80018e8 <LL_PWR_IsActiveFlag_C2DS+0x18>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <LL_PWR_IsActiveFlag_C2DS+0x1a>
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	58000400 	.word	0x58000400

080018f8 <LL_RCC_HSE_Enable>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_RCC_HSE_IsReady>:
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001928:	d101      	bne.n	800192e <LL_RCC_HSE_IsReady+0x18>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <LL_RCC_HSE_IsReady+0x1a>
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_RCC_HSI_Enable>:
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	6013      	str	r3, [r2, #0]
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_RCC_HSI_IsReady>:
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196a:	d101      	bne.n	8001970 <LL_RCC_HSI_IsReady+0x18>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_RCC_HSI_IsReady+0x1a>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_RCC_SetSysClkSource>:
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 0203 	bic.w	r2, r3, #3
 800198e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_RCC_GetSysClkSource>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_RCC_SetSMPSClockSource>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80019c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <LL_LPM_EnableSleep+0x1c>)
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <LL_LPM_EnableSleep+0x1c>)
 80019ee:	f023 0304 	bic.w	r3, r3, #4
 80019f2:	6113      	str	r3, [r2, #16]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <LL_LPM_EnableDeepSleep+0x1c>)
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <LL_LPM_EnableDeepSleep+0x1c>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6113      	str	r3, [r2, #16]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <LL_HSEM_1StepLock>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	3220      	adds	r2, #32
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <LL_HSEM_1StepLock+0x2c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d001      	beq.n	8001a42 <LL_HSEM_1StepLock+0x1e>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <LL_HSEM_1StepLock+0x20>
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	80000400 	.word	0x80000400

08001a54 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0

  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001a7e:	f001 f9bb 	bl	8002df8 <HAL_SuspendTick>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU( );
 8001a82:	f7ff ff19 	bl	80018b8 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode( LL_PWR_MODE_STANDBY );
 8001a86:	2003      	movs	r0, #3
 8001a88:	f7ff ff02 	bl	8001890 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001a8c:	f7ff ffba 	bl	8001a04 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI( );
 8001a90:	bf30      	wfi
/* USER CODE END PWR_EnterOffMode */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

  HAL_ResumeTick();
 8001a9a:	f001 f9bd 	bl	8002e18 <HAL_ResumeTick>

/* USER CODE END PWR_ExitOffMode */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode ( this will abort the Stop Mode entry ).
   */
  HAL_SuspendTick();
 8001aa8:	f001 f9a6 	bl	8002df8 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8001aac:	bf00      	nop
 8001aae:	2103      	movs	r1, #3
 8001ab0:	4814      	ldr	r0, [pc, #80]	; (8001b04 <PWR_EnterStopMode+0x60>)
 8001ab2:	f7ff ffb7 	bl	8001a24 <LL_HSEM_1StepLock>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f8      	bne.n	8001aae <PWR_EnterStopMode+0xa>

  if ( ! LL_HSEM_1StepLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID ) )
 8001abc:	2104      	movs	r1, #4
 8001abe:	4811      	ldr	r0, [pc, #68]	; (8001b04 <PWR_EnterStopMode+0x60>)
 8001ac0:	f7ff ffb0 	bl	8001a24 <LL_HSEM_1StepLock>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <PWR_EnterStopMode+0x40>
  {
    if( LL_PWR_IsActiveFlag_C2DS( ) )
 8001aca:	f7ff ff01 	bl	80018d0 <LL_PWR_IsActiveFlag_C2DS>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <PWR_EnterStopMode+0x44>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	480a      	ldr	r0, [pc, #40]	; (8001b04 <PWR_EnterStopMode+0x60>)
 8001ada:	f7ff ffbb 	bl	8001a54 <LL_HSEM_ReleaseLock>

      /**
       * The switch on HSI before entering Stop Mode is required 
       */
      Switch_On_HSI( );
 8001ade:	f000 f852 	bl	8001b86 <Switch_On_HSI>
 8001ae2:	e001      	b.n	8001ae8 <PWR_EnterStopMode+0x44>
  else
  {
    /**
     * The switch on HSI before entering Stop Mode is required 
     */
    Switch_On_HSI( );
 8001ae4:	f000 f84f 	bl	8001b86 <Switch_On_HSI>
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2103      	movs	r1, #3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <PWR_EnterStopMode+0x60>)
 8001aee:	f7ff ffb1 	bl	8001a54 <LL_HSEM_ReleaseLock>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode( LL_PWR_MODE_STOP2 );
 8001af2:	2002      	movs	r0, #2
 8001af4:	f7ff fecc 	bl	8001890 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001af8:	f7ff ff84 	bl	8001a04 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI();
 8001afc:	bf30      	wfi
/* USER CODE END PWR_EnterStopMode */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	58001400 	.word	0x58001400

08001b08 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2104      	movs	r1, #4
 8001b10:	4814      	ldr	r0, [pc, #80]	; (8001b64 <PWR_ExitStopMode+0x5c>)
 8001b12:	f7ff ff9f 	bl	8001a54 <LL_HSEM_ReleaseLock>

  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8001b16:	bf00      	nop
 8001b18:	2103      	movs	r1, #3
 8001b1a:	4812      	ldr	r0, [pc, #72]	; (8001b64 <PWR_ExitStopMode+0x5c>)
 8001b1c:	f7ff ff82 	bl	8001a24 <LL_HSEM_1StepLock>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f8      	bne.n	8001b18 <PWR_ExitStopMode+0x10>

  if(LL_RCC_GetSysClkSource( ) == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001b26:	f7ff ff3d 	bl	80019a4 <LL_RCC_GetSysClkSource>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d110      	bne.n	8001b52 <PWR_ExitStopMode+0x4a>
  {
    LL_RCC_HSE_Enable( );
 8001b30:	f7ff fee2 	bl	80018f8 <LL_RCC_HSE_Enable>
    while(!LL_RCC_HSE_IsReady( ));
 8001b34:	bf00      	nop
 8001b36:	f7ff feee 	bl	8001916 <LL_RCC_HSE_IsReady>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0fa      	beq.n	8001b36 <PWR_ExitStopMode+0x2e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001b40:	2002      	movs	r0, #2
 8001b42:	f7ff ff1b 	bl	800197c <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001b46:	bf00      	nop
 8001b48:	f7ff ff2c 	bl	80019a4 <LL_RCC_GetSysClkSource>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d1fa      	bne.n	8001b48 <PWR_ExitStopMode+0x40>
     * there is nothing to do here
     */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8001b52:	2200      	movs	r2, #0
 8001b54:	2103      	movs	r1, #3
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <PWR_ExitStopMode+0x5c>)
 8001b58:	f7ff ff7c 	bl	8001a54 <LL_HSEM_ReleaseLock>

  HAL_ResumeTick();
 8001b5c:	f001 f95c 	bl	8002e18 <HAL_ResumeTick>

/* USER CODE END PWR_ExitStopMode */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	58001400 	.word	0x58001400

08001b68 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

  HAL_SuspendTick();
 8001b6c:	f001 f944 	bl	8002df8 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001b70:	f7ff ff38 	bl	80019e4 <LL_LPM_EnableSleep>
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI( );
 8001b74:	bf30      	wfi
/* USER CODE END PWR_EnterSleepMode */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

  HAL_ResumeTick();
 8001b7e:	f001 f94b 	bl	8002e18 <HAL_ResumeTick>

/* USER CODE END PWR_ExitSleepMode */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI( void )
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable( );
 8001b8a:	f7ff fed6 	bl	800193a <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady( ));
 8001b8e:	bf00      	nop
 8001b90:	f7ff fee2 	bl	8001958 <LL_RCC_HSI_IsReady>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0fa      	beq.n	8001b90 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSI );
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f7ff feee 	bl	800197c <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff ff0b 	bl	80019bc <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001ba6:	bf00      	nop
 8001ba8:	f7ff fefc 	bl	80019a4 <LL_RCC_GetSysClkSource>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d1fa      	bne.n	8001ba8 <Switch_On_HSI+0x22>
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <HardFault_Handler+0x4>

08001bca <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001bf8:	f001 f8de 	bl	8002db8 <HAL_IncTick>
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8001c04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c08:	f001 fc42 	bl	8003490 <HAL_GPIO_EXTI_IRQHandler>
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <USB_LP_IRQHandler>:

  
void USB_LP_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <USB_LP_IRQHandler+0x10>)
 8001c16:	f001 fc53 	bl	80034c0 <HAL_PCD_IRQHandler>
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000314 	.word	0x20000314

08001c24 <USB_HP_IRQHandler>:
  * @brief  This function handles USB FS global interrupt request.
  * @param  None
  * @retval None
  */
void USB_HP_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <USB_HP_IRQHandler+0x10>)
 8001c2a:	f001 fc49 	bl	80034c0 <HAL_PCD_IRQHandler>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000314 	.word	0x20000314

08001c38 <RTC_WKUP_IRQHandler>:
  HW_UART_DMA_Interrupt_Handler(hw_lpuart1);
}
#endif

void RTC_WKUP_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8001c3c:	f7ff f81c 	bl	8000c78 <HW_TS_RTC_Wakeup_Handler>
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001c48:	f000 fd34 	bl	80026b4 <HW_IPCC_Tx_Handler>

  return;
 8001c4c:	bf00      	nop
}
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001c54:	f000 fcf6 	bl	8002644 <HW_IPCC_Rx_Handler>
  return;
 8001c58:	bf00      	nop
}
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <LL_FLASH_GetUDN+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	1fff7580 	.word	0x1fff7580

08001c74 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <LL_FLASH_GetDeviceID+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	b2db      	uxtb	r3, r3
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	1fff7584 	.word	0x1fff7584

08001c8c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <LL_FLASH_GetSTCompanyID+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0a1b      	lsrs	r3, r3, #8
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	1fff7584 	.word	0x1fff7584

08001ca4 <APP_BLE_Init>:
static void Adv_Cancel_Req( void );
static void Switch_OFF_GPIO( void );

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8001ca4:	b5b0      	push	{r4, r5, r7, lr}
 8001ca6:	b08c      	sub	sp, #48	; 0x30
 8001ca8:	af00      	add	r7, sp, #0
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <APP_BLE_Init+0xb0>)
 8001cac:	463c      	mov	r4, r7
 8001cae:	461d      	mov	r5, r3
 8001cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cbc:	c407      	stmia	r4!, {r0, r1, r2}
 8001cbe:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8001cc0:	f000 f8ee 	bl	8001ea0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f007 f946 	bl	8008f58 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8001ccc:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <APP_BLE_Init+0xb4>)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2004      	movs	r0, #4
 8001cd2:	f007 fa83 	bl	80091dc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f006 f9e6 	bl	80080aa <SHCI_C2_BLE_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8001ce4:	f7ff fdcc 	bl	8001880 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8001ce8:	f000 f8f0 	bl	8001ecc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8001cec:	f005 fa44 	bl	8007178 <SVCCTL_Init>
  
    /**
   * Initialization of the BLE App Context
   */
  
    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <APP_BLE_Init+0xb8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <APP_BLE_Init+0xb8>)
 8001cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfe:	82da      	strh	r2, [r3, #22]
  
  /**
   * From here, all initialization are P2P BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8001d00:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <APP_BLE_Init+0xbc>)
 8001d02:	2100      	movs	r1, #0
 8001d04:	2001      	movs	r0, #1
 8001d06:	f007 fa69 	bl	80091dc <UTIL_SEQ_RegTask>
/**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
 */  

#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 8001d0a:	2006      	movs	r0, #6
 8001d0c:	f006 f8d8 	bl	8007ec0 <aci_hal_set_radio_activity_mask>
#endif  
      
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8001d10:	f000 fb40 	bl	8002394 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <APP_BLE_Init+0xc0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	4913      	ldr	r1, [pc, #76]	; (8001d68 <APP_BLE_Init+0xc4>)
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff f962 	bl	8000fe4 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <APP_BLE_Init+0xc8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	4912      	ldr	r1, [pc, #72]	; (8001d70 <APP_BLE_Init+0xcc>)
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff f95c 	bl	8000fe4 <HW_TS_Create>

  
  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <APP_BLE_Init+0xb8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <APP_BLE_Init+0xb8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	761a      	strb	r2, [r3, #24]
  
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <APP_BLE_Init+0xd0>)
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <APP_BLE_Init+0xd4>)
 8001d40:	22a0      	movs	r2, #160	; 0xa0
 8001d42:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8001d44:	2001      	movs	r0, #1
 8001d46:	f000 f983 	bl	8002050 <Adv_Request>

  return;
 8001d4a:	bf00      	nop
}
 8001d4c:	3730      	adds	r7, #48	; 0x30
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	080094dc 	.word	0x080094dc
 8001d58:	08008141 	.word	0x08008141
 8001d5c:	200000d0 	.word	0x200000d0
 8001d60:	080021b9 	.word	0x080021b9
 8001d64:	080021f1 	.word	0x080021f1
 8001d68:	20000151 	.word	0x20000151
 8001d6c:	08002201 	.word	0x08002201
 8001d70:	20000152 	.word	0x20000152
 8001d74:	20000154 	.word	0x20000154
 8001d78:	20000156 	.word	0x20000156

08001d7c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3301      	adds	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
  
  switch (event_pckt->evt)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b3e      	cmp	r3, #62	; 0x3e
 8001d90:	d024      	beq.n	8001ddc <SVCCTL_App_Notification+0x60>
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d056      	beq.n	8001e44 <SVCCTL_App_Notification+0xc8>
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d000      	beq.n	8001d9c <SVCCTL_App_Notification+0x20>
#endif   
      }
      break; /* EVT_VENDOR */

        default:
          break;
 8001d9a:	e072      	b.n	8001e82 <SVCCTL_App_Notification+0x106>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	3302      	adds	r3, #2
 8001da0:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <SVCCTL_App_Notification+0x110>)
 8001dac:	8adb      	ldrh	r3, [r3, #22]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d106      	bne.n	8001dc0 <SVCCTL_App_Notification+0x44>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <SVCCTL_App_Notification+0x110>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <SVCCTL_App_Notification+0x110>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
       Adv_Request(APP_BLE_FAST_ADV);
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f000 f945 	bl	8002050 <Adv_Request>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8001dc6:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <SVCCTL_App_Notification+0x114>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <SVCCTL_App_Notification+0x110>)
 8001dce:	8ada      	ldrh	r2, [r3, #22]
 8001dd0:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <SVCCTL_App_Notification+0x114>)
 8001dd2:	805a      	strh	r2, [r3, #2]
        P2PS_APP_Notification(&handleNotification);
 8001dd4:	482e      	ldr	r0, [pc, #184]	; (8001e90 <SVCCTL_App_Notification+0x114>)
 8001dd6:	f000 fac9 	bl	800236c <P2PS_APP_Notification>
      break; /* EVT_DISCONN_COMPLETE */
 8001dda:	e052      	b.n	8001e82 <SVCCTL_App_Notification+0x106>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	3302      	adds	r3, #2
 8001de0:	617b      	str	r3, [r7, #20]
      switch (meta_evt->subevent)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d002      	beq.n	8001df0 <SVCCTL_App_Notification+0x74>
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d028      	beq.n	8001e40 <SVCCTL_App_Notification+0xc4>
          break;
 8001dee:	e028      	b.n	8001e42 <SVCCTL_App_Notification+0xc6>
            connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	3301      	adds	r3, #1
 8001df4:	613b      	str	r3, [r7, #16]
            HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001df6:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <SVCCTL_App_Notification+0x110>)
 8001df8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f967 	bl	80010d0 <HW_TS_Stop>
            if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <SVCCTL_App_Notification+0x110>)
 8001e04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d104      	bne.n	8001e16 <SVCCTL_App_Notification+0x9a>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <SVCCTL_App_Notification+0x110>)
 8001e0e:	2206      	movs	r2, #6
 8001e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001e14:	e003      	b.n	8001e1e <SVCCTL_App_Notification+0xa2>
              BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <SVCCTL_App_Notification+0x110>)
 8001e18:	2205      	movs	r2, #5
 8001e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                connection_complete_event->Connection_Handle;
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001e24:	b29a      	uxth	r2, r3
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle =
 8001e26:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <SVCCTL_App_Notification+0x110>)
 8001e28:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <SVCCTL_App_Notification+0x114>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <SVCCTL_App_Notification+0x110>)
 8001e32:	8ada      	ldrh	r2, [r3, #22]
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <SVCCTL_App_Notification+0x114>)
 8001e36:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8001e38:	4815      	ldr	r0, [pc, #84]	; (8001e90 <SVCCTL_App_Notification+0x114>)
 8001e3a:	f000 fa97 	bl	800236c <P2PS_APP_Notification>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 8001e3e:	e000      	b.n	8001e42 <SVCCTL_App_Notification+0xc6>
          break;
 8001e40:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8001e42:	e01e      	b.n	8001e82 <SVCCTL_App_Notification+0x106>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	3302      	adds	r3, #2
 8001e48:	61bb      	str	r3, [r7, #24]
      switch (blue_evt->ecode)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	f240 4207 	movw	r2, #1031	; 0x407
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d010      	beq.n	8001e7a <SVCCTL_App_Notification+0xfe>
 8001e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e5c:	d00f      	beq.n	8001e7e <SVCCTL_App_Notification+0x102>
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d000      	beq.n	8001e64 <SVCCTL_App_Notification+0xe8>
      break; /* EVT_VENDOR */
 8001e62:	e00d      	b.n	8001e80 <SVCCTL_App_Notification+0x104>
          BSP_LED_On(LED_GREEN);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f000 fddb 	bl	8002a20 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <SVCCTL_App_Notification+0x110>)
 8001e6c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001e70:	210a      	movs	r1, #10
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f9b6 	bl	80011e4 <HW_TS_Start>
          break; /* RADIO_ACTIVITY_EVENT */  
 8001e78:	e002      	b.n	8001e80 <SVCCTL_App_Notification+0x104>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8001e7a:	bf00      	nop
 8001e7c:	e000      	b.n	8001e80 <SVCCTL_App_Notification+0x104>
          break;
 8001e7e:	bf00      	nop
      break; /* EVT_VENDOR */
 8001e80:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200000d0 	.word	0x200000d0
 8001e90:	2000030c 	.word	0x2000030c

08001e94 <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;

}

void APP_BLE_Key_Button1_Action(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8001e98:	f000 faa4 	bl	80023e4 <P2PS_APP_SW1_Button_Action>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <Ble_Tl_Init+0x20>)
 8001ea8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <Ble_Tl_Init+0x24>)
 8001eac:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001eae:	463b      	mov	r3, r7
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <Ble_Tl_Init+0x28>)
 8001eb4:	f006 f928 	bl	8008108 <hci_init>

  return;
 8001eb8:	bf00      	nop
}
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20030028 	.word	0x20030028
 8001ec4:	0800228b 	.word	0x0800228b
 8001ec8:	08002253 	.word	0x08002253

08001ecc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8001ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ece:	b08f      	sub	sp, #60	; 0x3c
 8001ed0:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8001ed6:	f006 f83d 	bl	8007f54 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8001eda:	f000 f929 	bl	8002130 <BleGetBdAddress>
 8001ede:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	2106      	movs	r1, #6
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f005 ff2b 	bl	8007d40 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);
 
  
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	795a      	ldrb	r2, [r3, #5]
 8001eee:	4b52      	ldr	r3, [pc, #328]	; (8002038 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8001ef0:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	791a      	ldrb	r2, [r3, #4]
 8001ef6:	4b50      	ldr	r3, [pc, #320]	; (8002038 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8001ef8:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	78da      	ldrb	r2, [r3, #3]
 8001efe:	4b4e      	ldr	r3, [pc, #312]	; (8002038 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8001f00:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	789a      	ldrb	r2, [r3, #2]
 8001f06:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8001f08:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	785a      	ldrb	r2, [r3, #1]
 8001f0e:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8001f10:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	4b48      	ldr	r3, [pc, #288]	; (8002038 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8001f18:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8001f1a:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8001f1e:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001f20:	f7ff fe9c 	bl	8001c5c <LL_FLASH_GetUDN>
 8001f24:	4603      	mov	r3, r0
 8001f26:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2106      	movs	r1, #6
 8001f2e:	202e      	movs	r0, #46	; 0x2e
 8001f30:	f005 ff06 	bl	8007d40 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8001f34:	4a41      	ldr	r2, [pc, #260]	; (800203c <Ble_Hci_Gap_Gatt_Init+0x170>)
 8001f36:	2110      	movs	r1, #16
 8001f38:	2018      	movs	r0, #24
 8001f3a:	f005 ff01 	bl	8007d40 <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001f3e:	4a40      	ldr	r2, [pc, #256]	; (8002040 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8001f40:	2110      	movs	r1, #16
 8001f42:	2008      	movs	r0, #8
 8001f44:	f005 fefc 	bl	8007d40 <aci_hal_write_config_data>
  
  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8001f48:	2118      	movs	r1, #24
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f005 ff61 	bl	8007e12 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8001f50:	f005 fcb1 	bl	80078b6 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8001f58:	7efb      	ldrb	r3, [r7, #27]
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8001f60:	7efb      	ldrb	r3, [r7, #27]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d01e      	beq.n	8001fa4 <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "STM32WB";
 8001f66:	4b37      	ldr	r3, [pc, #220]	; (8002044 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8001f68:	617b      	str	r3, [r7, #20]

    aci_gap_init(role, 0,
 8001f6a:	f107 0212 	add.w	r2, r7, #18
 8001f6e:	7ef8      	ldrb	r0, [r7, #27]
 8001f70:	f107 030e 	add.w	r3, r7, #14
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	2207      	movs	r2, #7
 8001f80:	2100      	movs	r1, #0
 8001f82:	f005 fb8d 	bl	80076a0 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8001f86:	8a7c      	ldrh	r4, [r7, #18]
 8001f88:	8a3d      	ldrh	r5, [r7, #16]
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f7fe f8f6 	bl	800017c <strlen>
 8001f90:	4603      	mov	r3, r0
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f005 fe47 	bl	8007c32 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8001fa4:	8a78      	ldrh	r0, [r7, #18]
 8001fa6:	89f9      	ldrh	r1, [r7, #14]
 8001fa8:	463b      	mov	r3, r7
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2302      	movs	r3, #2
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f005 fe3f 	bl	8007c32 <aci_gatt_update_char_value>
  }

/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f005 ffef 	bl	8007f9c <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001fc4:	4b20      	ldr	r3, [pc, #128]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 fa77 	bl	80074bc <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8001fd4:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8001fdc:	2210      	movs	r2, #16
 8001fde:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8001fe8:	4a18      	ldr	r2, [pc, #96]	; (800204c <Ble_Hci_Gap_Gatt_Init+0x180>)
 8001fea:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8001ff4:	789d      	ldrb	r5, [r3, #2]
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8001ff8:	785e      	ldrb	r6, [r3, #1]
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8001ffc:	791b      	ldrb	r3, [r3, #4]
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002000:	7952      	ldrb	r2, [r2, #5]
 8002002:	4911      	ldr	r1, [pc, #68]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002004:	78c9      	ldrb	r1, [r1, #3]
 8002006:	4810      	ldr	r0, [pc, #64]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002008:	6880      	ldr	r0, [r0, #8]
 800200a:	2400      	movs	r4, #0
 800200c:	9404      	str	r4, [sp, #16]
 800200e:	9003      	str	r0, [sp, #12]
 8002010:	9102      	str	r1, [sp, #8]
 8002012:	9201      	str	r2, [sp, #4]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2300      	movs	r3, #0
 8002018:	2200      	movs	r2, #0
 800201a:	4631      	mov	r1, r6
 800201c:	4628      	mov	r0, r5
 800201e:	f005 fa97 	bl	8007550 <aci_gap_set_authentication_requirement>
  );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002024:	789b      	ldrb	r3, [r3, #2]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 800202a:	f005 fc20 	bl	800786e <aci_gap_configure_whitelist>
   }

}
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	; 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002036:	bf00      	nop
 8002038:	20000004 	.word	0x20000004
 800203c:	08009644 	.word	0x08009644
 8002040:	08009654 	.word	0x08009654
 8002044:	0800950c 	.word	0x0800950c
 8002048:	200000d0 	.word	0x200000d0
 800204c:	0001b207 	.word	0x0001b207

08002050 <Adv_Request>:



static void Adv_Request( APP_BLE_ConnStatus_t New_Status )
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	; 0x30
 8002054:	af08      	add	r7, sp, #32
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800205a:	2342      	movs	r3, #66	; 0x42
 800205c:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;
 
  if (New_Status == APP_BLE_FAST_ADV)
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d106      	bne.n	8002072 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <Adv_Request+0xc4>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800206a:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <Adv_Request+0xc8>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	81bb      	strh	r3, [r7, #12]
 8002070:	e005      	b.n	800207e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8002072:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002076:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8002078:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800207c:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800207e:	4b27      	ldr	r3, [pc, #156]	; (800211c <Adv_Request+0xcc>)
 8002080:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff f823 	bl	80010d0 <HW_TS_Stop>

     APP_DBG_MSG("First index in %d state \n",
                BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d10d      	bne.n	80020ac <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <Adv_Request+0xcc>)
 8002092:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002096:	2b01      	cmp	r3, #1
 8002098:	d004      	beq.n	80020a4 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <Adv_Request+0xcc>)
 800209c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d103      	bne.n	80020ac <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 80020a4:	f005 f908 	bl	80072b8 <aci_gap_set_non_discoverable>
 80020a8:	4603      	mov	r3, r0
 80020aa:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <Adv_Request+0xcc>)
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <Adv_Request+0xcc>)
 80020b6:	7e1b      	ldrb	r3, [r3, #24]
 80020b8:	89b8      	ldrh	r0, [r7, #12]
 80020ba:	89f9      	ldrh	r1, [r7, #14]
 80020bc:	2200      	movs	r2, #0
 80020be:	9206      	str	r2, [sp, #24]
 80020c0:	2200      	movs	r2, #0
 80020c2:	9205      	str	r2, [sp, #20]
 80020c4:	4a16      	ldr	r2, [pc, #88]	; (8002120 <Adv_Request+0xd0>)
 80020c6:	9204      	str	r2, [sp, #16]
 80020c8:	9303      	str	r3, [sp, #12]
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <Adv_Request+0xd4>)
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	2308      	movs	r3, #8
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	2300      	movs	r3, #0
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	4602      	mov	r2, r0
 80020da:	2000      	movs	r0, #0
 80020dc:	f005 f910 	bl	8007300 <aci_gap_set_discoverable>
 80020e0:	4603      	mov	r3, r0
 80020e2:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 80020e4:	4910      	ldr	r1, [pc, #64]	; (8002128 <Adv_Request+0xd8>)
 80020e6:	200e      	movs	r0, #14
 80020e8:	f005 fb65 	bl	80077b6 <aci_gap_update_adv_data>
 80020ec:	4603      	mov	r3, r0
 80020ee:	72fb      	strb	r3, [r7, #11]

    if (ret == BLE_STATUS_SUCCESS)
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10a      	bne.n	800210c <Adv_Request+0xbc>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <Adv_Request+0xbc>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <Adv_Request+0xcc>)
 80020fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002102:	490a      	ldr	r1, [pc, #40]	; (800212c <Adv_Request+0xdc>)
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff f86d 	bl	80011e4 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800210a:	bf00      	nop
 800210c:	bf00      	nop
  
}
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000154 	.word	0x20000154
 8002118:	20000156 	.word	0x20000156
 800211c:	200000d0 	.word	0x200000d0
 8002120:	200000e9 	.word	0x200000e9
 8002124:	08009664 	.word	0x08009664
 8002128:	20000004 	.word	0x20000004
 800212c:	0001e046 	.word	0x0001e046

08002130 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002136:	f7ff fd91 	bl	8001c5c <LL_FLASH_GetUDN>
 800213a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002142:	d023      	beq.n	800218c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002144:	f7ff fda2 	bl	8001c8c <LL_FLASH_GetSTCompanyID>
 8002148:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800214a:	f7ff fd93 	bl	8001c74 <LL_FLASH_GetDeviceID>
 800214e:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <BleGetBdAddress+0x80>)
 8002156:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <BleGetBdAddress+0x80>)
 8002160:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <BleGetBdAddress+0x80>)
 800216a:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <BleGetBdAddress+0x80>)
 8002172:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <BleGetBdAddress+0x80>)
 800217a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <BleGetBdAddress+0x80>)
 8002184:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <BleGetBdAddress+0x80>)
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e00b      	b.n	80021a4 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800218c:	2000      	movs	r0, #0
 800218e:	f006 fdf5 	bl	8008d7c <OTP_Read>
 8002192:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e001      	b.n	80021a4 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <BleGetBdAddress+0x84>)
 80021a2:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 80021a4:	697b      	ldr	r3, [r7, #20]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200001e8 	.word	0x200001e8
 80021b4:	0800963c 	.word	0x0800963c

080021b8 <Adv_Cancel>:
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/

static void Adv_Cancel( void )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  BSP_LED_Off(LED_GREEN);
 80021be:	2001      	movs	r0, #1
 80021c0:	f000 fc48 	bl	8002a54 <BSP_LED_Off>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <Adv_Cancel+0x34>)
 80021c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d00a      	beq.n	80021e4 <Adv_Cancel+0x2c>

  {

    tBleStatus result = 0x00;
 80021ce:	2300      	movs	r3, #0
 80021d0:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 80021d2:	f005 f871 	bl	80072b8 <aci_gap_set_non_discoverable>
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <Adv_Cancel+0x34>)
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
    }

  }

  return;
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
}
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200000d0 	.word	0x200000d0

080021f0 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80021f4:	2100      	movs	r1, #0
 80021f6:	2001      	movs	r0, #1
 80021f8:	f007 f810 	bl	800921c <UTIL_SEQ_SetTask>
  return;
 80021fc:	bf00      	nop
}
 80021fe:	bd80      	pop	{r7, pc}

08002200 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  BSP_LED_Off(LED_GREEN);
 8002204:	2001      	movs	r0, #1
 8002206:	f000 fc25 	bl	8002a54 <BSP_LED_Off>
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}

0800220e <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002216:	2100      	movs	r1, #0
 8002218:	2004      	movs	r0, #4
 800221a:	f006 ffff 	bl	800921c <UTIL_SEQ_SetTask>
  return;
 800221e:	bf00      	nop
}
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800222e:	2001      	movs	r0, #1
 8002230:	f007 f85a 	bl	80092e8 <UTIL_SEQ_SetEvt>
  return;
 8002234:	bf00      	nop
}
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002244:	2001      	movs	r0, #1
 8002246:	f007 f86d 	bl	8009324 <UTIL_SEQ_WaitEvt>
  return;
 800224a:	bf00      	nop
}
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	3308      	adds	r3, #8
 8002264:	4618      	mov	r0, r3
 8002266:	f004 ffd5 	bl	8007214 <SVCCTL_UserEvtRx>
 800226a:	4603      	mov	r3, r0
 800226c:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800226e:	7afb      	ldrb	r3, [r7, #11]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800227a:	e002      	b.n	8002282 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <BLE_StatusNot+0x16>
 800229a:	2b01      	cmp	r3, #1
 800229c:	d006      	beq.n	80022ac <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800229e:	e00b      	b.n	80022b8 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80022a0:	2307      	movs	r3, #7
 80022a2:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f006 ffe3 	bl	8009270 <UTIL_SEQ_PauseTask>
      break;
 80022aa:	e005      	b.n	80022b8 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80022ac:	2307      	movs	r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f006 fffb 	bl	80092ac <UTIL_SEQ_ResumeTask>
      break;
 80022b6:	bf00      	nop
  }
  return;
 80022b8:	bf00      	nop
}
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <P2PS_STM_App_Notification>:
static void P2PS_Send_Notification(void);
static void P2PS_APP_LED_BUTTON_context_Init(void);

/* Public functions ----------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d008      	beq.n	80022e2 <P2PS_STM_App_Notification+0x22>
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d00a      	beq.n	80022ea <P2PS_STM_App_Notification+0x2a>
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d000      	beq.n	80022da <P2PS_STM_App_Notification+0x1a>
      NVIC_SystemReset();
      break;
#endif
      
    default:
      break;
 80022d8:	e042      	b.n	8002360 <P2PS_STM_App_Notification+0xa0>
      P2P_Server_App_Context.Notification_Status = 1;
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <P2PS_STM_App_Notification+0xa8>)
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
    break;
 80022e0:	e03e      	b.n	8002360 <P2PS_STM_App_Notification+0xa0>
      P2P_Server_App_Context.Notification_Status = 0;
 80022e2:	4b21      	ldr	r3, [pc, #132]	; (8002368 <P2PS_STM_App_Notification+0xa8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
      break;
 80022e8:	e03a      	b.n	8002360 <P2PS_STM_App_Notification+0xa0>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d117      	bne.n	8002324 <P2PS_STM_App_Notification+0x64>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	3301      	adds	r3, #1
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <P2PS_STM_App_Notification+0x4c>
          BSP_LED_On(LED_BLUE);
 8002300:	2000      	movs	r0, #0
 8002302:	f000 fb8d 	bl	8002a20 <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <P2PS_STM_App_Notification+0xa8>)
 8002308:	2201      	movs	r2, #1
 800230a:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	3301      	adds	r3, #1
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <P2PS_STM_App_Notification+0x64>
          BSP_LED_Off(LED_BLUE);
 8002318:	2000      	movs	r0, #0
 800231a:	f000 fb9b 	bl	8002a54 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <P2PS_STM_App_Notification+0xa8>)
 8002320:	2200      	movs	r2, #0
 8002322:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d117      	bne.n	800235e <P2PS_STM_App_Notification+0x9e>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	3301      	adds	r3, #1
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d105      	bne.n	8002346 <P2PS_STM_App_Notification+0x86>
          BSP_LED_On(LED_BLUE);
 800233a:	2000      	movs	r0, #0
 800233c:	f000 fb70 	bl	8002a20 <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <P2PS_STM_App_Notification+0xa8>)
 8002342:	2201      	movs	r2, #1
 8002344:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	3301      	adds	r3, #1
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <P2PS_STM_App_Notification+0x9e>
          BSP_LED_Off(LED_BLUE);
 8002352:	2000      	movs	r0, #0
 8002354:	f000 fb7e 	bl	8002a54 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <P2PS_STM_App_Notification+0xa8>)
 800235a:	2200      	movs	r2, #0
 800235c:	709a      	strb	r2, [r3, #2]
    break;
 800235e:	bf00      	nop
  }

  return;
 8002360:	bf00      	nop
}
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000158 	.word	0x20000158

0800236c <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <P2PS_APP_Notification+0x1c>
 800237c:	2b01      	cmp	r3, #1
 800237e:	d000      	beq.n	8002382 <P2PS_APP_Notification+0x16>
    case PEER_DISCON_HANDLE_EVT :
       P2PS_APP_LED_BUTTON_context_Init();       
    break;
    
    default:
      break;
 8002380:	e003      	b.n	800238a <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 8002382:	f000 f819 	bl	80023b8 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8002386:	e000      	b.n	800238a <P2PS_APP_Notification+0x1e>
    break;
 8002388:	bf00      	nop
  }

  return;
 800238a:	bf00      	nop
}
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8002398:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <P2PS_APP_Init+0x1c>)
 800239a:	2100      	movs	r1, #0
 800239c:	2002      	movs	r0, #2
 800239e:	f006 ff1d 	bl	80091dc <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <P2PS_APP_Init+0x20>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 80023a8:	f000 f806 	bl	80023b8 <P2PS_APP_LED_BUTTON_context_Init>
  return;
 80023ac:	bf00      	nop
}
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	080023f5 	.word	0x080023f5
 80023b4:	20000158 	.word	0x20000158

080023b8 <P2PS_APP_LED_BUTTON_context_Init>:

void P2PS_APP_LED_BUTTON_context_Init(void){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 80023bc:	2000      	movs	r0, #0
 80023be:	f000 fb49 	bl	8002a54 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000158 	.word	0x20000158

080023e4 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80023e8:	2100      	movs	r1, #0
 80023ea:	2002      	movs	r0, #2
 80023ec:	f006 ff16 	bl	800921c <UTIL_SEQ_SetTask>

  return;
 80023f0:	bf00      	nop
}
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <P2PS_Send_Notification>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
void P2PS_Send_Notification(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <P2PS_Send_Notification+0x34>)
 80023fa:	791b      	ldrb	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <P2PS_Send_Notification+0x34>)
 8002402:	2201      	movs	r2, #1
 8002404:	711a      	strb	r2, [r3, #4]
 8002406:	e002      	b.n	800240e <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <P2PS_Send_Notification+0x34>)
 800240a:	2200      	movs	r2, #0
 800240c:	711a      	strb	r2, [r3, #4]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <P2PS_Send_Notification+0x34>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <P2PS_Send_Notification+0x2e>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
    APP_DBG_MSG(" \n\r");
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8002416:	4905      	ldr	r1, [pc, #20]	; (800242c <P2PS_Send_Notification+0x38>)
 8002418:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800241c:	f004 fe20 	bl	8007060 <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 8002420:	bf00      	nop
 8002422:	bf00      	nop
}
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000158 	.word	0x20000158
 800242c:	2000015b 	.word	0x2000015b

08002430 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800243a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800243e:	4905      	ldr	r1, [pc, #20]	; (8002454 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	58000800 	.word	0x58000800

08002458 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	4904      	ldr	r1, [pc, #16]	; (8002478 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4313      	orrs	r3, r2
 800246a:	620b      	str	r3, [r1, #32]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	58000800 	.word	0x58000800

0800247c <LL_PWR_EnableBootC2>:
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <LL_PWR_EnableBootC2+0x1c>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <LL_PWR_EnableBootC2+0x1c>)
 8002486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248a:	60d3      	str	r3, [r2, #12]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	58000400 	.word	0x58000400

0800249c <LL_AHB3_GRP1_EnableClock>:
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80024b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4013      	ands	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024c0:	68fb      	ldr	r3, [r7, #12]
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80024de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ee:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4013      	ands	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024f8:	68fb      	ldr	r3, [r7, #12]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_C1_IPCC_EnableIT_TXF>:
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	601a      	str	r2, [r3, #0]
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_C1_IPCC_EnableIT_RXO>:
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	43db      	mvns	r3, r3
 800255a:	401a      	ands	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	605a      	str	r2, [r3, #4]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	605a      	str	r2, [r3, #4]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	401a      	ands	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	605a      	str	r2, [r3, #4]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_C1_IPCC_SetFlag_CHx>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	609a      	str	r2, [r3, #8]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4013      	ands	r3, r2
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d101      	bne.n	800260a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	4013      	ands	r3, r2
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d101      	bne.n	8002634 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8002648:	2102      	movs	r1, #2
 800264a:	4819      	ldr	r0, [pc, #100]	; (80026b0 <HW_IPCC_Rx_Handler+0x6c>)
 800264c:	f7ff ffe4 	bl	8002618 <LL_C2_IPCC_IsActiveFlag_CHx>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HW_IPCC_Rx_Handler+0x26>
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HW_IPCC_Rx_Handler+0x6c>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	43db      	mvns	r3, r3
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8002664:	f000 f8ea 	bl	800283c <HW_IPCC_SYS_EvtHandler>
 8002668:	e01f      	b.n	80026aa <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800266a:	2101      	movs	r1, #1
 800266c:	4810      	ldr	r0, [pc, #64]	; (80026b0 <HW_IPCC_Rx_Handler+0x6c>)
 800266e:	f7ff ffd3 	bl	8002618 <LL_C2_IPCC_IsActiveFlag_CHx>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HW_IPCC_Rx_Handler+0x46>
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <HW_IPCC_Rx_Handler+0x6c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8002684:	f000 f89e 	bl	80027c4 <HW_IPCC_BLE_EvtHandler>
 8002688:	e00f      	b.n	80026aa <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800268a:	2108      	movs	r1, #8
 800268c:	4808      	ldr	r0, [pc, #32]	; (80026b0 <HW_IPCC_Rx_Handler+0x6c>)
 800268e:	f7ff ffc3 	bl	8002618 <LL_C2_IPCC_IsActiveFlag_CHx>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <HW_IPCC_Rx_Handler+0x68>
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HW_IPCC_Rx_Handler+0x6c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	43db      	mvns	r3, r3
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80026a6:	f000 f915 	bl	80028d4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
}
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	58000c00 	.word	0x58000c00

080026b4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80026b8:	2102      	movs	r1, #2
 80026ba:	4822      	ldr	r0, [pc, #136]	; (8002744 <HW_IPCC_Tx_Handler+0x90>)
 80026bc:	f7ff ff97 	bl	80025ee <LL_C1_IPCC_IsActiveFlag_CHx>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <HW_IPCC_Tx_Handler+0x26>
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <HW_IPCC_Tx_Handler+0x90>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80026d4:	f000 f8a6 	bl	8002824 <HW_IPCC_SYS_CmdEvtHandler>
 80026d8:	e031      	b.n	800273e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80026da:	2102      	movs	r1, #2
 80026dc:	4819      	ldr	r0, [pc, #100]	; (8002744 <HW_IPCC_Tx_Handler+0x90>)
 80026de:	f7ff ff86 	bl	80025ee <LL_C1_IPCC_IsActiveFlag_CHx>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d109      	bne.n	80026fc <HW_IPCC_Tx_Handler+0x48>
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HW_IPCC_Tx_Handler+0x90>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80026f6:	f000 f895 	bl	8002824 <HW_IPCC_SYS_CmdEvtHandler>
 80026fa:	e020      	b.n	800273e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80026fc:	2108      	movs	r1, #8
 80026fe:	4811      	ldr	r0, [pc, #68]	; (8002744 <HW_IPCC_Tx_Handler+0x90>)
 8002700:	f7ff ff75 	bl	80025ee <LL_C1_IPCC_IsActiveFlag_CHx>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HW_IPCC_Tx_Handler+0x6a>
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <HW_IPCC_Tx_Handler+0x90>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	43db      	mvns	r3, r3
 8002710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8002718:	f000 f8be 	bl	8002898 <HW_IPCC_MM_FreeBufHandler>
 800271c:	e00f      	b.n	800273e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800271e:	2120      	movs	r1, #32
 8002720:	4808      	ldr	r0, [pc, #32]	; (8002744 <HW_IPCC_Tx_Handler+0x90>)
 8002722:	f7ff ff64 	bl	80025ee <LL_C1_IPCC_IsActiveFlag_CHx>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HW_IPCC_Tx_Handler+0x8c>
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HW_IPCC_Tx_Handler+0x90>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	43db      	mvns	r3, r3
 8002732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800273a:	f000 f84f 	bl	80027dc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800273e:	bf00      	nop
 8002740:	bf00      	nop
}
 8002742:	bd80      	pop	{r7, pc}
 8002744:	58000c00 	.word	0x58000c00

08002748 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800274c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002750:	f7ff febd 	bl	80024ce <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8002754:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002758:	f7ff fe6a 	bl	8002430 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800275c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002760:	f7ff fe7a 	bl	8002458 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8002764:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8002766:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8002768:	f7ff fe88 	bl	800247c <LL_PWR_EnableBootC2>

  return;
 800276c:	bf00      	nop
}
 800276e:	bd80      	pop	{r7, pc}

08002770 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8002774:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002778:	f7ff fe90 	bl	800249c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800277c:	4806      	ldr	r0, [pc, #24]	; (8002798 <HW_IPCC_Init+0x28>)
 800277e:	f7ff fed2 	bl	8002526 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <HW_IPCC_Init+0x28>)
 8002784:	f7ff febf 	bl	8002506 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002788:	202c      	movs	r0, #44	; 0x2c
 800278a:	f000 fcb4 	bl	80030f6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800278e:	202d      	movs	r0, #45	; 0x2d
 8002790:	f000 fcb1 	bl	80030f6 <HAL_NVIC_EnableIRQ>

  return;
 8002794:	bf00      	nop
}
 8002796:	bd80      	pop	{r7, pc}
 8002798:	58000c00 	.word	0x58000c00

0800279c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80027a0:	2101      	movs	r1, #1
 80027a2:	4802      	ldr	r0, [pc, #8]	; (80027ac <HW_IPCC_BLE_Init+0x10>)
 80027a4:	f7ff fef4 	bl	8002590 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80027a8:	bf00      	nop
}
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	58000c00 	.word	0x58000c00

080027b0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80027b4:	2101      	movs	r1, #1
 80027b6:	4802      	ldr	r0, [pc, #8]	; (80027c0 <HW_IPCC_BLE_SendCmd+0x10>)
 80027b8:	f7ff ff0a 	bl	80025d0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80027bc:	bf00      	nop
}
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	58000c00 	.word	0x58000c00

080027c4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80027c8:	f005 fff8 	bl	80087bc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80027cc:	2101      	movs	r1, #1
 80027ce:	4802      	ldr	r0, [pc, #8]	; (80027d8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80027d0:	f7ff fef0 	bl	80025b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80027d4:	bf00      	nop
}
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	58000c00 	.word	0x58000c00

080027dc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80027e0:	2120      	movs	r1, #32
 80027e2:	4803      	ldr	r0, [pc, #12]	; (80027f0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80027e4:	f7ff fec2 	bl	800256c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80027e8:	f006 f818 	bl	800881c <HW_IPCC_BLE_AclDataAckNot>

  return;
 80027ec:	bf00      	nop
}
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	58000c00 	.word	0x58000c00

080027f4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80027f8:	2102      	movs	r1, #2
 80027fa:	4802      	ldr	r0, [pc, #8]	; (8002804 <HW_IPCC_SYS_Init+0x10>)
 80027fc:	f7ff fec8 	bl	8002590 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8002800:	bf00      	nop
}
 8002802:	bd80      	pop	{r7, pc}
 8002804:	58000c00 	.word	0x58000c00

08002808 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800280c:	2102      	movs	r1, #2
 800280e:	4804      	ldr	r0, [pc, #16]	; (8002820 <HW_IPCC_SYS_SendCmd+0x18>)
 8002810:	f7ff fede 	bl	80025d0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002814:	2102      	movs	r1, #2
 8002816:	4802      	ldr	r0, [pc, #8]	; (8002820 <HW_IPCC_SYS_SendCmd+0x18>)
 8002818:	f7ff fe95 	bl	8002546 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800281c:	bf00      	nop
}
 800281e:	bd80      	pop	{r7, pc}
 8002820:	58000c00 	.word	0x58000c00

08002824 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8002828:	2102      	movs	r1, #2
 800282a:	4803      	ldr	r0, [pc, #12]	; (8002838 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800282c:	f7ff fe9e 	bl	800256c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8002830:	f006 f844 	bl	80088bc <HW_IPCC_SYS_CmdEvtNot>

  return;
 8002834:	bf00      	nop
}
 8002836:	bd80      	pop	{r7, pc}
 8002838:	58000c00 	.word	0x58000c00

0800283c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8002840:	f006 f852 	bl	80088e8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8002844:	2102      	movs	r1, #2
 8002846:	4802      	ldr	r0, [pc, #8]	; (8002850 <HW_IPCC_SYS_EvtHandler+0x14>)
 8002848:	f7ff feb4 	bl	80025b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800284c:	bf00      	nop
}
 800284e:	bd80      	pop	{r7, pc}
 8002850:	58000c00 	.word	0x58000c00

08002854 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800285c:	2108      	movs	r1, #8
 800285e:	480c      	ldr	r0, [pc, #48]	; (8002890 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002860:	f7ff fec5 	bl	80025ee <LL_C1_IPCC_IsActiveFlag_CHx>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8002870:	2108      	movs	r1, #8
 8002872:	4807      	ldr	r0, [pc, #28]	; (8002890 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002874:	f7ff fe67 	bl	8002546 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8002878:	e006      	b.n	8002888 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800287e:	2108      	movs	r1, #8
 8002880:	4803      	ldr	r0, [pc, #12]	; (8002890 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8002882:	f7ff fea5 	bl	80025d0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8002886:	bf00      	nop
}
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	58000c00 	.word	0x58000c00
 8002894:	200001f0 	.word	0x200001f0

08002898 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800289c:	2108      	movs	r1, #8
 800289e:	4806      	ldr	r0, [pc, #24]	; (80028b8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80028a0:	f7ff fe64 	bl	800256c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HW_IPCC_MM_FreeBufHandler+0x24>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80028aa:	2108      	movs	r1, #8
 80028ac:	4802      	ldr	r0, [pc, #8]	; (80028b8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80028ae:	f7ff fe8f 	bl	80025d0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80028b2:	bf00      	nop
}
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	58000c00 	.word	0x58000c00
 80028bc:	200001f0 	.word	0x200001f0

080028c0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80028c4:	2108      	movs	r1, #8
 80028c6:	4802      	ldr	r0, [pc, #8]	; (80028d0 <HW_IPCC_TRACES_Init+0x10>)
 80028c8:	f7ff fe62 	bl	8002590 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80028cc:	bf00      	nop
}
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	58000c00 	.word	0x58000c00

080028d4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80028d8:	f006 f8ae 	bl	8008a38 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80028dc:	2108      	movs	r1, #8
 80028de:	4802      	ldr	r0, [pc, #8]	; (80028e8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80028e0:	f7ff fe68 	bl	80025b4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80028e4:	bf00      	nop
}
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	58000c00 	.word	0x58000c00

080028ec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80028ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f0:	3304      	adds	r3, #4

080028f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80028f6:	d3f9      	bcc.n	80028ec <CopyDataInit>
  bx lr
 80028f8:	4770      	bx	lr

080028fa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80028fa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80028fc:	3004      	adds	r0, #4

080028fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80028fe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002900:	d3fb      	bcc.n	80028fa <FillZerobss>
  bx lr
 8002902:	4770      	bx	lr

08002904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002904:	480c      	ldr	r0, [pc, #48]	; (8002938 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002906:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002908:	480c      	ldr	r0, [pc, #48]	; (800293c <LoopForever+0x8>)
 800290a:	490d      	ldr	r1, [pc, #52]	; (8002940 <LoopForever+0xc>)
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <LoopForever+0x10>)
 800290e:	2300      	movs	r3, #0
 8002910:	f7ff ffef 	bl	80028f2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002914:	480c      	ldr	r0, [pc, #48]	; (8002948 <LoopForever+0x14>)
 8002916:	490d      	ldr	r1, [pc, #52]	; (800294c <LoopForever+0x18>)
 8002918:	2300      	movs	r3, #0
 800291a:	f7ff fff0 	bl	80028fe <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800291e:	480c      	ldr	r0, [pc, #48]	; (8002950 <LoopForever+0x1c>)
 8002920:	490c      	ldr	r1, [pc, #48]	; (8002954 <LoopForever+0x20>)
 8002922:	2300      	movs	r3, #0
 8002924:	f7ff ffeb 	bl	80028fe <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002928:	f000 f992 	bl	8002c50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800292c:	f006 fd84 	bl	8009438 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002930:	f7fe fec0 	bl	80016b4 <main>

08002934 <LoopForever>:

LoopForever:
  b LoopForever
 8002934:	e7fe      	b.n	8002934 <LoopForever>
 8002936:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002938:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800293c:	20000004 	.word	0x20000004
 8002940:	20000034 	.word	0x20000034
 8002944:	0800970c 	.word	0x0800970c
  INIT_BSS _sbss, _ebss
 8002948:	2000019c 	.word	0x2000019c
 800294c:	20000588 	.word	0x20000588
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002950:	200301e0 	.word	0x200301e0
 8002954:	20030a57 	.word	0x20030a57

08002958 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002958:	e7fe      	b.n	8002958 <ADC1_IRQHandler>

0800295a <LL_AHB2_GRP1_EnableClock>:
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4313      	orrs	r3, r2
 8002970:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002976:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4013      	ands	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <BSP_LED_Init+0x28>
 80029ac:	2001      	movs	r0, #1
 80029ae:	f7ff ffd4 	bl	800295a <LL_AHB2_GRP1_EnableClock>
 80029b2:	e00c      	b.n	80029ce <BSP_LED_Init+0x42>
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d103      	bne.n	80029c2 <BSP_LED_Init+0x36>
 80029ba:	2002      	movs	r0, #2
 80029bc:	f7ff ffcd 	bl	800295a <LL_AHB2_GRP1_EnableClock>
 80029c0:	e005      	b.n	80029ce <BSP_LED_Init+0x42>
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d102      	bne.n	80029ce <BSP_LED_Init+0x42>
 80029c8:	2002      	movs	r0, #2
 80029ca:	f7ff ffc6 	bl	800295a <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	4a11      	ldr	r2, [pc, #68]	; (8002a18 <BSP_LED_Init+0x8c>)
 80029d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029d6:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d8:	2301      	movs	r3, #1
 80029da:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e0:	2302      	movs	r3, #2
 80029e2:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <BSP_LED_Init+0x90>)
 80029e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ec:	f107 020c 	add.w	r2, r7, #12
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fbc4 	bl	8003180 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	4a08      	ldr	r2, [pc, #32]	; (8002a1c <BSP_LED_Init+0x90>)
 80029fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <BSP_LED_Init+0x8c>)
 8002a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f000 fd28 	bl	8003460 <HAL_GPIO_WritePin>
}
 8002a10:	bf00      	nop
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	0800966c 	.word	0x0800966c
 8002a1c:	20000014 	.word	0x20000014

08002a20 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <BSP_LED_On+0x2c>)
 8002a2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <BSP_LED_On+0x30>)
 8002a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f000 fd0f 	bl	8003460 <HAL_GPIO_WritePin>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000014 	.word	0x20000014
 8002a50:	0800966c 	.word	0x0800966c

08002a54 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <BSP_LED_Off+0x2c>)
 8002a62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <BSP_LED_Off+0x30>)
 8002a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4619      	mov	r1, r3
 8002a72:	f000 fcf5 	bl	8003460 <HAL_GPIO_WritePin>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000014 	.word	0x20000014
 8002a84:	0800966c 	.word	0x0800966c

08002a88 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	460a      	mov	r2, r1
 8002a92:	71fb      	strb	r3, [r7, #7]
 8002a94:	4613      	mov	r3, r2
 8002a96:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002a98:	f107 030c 	add.w	r3, r7, #12
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f7ff ff56 	bl	800295a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002aae:	79bb      	ldrb	r3, [r7, #6]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d112      	bne.n	8002ada <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab8:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <BSP_PB_Init+0x9c>)
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	f107 020c 	add.w	r2, r7, #12
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fb53 	bl	8003180 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002ada:	79bb      	ldrb	r3, [r7, #6]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d11c      	bne.n	8002b1a <BSP_PB_Init+0x92>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae4:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8002aea:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <BSP_PB_Init+0xa0>)
 8002aec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <BSP_PB_Init+0x9c>)
 8002af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af6:	f107 020c 	add.w	r2, r7, #12
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fb3f 	bl	8003180 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002b02:	2328      	movs	r3, #40	; 0x28
 8002b04:	b25b      	sxtb	r3, r3
 8002b06:	2200      	movs	r2, #0
 8002b08:	210f      	movs	r1, #15
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fad9 	bl	80030c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002b10:	2328      	movs	r3, #40	; 0x28
 8002b12:	b25b      	sxtb	r3, r3
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 faee 	bl	80030f6 <HAL_NVIC_EnableIRQ>
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000020 	.word	0x20000020
 8002b28:	10210000 	.word	0x10210000

08002b2c <LL_RCC_HSE_Enable>:
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_RCC_HSE_IsReady>:
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b5c:	d101      	bne.n	8002b62 <LL_RCC_HSE_IsReady+0x18>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <LL_RCC_HSE_IsReady+0x1a>
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002b7e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b8a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	cafecafe 	.word	0xcafecafe

08002bac <LL_RCC_MSI_Disable>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_SetSysClkSource>:
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 0203 	bic.w	r2, r3, #3
 8002bdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_GetSysClkSource>:
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <LL_FLASH_SetLatency>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <LL_FLASH_SetLatency+0x24>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 0207 	bic.w	r2, r3, #7
 8002c1c:	4904      	ldr	r1, [pc, #16]	; (8002c30 <LL_FLASH_SetLatency+0x24>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	58004000 	.word	0x58004000

08002c34 <LL_FLASH_GetLatency>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <LL_FLASH_GetLatency+0x18>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	58004000 	.word	0x58004000

08002c50 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
	OTP_ID0_t * p_otp;

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <SystemInit+0x70>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <SystemInit+0x70>)
 8002c5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

	/**
	 * Read HSE_Tuning from OTP
	 */
	p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f006 f888 	bl	8008d7c <OTP_Read>
 8002c6c:	6078      	str	r0, [r7, #4]
	if (p_otp)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <SystemInit+0x2e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	799b      	ldrb	r3, [r3, #6]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff79 	bl	8002b70 <LL_RCC_HSE_SetCapacitorTuning>
	}

	LL_RCC_HSE_Enable();
 8002c7e:	f7ff ff55 	bl	8002b2c <LL_RCC_HSE_Enable>

	/**
	 * Set FLASH latency to 1WS
	 */
	LL_FLASH_SetLatency( LL_FLASH_LATENCY_1 );
 8002c82:	2001      	movs	r0, #1
 8002c84:	f7ff ffc2 	bl	8002c0c <LL_FLASH_SetLatency>
	while( LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1 );
 8002c88:	bf00      	nop
 8002c8a:	f7ff ffd3 	bl	8002c34 <LL_FLASH_GetLatency>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d1fa      	bne.n	8002c8a <SystemInit+0x3a>

	/**
	 * Switch to HSE
	 *
	 */
	while(!LL_RCC_HSE_IsReady());
 8002c94:	bf00      	nop
 8002c96:	f7ff ff58 	bl	8002b4a <LL_RCC_HSE_IsReady>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0fa      	beq.n	8002c96 <SystemInit+0x46>
	LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSE );
 8002ca0:	2002      	movs	r0, #2
 8002ca2:	f7ff ff92 	bl	8002bca <LL_RCC_SetSysClkSource>
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8002ca6:	bf00      	nop
 8002ca8:	f7ff ffa3 	bl	8002bf2 <LL_RCC_GetSysClkSource>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d1fa      	bne.n	8002ca8 <SystemInit+0x58>

	/**
	 * Switch OFF MSI
	 */
	LL_RCC_MSI_Disable();
 8002cb2:	f7ff ff7b 	bl	8002bac <LL_RCC_MSI_Disable>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	6053      	str	r3, [r2, #4]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e0042000 	.word	0xe0042000

08002ce4 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002cee:	f043 0302 	orr.w	r3, r3, #2
 8002cf2:	6053      	str	r3, [r2, #4]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e0042000 	.word	0xe0042000

08002d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d0e:	2003      	movs	r0, #3
 8002d10:	f000 f9cc 	bl	80030ac <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d14:	200f      	movs	r0, #15
 8002d16:	f000 f815 	bl	8002d44 <HAL_InitTick>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	71fb      	strb	r3, [r7, #7]
 8002d24:	e001      	b.n	8002d2a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d26:	f000 f805 	bl	8002d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{   
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <HAL_InitTick+0x6c>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d024      	beq.n	8002da2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d58:	f001 fa56 	bl	8004208 <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <HAL_InitTick+0x6c>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	4619      	mov	r1, r3
 8002d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d68:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f9dc 	bl	800312e <HAL_SYSTICK_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10f      	bne.n	8002d9c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	d809      	bhi.n	8002d96 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d82:	2200      	movs	r2, #0
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d8a:	f000 f99a 	bl	80030c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <HAL_InitTick+0x70>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	e007      	b.n	8002da6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	e004      	b.n	8002da6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e001      	b.n	8002da6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000028 	.word	0x20000028
 8002db4:	20000024 	.word	0x20000024

08002db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_IncTick+0x20>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_IncTick+0x24>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_IncTick+0x24>)
 8002dca:	6013      	str	r3, [r2, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000028 	.word	0x20000028
 8002ddc:	20000310 	.word	0x20000310

08002de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return uwTick;
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <HAL_GetTick+0x14>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000310 	.word	0x20000310

08002df8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_SuspendTick+0x1c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <HAL_SuspendTick+0x1c>)
 8002e02:	f023 0302 	bic.w	r3, r3, #2
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000e010 	.word	0xe000e010

08002e18 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_ResumeTick+0x1c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <HAL_ResumeTick+0x1c>)
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	6013      	str	r3, [r2, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000e010 	.word	0xe000e010

08002e38 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002e3c:	f7ff ff42 	bl	8002cc4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002e48:	f7ff ff4c 	bl	8002ce4 <LL_DBGMCU_EnableDBGStopMode>
}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 0307 	and.w	r3, r3, #7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db0b      	blt.n	8002ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <__NVIC_EnableIRQ+0x38>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db10      	blt.n	8002f24 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	4909      	ldr	r1, [pc, #36]	; (8002f30 <__NVIC_DisableIRQ+0x40>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2001      	movs	r0, #1
 8002f12:	fa00 f202 	lsl.w	r2, r0, r2
 8002f16:	3320      	adds	r3, #32
 8002f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f20:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000e100 	.word	0xe000e100

08002f34 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db0c      	blt.n	8002f60 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	4907      	ldr	r1, [pc, #28]	; (8002f6c <__NVIC_SetPendingIRQ+0x38>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2001      	movs	r0, #1
 8002f56:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5a:	3340      	adds	r3, #64	; 0x40
 8002f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	db0c      	blt.n	8002f9c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4907      	ldr	r1, [pc, #28]	; (8002fa8 <__NVIC_ClearPendingIRQ+0x38>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2001      	movs	r0, #1
 8002f92:	fa00 f202 	lsl.w	r2, r0, r2
 8002f96:	3360      	adds	r3, #96	; 0x60
 8002f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000e100 	.word	0xe000e100

08002fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	6039      	str	r1, [r7, #0]
 8002fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	db0a      	blt.n	8002fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	490c      	ldr	r1, [pc, #48]	; (8002ff8 <__NVIC_SetPriority+0x4c>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	0112      	lsls	r2, r2, #4
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd4:	e00a      	b.n	8002fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4908      	ldr	r1, [pc, #32]	; (8002ffc <__NVIC_SetPriority+0x50>)
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	3b04      	subs	r3, #4
 8002fe4:	0112      	lsls	r2, r2, #4
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	440b      	add	r3, r1
 8002fea:	761a      	strb	r2, [r3, #24]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000e100 	.word	0xe000e100
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f1c3 0307 	rsb	r3, r3, #7
 800301a:	2b04      	cmp	r3, #4
 800301c:	bf28      	it	cs
 800301e:	2304      	movcs	r3, #4
 8003020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	3304      	adds	r3, #4
 8003026:	2b06      	cmp	r3, #6
 8003028:	d902      	bls.n	8003030 <NVIC_EncodePriority+0x30>
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3b03      	subs	r3, #3
 800302e:	e000      	b.n	8003032 <NVIC_EncodePriority+0x32>
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43da      	mvns	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	401a      	ands	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43d9      	mvns	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	4313      	orrs	r3, r2
         );
}
 800305a:	4618      	mov	r0, r3
 800305c:	3724      	adds	r7, #36	; 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003078:	d301      	bcc.n	800307e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800307a:	2301      	movs	r3, #1
 800307c:	e00f      	b.n	800309e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <SysTick_Config+0x40>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3b01      	subs	r3, #1
 8003084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003086:	210f      	movs	r1, #15
 8003088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800308c:	f7ff ff8e 	bl	8002fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <SysTick_Config+0x40>)
 8003092:	2200      	movs	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003096:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <SysTick_Config+0x40>)
 8003098:	2207      	movs	r2, #7
 800309a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	e000e010 	.word	0xe000e010

080030ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fecb 	bl	8002e50 <__NVIC_SetPriorityGrouping>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030d0:	f7ff fee2 	bl	8002e98 <__NVIC_GetPriorityGrouping>
 80030d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	6978      	ldr	r0, [r7, #20]
 80030dc:	f7ff ff90 	bl	8003000 <NVIC_EncodePriority>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff5f 	bl	8002fac <__NVIC_SetPriority>
}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fed5 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fee5 	bl	8002ef0 <__NVIC_DisableIRQ>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ff96 	bl	8003068 <SysTick_Config>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	4603      	mov	r3, r0
 800314e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff feed 	bl	8002f34 <__NVIC_SetPendingIRQ>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	4603      	mov	r3, r0
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800316c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fefd 	bl	8002f70 <__NVIC_ClearPendingIRQ>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800318e:	e14c      	b.n	800342a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2101      	movs	r1, #1
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	4013      	ands	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 813e 	beq.w	8003424 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d00b      	beq.n	80031c8 <HAL_GPIO_Init+0x48>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d007      	beq.n	80031c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031bc:	2b11      	cmp	r3, #17
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b12      	cmp	r3, #18
 80031c6:	d130      	bne.n	800322a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031fe:	2201      	movs	r2, #1
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	f003 0201 	and.w	r2, r3, #1
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	2203      	movs	r2, #3
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0xea>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b12      	cmp	r3, #18
 8003268:	d123      	bne.n	80032b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3208      	adds	r2, #8
 8003272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	220f      	movs	r2, #15
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	6939      	ldr	r1, [r7, #16]
 80032ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2203      	movs	r2, #3
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0203 	and.w	r2, r3, #3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8098 	beq.w	8003424 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80032f4:	4a54      	ldr	r2, [pc, #336]	; (8003448 <HAL_GPIO_Init+0x2c8>)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	3302      	adds	r3, #2
 80032fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800331e:	d019      	beq.n	8003354 <HAL_GPIO_Init+0x1d4>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a4a      	ldr	r2, [pc, #296]	; (800344c <HAL_GPIO_Init+0x2cc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d013      	beq.n	8003350 <HAL_GPIO_Init+0x1d0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a49      	ldr	r2, [pc, #292]	; (8003450 <HAL_GPIO_Init+0x2d0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00d      	beq.n	800334c <HAL_GPIO_Init+0x1cc>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a48      	ldr	r2, [pc, #288]	; (8003454 <HAL_GPIO_Init+0x2d4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <HAL_GPIO_Init+0x1c8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a47      	ldr	r2, [pc, #284]	; (8003458 <HAL_GPIO_Init+0x2d8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_GPIO_Init+0x1c4>
 8003340:	2304      	movs	r3, #4
 8003342:	e008      	b.n	8003356 <HAL_GPIO_Init+0x1d6>
 8003344:	2307      	movs	r3, #7
 8003346:	e006      	b.n	8003356 <HAL_GPIO_Init+0x1d6>
 8003348:	2303      	movs	r3, #3
 800334a:	e004      	b.n	8003356 <HAL_GPIO_Init+0x1d6>
 800334c:	2302      	movs	r3, #2
 800334e:	e002      	b.n	8003356 <HAL_GPIO_Init+0x1d6>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_GPIO_Init+0x1d6>
 8003354:	2300      	movs	r3, #0
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	f002 0203 	and.w	r2, r2, #3
 800335c:	0092      	lsls	r2, r2, #2
 800335e:	4093      	lsls	r3, r2
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003366:	4938      	ldr	r1, [pc, #224]	; (8003448 <HAL_GPIO_Init+0x2c8>)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	3302      	adds	r3, #2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003374:	4b39      	ldr	r3, [pc, #228]	; (800345c <HAL_GPIO_Init+0x2dc>)
 8003376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800337a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	43db      	mvns	r3, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800339a:	4a30      	ldr	r2, [pc, #192]	; (800345c <HAL_GPIO_Init+0x2dc>)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80033a2:	4b2e      	ldr	r3, [pc, #184]	; (800345c <HAL_GPIO_Init+0x2dc>)
 80033a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033c8:	4a24      	ldr	r2, [pc, #144]	; (800345c <HAL_GPIO_Init+0x2dc>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033d0:	4b22      	ldr	r3, [pc, #136]	; (800345c <HAL_GPIO_Init+0x2dc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43db      	mvns	r3, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_GPIO_Init+0x2dc>)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80033fa:	4b18      	ldr	r3, [pc, #96]	; (800345c <HAL_GPIO_Init+0x2dc>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800341e:	4a0f      	ldr	r2, [pc, #60]	; (800345c <HAL_GPIO_Init+0x2dc>)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	3301      	adds	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	f47f aeab 	bne.w	8003190 <HAL_GPIO_Init+0x10>
  }
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	48000400 	.word	0x48000400
 8003450:	48000800 	.word	0x48000800
 8003454:	48000c00 	.word	0x48000c00
 8003458:	48001000 	.word	0x48001000
 800345c:	58000800 	.word	0x58000800

08003460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
 800346c:	4613      	mov	r3, r2
 800346e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003470:	787b      	ldrb	r3, [r7, #1]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800347c:	e002      	b.n	8003484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d006      	beq.n	80034b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fd f87a 	bl	80005a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	58000800 	.word	0x58000800

080034c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f002 fc12 	bl	8005cf6 <USB_ReadInterrupts>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	d102      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fadc 	bl	8003a9c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f002 fc04 	bl	8005cf6 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f8:	d112      	bne.n	8003520 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350c:	b292      	uxth	r2, r2
 800350e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f005 fb5d 	bl	8008bd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003518:	2100      	movs	r1, #0
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f91e 	bl	800375c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f002 fbe6 	bl	8005cf6 <USB_ReadInterrupts>
 800352a:	4603      	mov	r3, r0
 800352c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003534:	d10b      	bne.n	800354e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800353e:	b29a      	uxth	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003548:	b292      	uxth	r2, r2
 800354a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f002 fbcf 	bl	8005cf6 <USB_ReadInterrupts>
 8003558:	4603      	mov	r3, r0
 800355a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800355e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003562:	d10b      	bne.n	800357c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800356c:	b29a      	uxth	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003576:	b292      	uxth	r2, r2
 8003578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f002 fbb8 	bl	8005cf6 <USB_ReadInterrupts>
 8003586:	4603      	mov	r3, r0
 8003588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003590:	d133      	bne.n	80035fa <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800359a:	b29a      	uxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0204 	bic.w	r2, r2, #4
 80035a4:	b292      	uxth	r2, r2
 80035a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0208 	bic.w	r2, r2, #8
 80035bc:	b292      	uxth	r2, r2
 80035be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035d4:	2100      	movs	r1, #0
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fd10 	bl	8003ffc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f005 fb1b 	bl	8008c18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035f4:	b292      	uxth	r2, r2
 80035f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f002 fb79 	bl	8005cf6 <USB_ReadInterrupts>
 8003604:	4603      	mov	r3, r0
 8003606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800360e:	d126      	bne.n	800365e <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003618:	b29a      	uxth	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0208 	orr.w	r2, r2, #8
 8003622:	b292      	uxth	r2, r2
 8003624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363a:	b292      	uxth	r2, r2
 800363c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003648:	b29a      	uxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0204 	orr.w	r2, r2, #4
 8003652:	b292      	uxth	r2, r2
 8003654:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f005 facf 	bl	8008bfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f002 fb47 	bl	8005cf6 <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d13f      	bne.n	80036f2 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003684:	b292      	uxth	r2, r2
 8003686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8003690:	2b00      	cmp	r3, #0
 8003692:	d12b      	bne.n	80036ec <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0204 	orr.w	r2, r2, #4
 80036a6:	b292      	uxth	r2, r2
 80036a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0208 	orr.w	r2, r2, #8
 80036be:	b292      	uxth	r2, r2
 80036c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	089b      	lsrs	r3, r3, #2
 80036d8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80036e2:	2101      	movs	r1, #1
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fc89 	bl	8003ffc <HAL_PCDEx_LPM_Callback>
 80036ea:	e002      	b.n	80036f2 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f005 fa85 	bl	8008bfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f002 fafd 	bl	8005cf6 <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003706:	d10e      	bne.n	8003726 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003710:	b29a      	uxth	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800371a:	b292      	uxth	r2, r2
 800371c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f005 fa48 	bl	8008bb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f002 fae3 	bl	8005cf6 <USB_ReadInterrupts>
 8003730:	4603      	mov	r3, r0
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373a:	d10b      	bne.n	8003754 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800374e:	b292      	uxth	r2, r2
 8003750:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_PCD_SetAddress+0x1a>
 8003772:	2302      	movs	r3, #2
 8003774:	e013      	b.n	800379e <HAL_PCD_SetAddress+0x42>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f002 fa9d 	bl	8005cce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	4608      	mov	r0, r1
 80037b0:	4611      	mov	r1, r2
 80037b2:	461a      	mov	r2, r3
 80037b4:	4603      	mov	r3, r0
 80037b6:	70fb      	strb	r3, [r7, #3]
 80037b8:	460b      	mov	r3, r1
 80037ba:	803b      	strh	r3, [r7, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	da0b      	bge.n	80037e4 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	015b      	lsls	r3, r3, #5
 80037d4:	3328      	adds	r3, #40	; 0x28
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	705a      	strb	r2, [r3, #1]
 80037e2:	e00b      	b.n	80037fc <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	015b      	lsls	r3, r3, #5
 80037ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	b2da      	uxtb	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003808:	883a      	ldrh	r2, [r7, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	78ba      	ldrb	r2, [r7, #2]
 8003812:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003826:	78bb      	ldrb	r3, [r7, #2]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d102      	bne.n	8003832 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_PCD_EP_Open+0x9a>
 800383c:	2302      	movs	r3, #2
 800383e:	e00e      	b.n	800385e <HAL_PCD_EP_Open+0xb8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68f9      	ldr	r1, [r7, #12]
 800384e:	4618      	mov	r0, r3
 8003850:	f001 fa6a 	bl	8004d28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800385c:	7afb      	ldrb	r3, [r7, #11]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	460b      	mov	r3, r1
 8003874:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003876:	7afb      	ldrb	r3, [r7, #11]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	015b      	lsls	r3, r3, #5
 800387e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a0:	7afb      	ldrb	r3, [r7, #11]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038ac:	7afb      	ldrb	r3, [r7, #11]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6979      	ldr	r1, [r7, #20]
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 fde1 	bl	8005484 <USB_EPStartXfer>
 80038c2:	e005      	b.n	80038d0 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6979      	ldr	r1, [r7, #20]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 fdda 	bl	8005484 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	460b      	mov	r3, r1
 80038e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ea:	7afb      	ldrb	r3, [r7, #11]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	015b      	lsls	r3, r3, #5
 80038f2:	3328      	adds	r3, #40	; 0x28
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2200      	movs	r2, #0
 800390a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2201      	movs	r2, #1
 8003910:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003912:	7afb      	ldrb	r3, [r7, #11]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	b2da      	uxtb	r2, r3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800391e:	7afb      	ldrb	r3, [r7, #11]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6979      	ldr	r1, [r7, #20]
 800392e:	4618      	mov	r0, r3
 8003930:	f001 fda8 	bl	8005484 <USB_EPStartXfer>
 8003934:	e005      	b.n	8003942 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	4618      	mov	r0, r3
 800393e:	f001 fda1 	bl	8005484 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	f003 0207 	and.w	r2, r3, #7
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d901      	bls.n	800396a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e046      	b.n	80039f8 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800396a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396e:	2b00      	cmp	r3, #0
 8003970:	da0b      	bge.n	800398a <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	015b      	lsls	r3, r3, #5
 800397a:	3328      	adds	r3, #40	; 0x28
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4413      	add	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	705a      	strb	r2, [r3, #1]
 8003988:	e009      	b.n	800399e <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	015b      	lsls	r3, r3, #5
 800398e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_PCD_EP_SetStall+0x72>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e01c      	b.n	80039f8 <HAL_PCD_EP_SetStall+0xac>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68f9      	ldr	r1, [r7, #12]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 f87f 	bl	8005ad0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d108      	bne.n	80039ee <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80039e6:	4619      	mov	r1, r3
 80039e8:	4610      	mov	r0, r2
 80039ea:	f002 f994 	bl	8005d16 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	f003 020f 	and.w	r2, r3, #15
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d901      	bls.n	8003a1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e03a      	b.n	8003a94 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da0b      	bge.n	8003a3e <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	015b      	lsls	r3, r3, #5
 8003a2e:	3328      	adds	r3, #40	; 0x28
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	4413      	add	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	705a      	strb	r2, [r3, #1]
 8003a3c:	e00b      	b.n	8003a56 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a3e:	78fb      	ldrb	r3, [r7, #3]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	015b      	lsls	r3, r3, #5
 8003a46:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_PCD_EP_ClrStall+0x76>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e00e      	b.n	8003a94 <HAL_PCD_EP_ClrStall+0x94>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68f9      	ldr	r1, [r7, #12]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 f874 	bl	8005b72 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08e      	sub	sp, #56	; 0x38
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003aa4:	e29c      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x544>
  {
    wIstr = hpcd->Instance->ISTR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aae:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ab0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003abc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f040 8152 	bne.w	8003d6a <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d150      	bne.n	8003b72 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae0:	81fb      	strh	r3, [r7, #14]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	89fb      	ldrh	r3, [r7, #14]
 8003ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3328      	adds	r3, #40	; 0x28
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	441a      	add	r2, r3
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b30:	2100      	movs	r1, #0
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f005 f828 	bl	8008b88 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 824d 	beq.w	8003fe0 <PCD_EP_ISR_Handler+0x544>
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 8248 	bne.w	8003fe0 <PCD_EP_ISR_Handler+0x544>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	b292      	uxth	r2, r2
 8003b64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b70:	e236      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x544>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d032      	beq.n	8003bf2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f002 f8f2 	bl	8005db0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bd8:	4013      	ands	r3, r2
 8003bda:	823b      	strh	r3, [r7, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	8a3a      	ldrh	r2, [r7, #16]
 8003be2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003be6:	b292      	uxth	r2, r2
 8003be8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f004 ffa2 	bl	8008b34 <HAL_PCD_SetupStageCallback>
 8003bf0:	e1f6      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bf2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f280 81f2 	bge.w	8003fe0 <PCD_EP_ISR_Handler+0x544>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c08:	4013      	ands	r3, r2
 8003c0a:	83fb      	strh	r3, [r7, #30]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	8bfa      	ldrh	r2, [r7, #30]
 8003c12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c16:	b292      	uxth	r2, r2
 8003c18:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6812      	ldr	r2, [r2, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d019      	beq.n	8003c7e <PCD_EP_ISR_Handler+0x1e2>
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d015      	beq.n	8003c7e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	6959      	ldr	r1, [r3, #20]
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f002 f8a4 	bl	8005db0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	441a      	add	r2, r3
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c76:	2100      	movs	r1, #0
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f004 ff6d 	bl	8008b58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	4413      	add	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d112      	bne.n	8003ccc <PCD_EP_ISR_Handler+0x230>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	801a      	strh	r2, [r3, #0]
 8003cca:	e02f      	b.n	8003d2c <PCD_EP_ISR_Handler+0x290>
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8003cd2:	d813      	bhi.n	8003cfc <PCD_EP_ISR_Handler+0x260>
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <PCD_EP_ISR_Handler+0x252>
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	3301      	adds	r3, #1
 8003cec:	633b      	str	r3, [r7, #48]	; 0x30
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	029b      	lsls	r3, r3, #10
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	801a      	strh	r2, [r3, #0]
 8003cfa:	e017      	b.n	8003d2c <PCD_EP_ISR_Handler+0x290>
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	633b      	str	r3, [r7, #48]	; 0x30
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d102      	bne.n	8003d16 <PCD_EP_ISR_Handler+0x27a>
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	3b01      	subs	r3, #1
 8003d14:	633b      	str	r3, [r7, #48]	; 0x30
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	029b      	lsls	r3, r3, #10
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3c:	827b      	strh	r3, [r7, #18]
 8003d3e:	8a7b      	ldrh	r3, [r7, #18]
 8003d40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d44:	827b      	strh	r3, [r7, #18]
 8003d46:	8a7b      	ldrh	r3, [r7, #18]
 8003d48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d4c:	827b      	strh	r3, [r7, #18]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	8a7b      	ldrh	r3, [r7, #18]
 8003d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	8013      	strh	r3, [r2, #0]
 8003d68:	e13a      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x544>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	857b      	strh	r3, [r7, #42]	; 0x2a
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d7c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f280 80d6 	bge.w	8003f32 <PCD_EP_ISR_Handler+0x496>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003db0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003db4:	b292      	uxth	r2, r2
 8003db6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003db8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dbc:	015b      	lsls	r3, r3, #5
 8003dbe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	7b1b      	ldrb	r3, [r3, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11f      	bne.n	8003e10 <PCD_EP_ISR_Handler+0x374>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	4413      	add	r3, r2
 8003dea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003df4:	86fb      	strh	r3, [r7, #54]	; 0x36
          if (count != 0U)
 8003df6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d075      	beq.n	8003ee8 <PCD_EP_ISR_Handler+0x44c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	6959      	ldr	r1, [r3, #20]
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	88da      	ldrh	r2, [r3, #6]
 8003e08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e0a:	f001 ffd1 	bl	8005db0 <USB_ReadPMA>
 8003e0e:	e06b      	b.n	8003ee8 <PCD_EP_ISR_Handler+0x44c>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	441a      	add	r2, r3
 8003e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01f      	beq.n	8003eaa <PCD_EP_ISR_Handler+0x40e>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6812      	ldr	r2, [r2, #0]
 8003e82:	4413      	add	r3, r2
 8003e84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e8e:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8003e90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d028      	beq.n	8003ee8 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	6959      	ldr	r1, [r3, #20]
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	891a      	ldrh	r2, [r3, #8]
 8003ea2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ea4:	f001 ff84 	bl	8005db0 <USB_ReadPMA>
 8003ea8:	e01e      	b.n	8003ee8 <PCD_EP_ISR_Handler+0x44c>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ece:	86fb      	strh	r3, [r7, #54]	; 0x36
            if (count != 0U)
 8003ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <PCD_EP_ISR_Handler+0x44c>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	6959      	ldr	r1, [r3, #20]
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	895a      	ldrh	r2, [r3, #10]
 8003ee2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ee4:	f001 ff64 	bl	8005db0 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003eee:	441a      	add	r2, r3
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003efa:	441a      	add	r2, r3
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d004      	beq.n	8003f12 <PCD_EP_ISR_Handler+0x476>
 8003f08:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d206      	bcs.n	8003f20 <PCD_EP_ISR_Handler+0x484>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	4619      	mov	r1, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f004 fe1d 	bl	8008b58 <HAL_PCD_DataOutStageCallback>
 8003f1e:	e008      	b.n	8003f32 <PCD_EP_ISR_Handler+0x496>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	7819      	ldrb	r1, [r3, #0]
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff fc9a 	bl	8003866 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d051      	beq.n	8003fe0 <PCD_EP_ISR_Handler+0x544>
      {
        ep = &hpcd->IN_ep[epindex];
 8003f3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f40:	015b      	lsls	r3, r3, #5
 8003f42:	3328      	adds	r3, #40	; 0x28
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4413      	add	r3, r2
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f64:	843b      	strh	r3, [r7, #32]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	441a      	add	r2, r3
 8003f74:	8c3b      	ldrh	r3, [r7, #32]
 8003f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	441a      	add	r2, r3
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <PCD_EP_ISR_Handler+0x532>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f004 fdde 	bl	8008b88 <HAL_PCD_DataInStageCallback>
 8003fcc:	e008      	b.n	8003fe0 <PCD_EP_ISR_Handler+0x544>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	7819      	ldrb	r1, [r3, #0]
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fc7d 	bl	80038da <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f6ff ad5a 	blt.w	8003aa6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3738      	adds	r7, #56	; 0x38
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800401e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004022:	6013      	str	r3, [r2, #0]
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	58000400 	.word	0x58000400

08004034 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_PWREx_EnableVddUSB+0x1c>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a04      	ldr	r2, [pc, #16]	; (8004050 <HAL_PWREx_EnableVddUSB+0x1c>)
 800403e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004042:	6053      	str	r3, [r2, #4]
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	58000400 	.word	0x58000400

08004054 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004066:	d101      	bne.n	800406c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_RCC_MSI_GetRange>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800407e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004088:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2bb0      	cmp	r3, #176	; 0xb0
 800408e:	d901      	bls.n	8004094 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004090:	23b0      	movs	r3, #176	; 0xb0
 8004092:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004094:	687b      	ldr	r3, [r7, #4]
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_RCC_GetSysClkSource>:
{
 80040a2:	b480      	push	{r7}
 80040a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80040a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <LL_RCC_GetAHBPrescaler>:
{
 80040ba:	b480      	push	{r7}
 80040bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80040be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <LL_RCC_PLL_GetN>:
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80040d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_PLL_GetR>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <LL_RCC_PLL_GetDivider>:
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004112:	4618      	mov	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_RCC_PLL_GetMainSource>:
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0303 	and.w	r3, r3, #3
}
 800412a:	4618      	mov	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413a:	f7ff ffb2 	bl	80040a2 <LL_RCC_GetSysClkSource>
 800413e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004146:	f7ff ff97 	bl	8004078 <LL_RCC_MSI_GetRange>
 800414a:	4603      	mov	r3, r0
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e04a      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b04      	cmp	r3, #4
 8004160:	d102      	bne.n	8004168 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004162:	4b27      	ldr	r3, [pc, #156]	; (8004200 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e044      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b08      	cmp	r3, #8
 800416c:	d10a      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800416e:	f7ff ff71 	bl	8004054 <LL_RCC_HSE_IsEnabledDiv2>
 8004172:	4603      	mov	r3, r0
 8004174:	2b01      	cmp	r3, #1
 8004176:	d102      	bne.n	800417e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004178:	4b21      	ldr	r3, [pc, #132]	; (8004200 <HAL_RCC_GetSysClockFreq+0xcc>)
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e039      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800417e:	4b21      	ldr	r3, [pc, #132]	; (8004204 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	e036      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004184:	f7ff ffca 	bl	800411c <LL_RCC_PLL_GetMainSource>
 8004188:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d002      	beq.n	8004196 <HAL_RCC_GetSysClockFreq+0x62>
 8004190:	2b03      	cmp	r3, #3
 8004192:	d003      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0x68>
 8004194:	e00d      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004198:	60bb      	str	r3, [r7, #8]
        break;
 800419a:	e015      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800419c:	f7ff ff5a 	bl	8004054 <LL_RCC_HSE_IsEnabledDiv2>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d102      	bne.n	80041ac <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80041a6:	4b16      	ldr	r3, [pc, #88]	; (8004200 <HAL_RCC_GetSysClockFreq+0xcc>)
 80041a8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80041aa:	e00d      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80041ac:	4b15      	ldr	r3, [pc, #84]	; (8004204 <HAL_RCC_GetSysClockFreq+0xd0>)
 80041ae:	60bb      	str	r3, [r7, #8]
        break;
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80041b2:	f7ff ff61 	bl	8004078 <LL_RCC_MSI_GetRange>
 80041b6:	4603      	mov	r3, r0
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	4a0f      	ldr	r2, [pc, #60]	; (80041fc <HAL_RCC_GetSysClockFreq+0xc8>)
 80041c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c4:	60bb      	str	r3, [r7, #8]
        break;
 80041c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80041c8:	f7ff ff83 	bl	80040d2 <LL_RCC_PLL_GetN>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	fb03 f402 	mul.w	r4, r3, r2
 80041d4:	f7ff ff96 	bl	8004104 <LL_RCC_PLL_GetDivider>
 80041d8:	4603      	mov	r3, r0
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	3301      	adds	r3, #1
 80041de:	fbb4 f4f3 	udiv	r4, r4, r3
 80041e2:	f7ff ff83 	bl	80040ec <LL_RCC_PLL_GetR>
 80041e6:	4603      	mov	r3, r0
 80041e8:	0f5b      	lsrs	r3, r3, #29
 80041ea:	3301      	adds	r3, #1
 80041ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80041f0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd90      	pop	{r4, r7, pc}
 80041fc:	080096b4 	.word	0x080096b4
 8004200:	00f42400 	.word	0x00f42400
 8004204:	01e84800 	.word	0x01e84800

08004208 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004208:	b598      	push	{r3, r4, r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800420c:	f7ff ff92 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 8004210:	4604      	mov	r4, r0
 8004212:	f7ff ff52 	bl	80040ba <LL_RCC_GetAHBPrescaler>
 8004216:	4603      	mov	r3, r0
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	4a03      	ldr	r2, [pc, #12]	; (800422c <HAL_RCC_GetHCLKFreq+0x24>)
 8004220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004224:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	bd98      	pop	{r3, r4, r7, pc}
 800422c:	08009674 	.word	0x08009674

08004230 <LL_RCC_LSE_IsEnabled>:
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <LL_RCC_LSE_IsEnabled+0x18>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <LL_RCC_LSE_IsEnabled+0x1a>
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <LL_RCC_LSE_IsReady>:
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b02      	cmp	r3, #2
 8004266:	d101      	bne.n	800426c <LL_RCC_LSE_IsReady+0x18>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <LL_RCC_LSE_IsReady+0x1a>
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_RCC_SetRFWKPClockSource>:
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800428c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <LL_RCC_SetSMPSClockSource>:
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80042ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4313      	orrs	r3, r2
 80042be:	624b      	str	r3, [r1, #36]	; 0x24
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <LL_RCC_SetSMPSPrescaler>:
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_RCC_SetUSARTClockSource>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f023 0203 	bic.w	r2, r3, #3
 8004308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <LL_RCC_SetLPUARTClockSource>:
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_RCC_SetI2CClockSource>:
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004358:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004364:	43db      	mvns	r3, r3
 8004366:	401a      	ands	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <LL_RCC_SetLPTIMClockSource>:
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800438e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004392:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	041b      	lsls	r3, r3, #16
 800439c:	43db      	mvns	r3, r3
 800439e:	401a      	ands	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <LL_RCC_SetSAIClockSource>:
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80043c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_SetRNGClockSource>:
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80043ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80043fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <LL_RCC_SetCLK48ClockSource>:
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <LL_RCC_SetUSBClockSource>:
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff ffe3 	bl	8004412 <LL_RCC_SetCLK48ClockSource>
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <LL_RCC_SetADCClockSource>:
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800445c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004464:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004468:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <LL_RCC_SetRTCClockSource>:
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_RCC_GetRTCClockSource>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80044b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80044bc:	4618      	mov	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <LL_RCC_ForceBackupDomainReset>:
{
 80044c6:	b480      	push	{r7}
 80044c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80044ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044de:	bf00      	nop
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80044ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <LL_RCC_PLLSAI1_Enable>:
{
 800450a:	b480      	push	{r7}
 800450c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800450e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800451c:	6013      	str	r3, [r2, #0]
}
 800451e:	bf00      	nop
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_RCC_PLLSAI1_Disable>:
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800452c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004536:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800453a:	6013      	str	r3, [r2, #0]
}
 800453c:	bf00      	nop
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <LL_RCC_PLLSAI1_IsReady>:
{
 8004546:	b480      	push	{r7}
 8004548:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004558:	d101      	bne.n	800455e <LL_RCC_PLLSAI1_IsReady+0x18>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <LL_APB1_GRP1_ForceReset>:
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4313      	orrs	r3, r2
 8004580:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <LL_APB1_GRP1_ReleaseReset>:
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	43db      	mvns	r3, r3
 80045a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045a4:	4013      	ands	r3, r2
 80045a6:	638b      	str	r3, [r1, #56]	; 0x38
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80045bc:	2300      	movs	r3, #0
 80045be:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80045c0:	2300      	movs	r3, #0
 80045c2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d033      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d8:	d00c      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80045da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045de:	d802      	bhi.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d010      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045e4:	e017      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80045e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ea:	d017      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x68>
 80045ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045f0:	d016      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80045f2:	e010      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80045f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004602:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004604:	e00d      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3304      	adds	r3, #4
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f982 	bl	8004914 <RCCEx_PLLSAI1_ConfigNP>
 8004610:	4603      	mov	r3, r0
 8004612:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004614:	e005      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	77fb      	strb	r3, [r7, #31]
        break;
 800461a:	e002      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800461c:	bf00      	nop
 800461e:	e000      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004622:	7ffb      	ldrb	r3, [r7, #31]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d105      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fec4 	bl	80043ba <LL_RCC_SetSAIClockSource>
 8004632:	e001      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	7ffb      	ldrb	r3, [r7, #31]
 8004636:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004640:	2b00      	cmp	r3, #0
 8004642:	d046      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004644:	f7ff ff32 	bl	80044ac <LL_RCC_GetRTCClockSource>
 8004648:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	429a      	cmp	r2, r3
 8004652:	d03c      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004654:	f7ff fcde 	bl	8004014 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d105      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff ff0c 	bl	8004480 <LL_RCC_SetRTCClockSource>
 8004668:	e02e      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004674:	f7ff ff27 	bl	80044c6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004678:	f7ff ff36 	bl	80044e8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800468a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004694:	f7ff fdcc 	bl	8004230 <LL_RCC_LSE_IsEnabled>
 8004698:	4603      	mov	r3, r0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d114      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800469e:	f7fe fb9f 	bl	8002de0 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80046a4:	e00b      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fe fb9b 	bl	8002de0 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d902      	bls.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	77fb      	strb	r3, [r7, #31]
              break;
 80046bc:	e004      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80046be:	f7ff fdc9 	bl	8004254 <LL_RCC_LSE_IsReady>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d1ee      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80046c8:	7ffb      	ldrb	r3, [r7, #31]
 80046ca:	77bb      	strb	r3, [r7, #30]
 80046cc:	e001      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ce:	7ffb      	ldrb	r3, [r7, #31]
 80046d0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d004      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fe06 	bl	80042f4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d004      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fe11 	bl	8004320 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fe39 	bl	8004386 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fe2e 	bl	8004386 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fe06 	bl	800434c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fdfb 	bl	800434c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d022      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fe69 	bl	800443e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004774:	d107      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004784:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800478e:	d10b      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f918 	bl	80049ca <RCCEx_PLLSAI1_ConfigNQ>
 800479a:	4603      	mov	r3, r0
 800479c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800479e:	7ffb      	ldrb	r3, [r7, #31]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80047a4:	7ffb      	ldrb	r3, [r7, #31]
 80047a6:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d02b      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047bc:	d008      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047c6:	d003      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d105      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x228>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fe06 	bl	80043e6 <LL_RCC_SetRNGClockSource>
 80047da:	e00a      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	2000      	movs	r0, #0
 80047e8:	f7ff fdfd 	bl	80043e6 <LL_RCC_SetRNGClockSource>
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff fe10 	bl	8004412 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80047fa:	d107      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80047fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800480a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d022      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fe19 	bl	8004454 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800482a:	d107      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800482c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800483a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004844:	d10b      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f918 	bl	8004a80 <RCCEx_PLLSAI1_ConfigNR>
 8004850:	4603      	mov	r3, r0
 8004852:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004854:	7ffb      	ldrb	r3, [r7, #31]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800485a:	7ffb      	ldrb	r3, [r7, #31]
 800485c:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d004      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fd02 	bl	8004278 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fd21 	bl	80042cc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fd08 	bl	80042a4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004894:	7fbb      	ldrb	r3, [r7, #30]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80048a8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80048ac:	f7ff fe5d 	bl	800456a <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 80048b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80048b4:	f7ff fe6b 	bl	800458e <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	041b      	lsls	r3, r3, #16
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80048e0:	4a0b      	ldr	r2, [pc, #44]	; (8004910 <HAL_RCCEx_CRSConfig+0x70>)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80048e6:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <HAL_RCCEx_CRSConfig+0x70>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	4906      	ldr	r1, [pc, #24]	; (8004910 <HAL_RCCEx_CRSConfig+0x70>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCCEx_CRSConfig+0x70>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a04      	ldr	r2, [pc, #16]	; (8004910 <HAL_RCCEx_CRSConfig+0x70>)
 8004900:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004904:	6013      	str	r3, [r2, #0]
}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40006000 	.word	0x40006000

08004914 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004920:	f7ff fe02 	bl	8004528 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004924:	f7fe fa5c 	bl	8002de0 <HAL_GetTick>
 8004928:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800492a:	e009      	b.n	8004940 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800492c:	f7fe fa58 	bl	8002de0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d902      	bls.n	8004940 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	73fb      	strb	r3, [r7, #15]
      break;
 800493e:	e004      	b.n	800494a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004940:	f7ff fe01 	bl	8004546 <LL_RCC_PLLSAI1_IsReady>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f0      	bne.n	800492c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d137      	bne.n	80049c0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004964:	4313      	orrs	r3, r2
 8004966:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800497a:	4313      	orrs	r3, r2
 800497c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800497e:	f7ff fdc4 	bl	800450a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004982:	f7fe fa2d 	bl	8002de0 <HAL_GetTick>
 8004986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004988:	e009      	b.n	800499e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800498a:	f7fe fa29 	bl	8002de0 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d902      	bls.n	800499e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	73fb      	strb	r3, [r7, #15]
        break;
 800499c:	e004      	b.n	80049a8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800499e:	f7ff fdd2 	bl	8004546 <LL_RCC_PLLSAI1_IsReady>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d1f0      	bne.n	800498a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d108      	bne.n	80049c0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049bc:	4313      	orrs	r3, r2
 80049be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80049d6:	f7ff fda7 	bl	8004528 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049da:	f7fe fa01 	bl	8002de0 <HAL_GetTick>
 80049de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049e0:	e009      	b.n	80049f6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049e2:	f7fe f9fd 	bl	8002de0 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d902      	bls.n	80049f6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	73fb      	strb	r3, [r7, #15]
      break;
 80049f4:	e004      	b.n	8004a00 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049f6:	f7ff fda6 	bl	8004546 <LL_RCC_PLLSAI1_IsReady>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f0      	bne.n	80049e2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d137      	bne.n	8004a76 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a30:	4313      	orrs	r3, r2
 8004a32:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004a34:	f7ff fd69 	bl	800450a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a38:	f7fe f9d2 	bl	8002de0 <HAL_GetTick>
 8004a3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a3e:	e009      	b.n	8004a54 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a40:	f7fe f9ce 	bl	8002de0 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d902      	bls.n	8004a54 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	73fb      	strb	r3, [r7, #15]
        break;
 8004a52:	e004      	b.n	8004a5e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a54:	f7ff fd77 	bl	8004546 <LL_RCC_PLLSAI1_IsReady>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d1f0      	bne.n	8004a40 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d108      	bne.n	8004a76 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a72:	4313      	orrs	r3, r2
 8004a74:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004a8c:	f7ff fd4c 	bl	8004528 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a90:	f7fe f9a6 	bl	8002de0 <HAL_GetTick>
 8004a94:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a96:	e009      	b.n	8004aac <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a98:	f7fe f9a2 	bl	8002de0 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d902      	bls.n	8004aac <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8004aaa:	e004      	b.n	8004ab6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004aac:	f7ff fd4b 	bl	8004546 <LL_RCC_PLLSAI1_IsReady>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d137      	bne.n	8004b2c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004aea:	f7ff fd0e 	bl	800450a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aee:	f7fe f977 	bl	8002de0 <HAL_GetTick>
 8004af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004af4:	e009      	b.n	8004b0a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004af6:	f7fe f973 	bl	8002de0 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d902      	bls.n	8004b0a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	73fb      	strb	r3, [r7, #15]
        break;
 8004b08:	e004      	b.n	8004b14 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b0a:	f7ff fd1c 	bl	8004546 <LL_RCC_PLLSAI1_IsReady>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d1f0      	bne.n	8004af6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d108      	bne.n	8004b2c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e090      	b.n	8004c6a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f888 	bl	8004c72 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	22ca      	movs	r2, #202	; 0xca
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2253      	movs	r2, #83	; 0x53
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8a9 	bl	8004cd2 <RTC_EnterInitMode>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	22ff      	movs	r2, #255	; 0xff
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2204      	movs	r2, #4
 8004b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e067      	b.n	8004c6a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68d2      	ldr	r2, [r2, #12]
 8004bd4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6919      	ldr	r1, [r3, #16]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	041a      	lsls	r2, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bf8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0203 	bic.w	r2, r2, #3
 8004c08:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d113      	bne.n	8004c58 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f828 	bl	8004c86 <HAL_RTC_WaitForSynchro>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00d      	beq.n	8004c58 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	22ff      	movs	r2, #255	; 0xff
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2204      	movs	r2, #4
 8004c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e008      	b.n	8004c6a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	22ff      	movs	r2, #255	; 0xff
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8004c68:	2300      	movs	r3, #0
  }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param hrtc RTC handle  
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c9c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004c9e:	f7fe f89f 	bl	8002de0 <HAL_GetTick>
 8004ca2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ca4:	e009      	b.n	8004cba <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ca6:	f7fe f89b 	bl	8002de0 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cb4:	d901      	bls.n	8004cba <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e007      	b.n	8004cca <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ee      	beq.n	8004ca6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d119      	bne.n	8004d1c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cf0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004cf2:	f7fe f875 	bl	8002de0 <HAL_GetTick>
 8004cf6:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004cf8:	e009      	b.n	8004d0e <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cfa:	f7fe f871 	bl	8002de0 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d08:	d901      	bls.n	8004d0e <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e007      	b.n	8004d1e <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0ee      	beq.n	8004cfa <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b09d      	sub	sp, #116	; 0x74
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	78db      	ldrb	r3, [r3, #3]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d81f      	bhi.n	8004d9a <USB_ActivateEndpoint+0x72>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <USB_ActivateEndpoint+0x38>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004da3 	.word	0x08004da3
 8004d6c:	08004d7f 	.word	0x08004d7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d7c:	e012      	b.n	8004da4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d82:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d86:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d8a:	e00b      	b.n	8004da4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004d98:	e004      	b.n	8004da4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004da0:	e000      	b.n	8004da4 <USB_ActivateEndpoint+0x7c>
      break;
 8004da2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004db2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	b21b      	sxth	r3, r3
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	b21a      	sxth	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	b21b      	sxth	r3, r3
 8004de6:	4313      	orrs	r3, r2
 8004de8:	b21b      	sxth	r3, r3
 8004dea:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	7b1b      	ldrb	r3, [r3, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f040 8149 	bne.w	80050ac <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 8084 	beq.w	8004f2c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	4413      	add	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	00da      	lsls	r2, r3, #3
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	88db      	ldrh	r3, [r3, #6]
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	827b      	strh	r3, [r7, #18]
 8004e66:	8a7b      	ldrh	r3, [r7, #18]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01b      	beq.n	8004ea8 <USB_ActivateEndpoint+0x180>
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e86:	823b      	strh	r3, [r7, #16]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	441a      	add	r2, r3
 8004e92:	8a3b      	ldrh	r3, [r7, #16]
 8004e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	78db      	ldrb	r3, [r3, #3]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d020      	beq.n	8004ef2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec6:	81bb      	strh	r3, [r7, #12]
 8004ec8:	89bb      	ldrh	r3, [r7, #12]
 8004eca:	f083 0320 	eor.w	r3, r3, #32
 8004ece:	81bb      	strh	r3, [r7, #12]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	89bb      	ldrh	r3, [r7, #12]
 8004edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	8013      	strh	r3, [r2, #0]
 8004ef0:	e2bf      	b.n	8005472 <USB_ActivateEndpoint+0x74a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f08:	81fb      	strh	r3, [r7, #14]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	89fb      	ldrh	r3, [r7, #14]
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]
 8004f2a:	e2a2      	b.n	8005472 <USB_ActivateEndpoint+0x74a>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	4413      	add	r3, r2
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	00da      	lsls	r2, r3, #3
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	4413      	add	r3, r2
 8004f4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	88db      	ldrh	r3, [r3, #6]
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	4413      	add	r3, r2
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	00da      	lsls	r2, r3, #3
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d112      	bne.n	8004fb2 <USB_ActivateEndpoint+0x28a>
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	e02f      	b.n	8005012 <USB_ActivateEndpoint+0x2ea>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fb8:	d813      	bhi.n	8004fe2 <USB_ActivateEndpoint+0x2ba>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <USB_ActivateEndpoint+0x2ac>
 8004fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	029b      	lsls	r3, r3, #10
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	801a      	strh	r2, [r3, #0]
 8004fe0:	e017      	b.n	8005012 <USB_ActivateEndpoint+0x2ea>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <USB_ActivateEndpoint+0x2d4>
 8004ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	029b      	lsls	r3, r3, #10
 8005002:	b29b      	uxth	r3, r3
 8005004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800500c:	b29a      	uxth	r2, r3
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01b      	beq.n	8005062 <USB_ActivateEndpoint+0x33a>
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005040:	843b      	strh	r3, [r7, #32]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	8c3b      	ldrh	r3, [r7, #32]
 800504e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800505a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	83fb      	strh	r3, [r7, #30]
 800507a:	8bfb      	ldrh	r3, [r7, #30]
 800507c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005080:	83fb      	strh	r3, [r7, #30]
 8005082:	8bfb      	ldrh	r3, [r7, #30]
 8005084:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005088:	83fb      	strh	r3, [r7, #30]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	441a      	add	r2, r3
 8005094:	8bfb      	ldrh	r3, [r7, #30]
 8005096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	8013      	strh	r3, [r2, #0]
 80050aa:	e1e2      	b.n	8005472 <USB_ActivateEndpoint+0x74a>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	441a      	add	r2, r3
 80050d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80050d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	663b      	str	r3, [r7, #96]	; 0x60
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050f8:	4413      	add	r3, r2
 80050fa:	663b      	str	r3, [r7, #96]	; 0x60
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	00da      	lsls	r2, r3, #3
 8005102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005104:	4413      	add	r3, r2
 8005106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800510a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	891b      	ldrh	r3, [r3, #8]
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800511a:	801a      	strh	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005126:	b29b      	uxth	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800512c:	4413      	add	r3, r2
 800512e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	00da      	lsls	r2, r3, #3
 8005136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005138:	4413      	add	r3, r2
 800513a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800513e:	657b      	str	r3, [r7, #84]	; 0x54
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	895b      	ldrh	r3, [r3, #10]
 8005144:	085b      	lsrs	r3, r3, #1
 8005146:	b29b      	uxth	r3, r3
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800514e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f040 80b1 	bne.w	80052bc <USB_ActivateEndpoint+0x594>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800516a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800516e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01d      	beq.n	80051b2 <USB_ActivateEndpoint+0x48a>
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	441a      	add	r2, r3
 800519a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800519e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01b      	beq.n	8005202 <USB_ActivateEndpoint+0x4da>
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	441a      	add	r2, r3
 80051ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051fe:	b29b      	uxth	r3, r3
 8005200:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005218:	877b      	strh	r3, [r7, #58]	; 0x3a
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	441a      	add	r2, r3
 8005224:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005232:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005236:	b29b      	uxth	r3, r3
 8005238:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29b      	uxth	r3, r3
 8005248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800524c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005250:	873b      	strh	r3, [r7, #56]	; 0x38
 8005252:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005254:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005258:	873b      	strh	r3, [r7, #56]	; 0x38
 800525a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800525c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005260:	873b      	strh	r3, [r7, #56]	; 0x38
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	441a      	add	r2, r3
 800526c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800526e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527e:	b29b      	uxth	r3, r3
 8005280:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005298:	86fb      	strh	r3, [r7, #54]	; 0x36
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	8013      	strh	r3, [r2, #0]
 80052ba:	e0da      	b.n	8005472 <USB_ActivateEndpoint+0x74a>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80052cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80052d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01d      	beq.n	8005314 <USB_ActivateEndpoint+0x5ec>
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	441a      	add	r2, r3
 80052fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800530c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005310:	b29b      	uxth	r3, r3
 8005312:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005324:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01d      	beq.n	800536c <USB_ActivateEndpoint+0x644>
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	441a      	add	r2, r3
 8005354:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005364:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005368:	b29b      	uxth	r3, r3
 800536a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	441a      	add	r2, r3
 8005390:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	78db      	ldrb	r3, [r3, #3]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d024      	beq.n	80053fa <USB_ActivateEndpoint+0x6d2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80053ce:	f083 0320 	eor.w	r3, r3, #32
 80053d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	441a      	add	r2, r3
 80053e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80053e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	8013      	strh	r3, [r2, #0]
 80053f8:	e01d      	b.n	8005436 <USB_ActivateEndpoint+0x70e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29b      	uxth	r3, r3
 8005408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005410:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	441a      	add	r2, r3
 800541e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005432:	b29b      	uxth	r3, r3
 8005434:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	441a      	add	r2, r3
 800545a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800545e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005472:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8005476:	4618      	mov	r0, r3
 8005478:	3774      	adds	r7, #116	; 0x74
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop

08005484 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b0a0      	sub	sp, #128	; 0x80
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b01      	cmp	r3, #1
 8005494:	f040 81a1 	bne.w	80057da <USB_EPStartXfer+0x356>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	699a      	ldr	r2, [r3, #24]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d909      	bls.n	80054b8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054b0:	1ad2      	subs	r2, r2, r3
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	619a      	str	r2, [r3, #24]
 80054b6:	e005      	b.n	80054c4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2200      	movs	r2, #0
 80054c2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	7b1b      	ldrb	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11f      	bne.n	800550c <USB_EPStartXfer+0x88>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6959      	ldr	r1, [r3, #20]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	88da      	ldrh	r2, [r3, #6]
 80054d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fc28 	bl	8005d2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4413      	add	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	00da      	lsls	r2, r3, #3
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4413      	add	r3, r2
 80054fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	801a      	strh	r2, [r3, #0]
 800550a:	e141      	b.n	8005790 <USB_EPStartXfer+0x30c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d076      	beq.n	8005610 <USB_EPStartXfer+0x18c>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d153      	bne.n	80055d6 <USB_EPStartXfer+0x152>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005538:	b29b      	uxth	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	00da      	lsls	r2, r3, #3
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005554:	2b00      	cmp	r3, #0
 8005556:	d112      	bne.n	800557e <USB_EPStartXfer+0xfa>
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005562:	b29a      	uxth	r2, r3
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	801a      	strh	r2, [r3, #0]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005576:	b29a      	uxth	r2, r3
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	801a      	strh	r2, [r3, #0]
 800557c:	e043      	b.n	8005606 <USB_EPStartXfer+0x182>
 800557e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005580:	2b3e      	cmp	r3, #62	; 0x3e
 8005582:	d811      	bhi.n	80055a8 <USB_EPStartXfer+0x124>
 8005584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	677b      	str	r3, [r7, #116]	; 0x74
 800558a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <USB_EPStartXfer+0x116>
 8005594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005596:	3301      	adds	r3, #1
 8005598:	677b      	str	r3, [r7, #116]	; 0x74
 800559a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800559c:	b29b      	uxth	r3, r3
 800559e:	029b      	lsls	r3, r3, #10
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	e02e      	b.n	8005606 <USB_EPStartXfer+0x182>
 80055a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	677b      	str	r3, [r7, #116]	; 0x74
 80055ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <USB_EPStartXfer+0x13a>
 80055b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ba:	3b01      	subs	r3, #1
 80055bc:	677b      	str	r3, [r7, #116]	; 0x74
 80055be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	029b      	lsls	r3, r3, #10
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	801a      	strh	r2, [r3, #0]
 80055d4:	e017      	b.n	8005606 <USB_EPStartXfer+0x182>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	785b      	ldrb	r3, [r3, #1]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d113      	bne.n	8005606 <USB_EPStartXfer+0x182>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	4413      	add	r3, r2
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	00da      	lsls	r2, r3, #3
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	4413      	add	r3, r2
 80055f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055fc:	623b      	str	r3, [r7, #32]
 80055fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005600:	b29a      	uxth	r2, r3
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	895b      	ldrh	r3, [r3, #10]
 800560a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800560e:	e075      	b.n	80056fc <USB_EPStartXfer+0x278>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	785b      	ldrb	r3, [r3, #1]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d153      	bne.n	80056c0 <USB_EPStartXfer+0x23c>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	4413      	add	r3, r2
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	00da      	lsls	r2, r3, #3
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	4413      	add	r3, r2
 8005636:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800563a:	62bb      	str	r3, [r7, #40]	; 0x28
 800563c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800563e:	2b00      	cmp	r3, #0
 8005640:	d112      	bne.n	8005668 <USB_EPStartXfer+0x1e4>
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800564c:	b29a      	uxth	r2, r3
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	801a      	strh	r2, [r3, #0]
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005660:	b29a      	uxth	r2, r3
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	e045      	b.n	80056f4 <USB_EPStartXfer+0x270>
 8005668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800566a:	2b3e      	cmp	r3, #62	; 0x3e
 800566c:	d811      	bhi.n	8005692 <USB_EPStartXfer+0x20e>
 800566e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	673b      	str	r3, [r7, #112]	; 0x70
 8005674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <USB_EPStartXfer+0x200>
 800567e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005680:	3301      	adds	r3, #1
 8005682:	673b      	str	r3, [r7, #112]	; 0x70
 8005684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005686:	b29b      	uxth	r3, r3
 8005688:	029b      	lsls	r3, r3, #10
 800568a:	b29a      	uxth	r2, r3
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	801a      	strh	r2, [r3, #0]
 8005690:	e030      	b.n	80056f4 <USB_EPStartXfer+0x270>
 8005692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	673b      	str	r3, [r7, #112]	; 0x70
 8005698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d102      	bne.n	80056a8 <USB_EPStartXfer+0x224>
 80056a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056a4:	3b01      	subs	r3, #1
 80056a6:	673b      	str	r3, [r7, #112]	; 0x70
 80056a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	029b      	lsls	r3, r3, #10
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	801a      	strh	r2, [r3, #0]
 80056be:	e019      	b.n	80056f4 <USB_EPStartXfer+0x270>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d115      	bne.n	80056f4 <USB_EPStartXfer+0x270>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	637b      	str	r3, [r7, #52]	; 0x34
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d8:	4413      	add	r3, r2
 80056da:	637b      	str	r3, [r7, #52]	; 0x34
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	00da      	lsls	r2, r3, #3
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	4413      	add	r3, r2
 80056e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056ea:	633b      	str	r3, [r7, #48]	; 0x30
 80056ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	891b      	ldrh	r3, [r3, #8]
 80056f8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	6959      	ldr	r1, [r3, #20]
 8005700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005702:	b29b      	uxth	r3, r3
 8005704:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fb10 	bl	8005d2e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	785b      	ldrb	r3, [r3, #1]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d11c      	bne.n	8005750 <USB_EPStartXfer+0x2cc>
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572c:	82bb      	strh	r3, [r7, #20]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	441a      	add	r2, r3
 8005738:	8abb      	ldrh	r3, [r7, #20]
 800573a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005746:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800574a:	b29b      	uxth	r3, r3
 800574c:	8013      	strh	r3, [r2, #0]
 800574e:	e01f      	b.n	8005790 <USB_EPStartXfer+0x30c>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d11b      	bne.n	8005790 <USB_EPStartXfer+0x30c>
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	82fb      	strh	r3, [r7, #22]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	441a      	add	r2, r3
 800577a:	8afb      	ldrh	r3, [r7, #22]
 800577c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578c:	b29b      	uxth	r3, r3
 800578e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a6:	817b      	strh	r3, [r7, #10]
 80057a8:	897b      	ldrh	r3, [r7, #10]
 80057aa:	f083 0310 	eor.w	r3, r3, #16
 80057ae:	817b      	strh	r3, [r7, #10]
 80057b0:	897b      	ldrh	r3, [r7, #10]
 80057b2:	f083 0320 	eor.w	r3, r3, #32
 80057b6:	817b      	strh	r3, [r7, #10]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	441a      	add	r2, r3
 80057c2:	897b      	ldrh	r3, [r7, #10]
 80057c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	8013      	strh	r3, [r2, #0]
 80057d8:	e175      	b.n	8005ac6 <USB_EPStartXfer+0x642>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d909      	bls.n	80057fa <USB_EPStartXfer+0x376>
    {
      len = ep->maxpacket;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len -= len;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	619a      	str	r2, [r3, #24]
 80057f8:	e005      	b.n	8005806 <USB_EPStartXfer+0x382>
    }
    else
    {
      len = ep->xfer_len;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	67bb      	str	r3, [r7, #120]	; 0x78
      ep->xfer_len = 0U;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2200      	movs	r2, #0
 8005804:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	7b1b      	ldrb	r3, [r3, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d153      	bne.n	80058b6 <USB_EPStartXfer+0x432>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	643b      	str	r3, [r7, #64]	; 0x40
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005818:	b29b      	uxth	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581e:	4413      	add	r3, r2
 8005820:	643b      	str	r3, [r7, #64]	; 0x40
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	00da      	lsls	r2, r3, #3
 8005828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582a:	4413      	add	r3, r2
 800582c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005834:	2b00      	cmp	r3, #0
 8005836:	d112      	bne.n	800585e <USB_EPStartXfer+0x3da>
 8005838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005842:	b29a      	uxth	r2, r3
 8005844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005856:	b29a      	uxth	r2, r3
 8005858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585a:	801a      	strh	r2, [r3, #0]
 800585c:	e10f      	b.n	8005a7e <USB_EPStartXfer+0x5fa>
 800585e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005860:	2b3e      	cmp	r3, #62	; 0x3e
 8005862:	d811      	bhi.n	8005888 <USB_EPStartXfer+0x404>
 8005864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	66fb      	str	r3, [r7, #108]	; 0x6c
 800586a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <USB_EPStartXfer+0x3f6>
 8005874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005876:	3301      	adds	r3, #1
 8005878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800587a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587c:	b29b      	uxth	r3, r3
 800587e:	029b      	lsls	r3, r3, #10
 8005880:	b29a      	uxth	r2, r3
 8005882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	e0fa      	b.n	8005a7e <USB_EPStartXfer+0x5fa>
 8005888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800588e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2b00      	cmp	r3, #0
 8005896:	d102      	bne.n	800589e <USB_EPStartXfer+0x41a>
 8005898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589a:	3b01      	subs	r3, #1
 800589c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800589e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	029b      	lsls	r3, r3, #10
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	e0e3      	b.n	8005a7e <USB_EPStartXfer+0x5fa>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d153      	bne.n	8005966 <USB_EPStartXfer+0x4e2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ce:	4413      	add	r3, r2
 80058d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	00da      	lsls	r2, r3, #3
 80058d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058da:	4413      	add	r3, r2
 80058dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058e0:	657b      	str	r3, [r7, #84]	; 0x54
 80058e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d112      	bne.n	800590e <USB_EPStartXfer+0x48a>
 80058e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005906:	b29a      	uxth	r2, r3
 8005908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800590a:	801a      	strh	r2, [r3, #0]
 800590c:	e045      	b.n	800599a <USB_EPStartXfer+0x516>
 800590e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005910:	2b3e      	cmp	r3, #62	; 0x3e
 8005912:	d811      	bhi.n	8005938 <USB_EPStartXfer+0x4b4>
 8005914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	66bb      	str	r3, [r7, #104]	; 0x68
 800591a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <USB_EPStartXfer+0x4a6>
 8005924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005926:	3301      	adds	r3, #1
 8005928:	66bb      	str	r3, [r7, #104]	; 0x68
 800592a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800592c:	b29b      	uxth	r3, r3
 800592e:	029b      	lsls	r3, r3, #10
 8005930:	b29a      	uxth	r2, r3
 8005932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	e030      	b.n	800599a <USB_EPStartXfer+0x516>
 8005938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	66bb      	str	r3, [r7, #104]	; 0x68
 800593e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <USB_EPStartXfer+0x4ca>
 8005948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800594a:	3b01      	subs	r3, #1
 800594c:	66bb      	str	r3, [r7, #104]	; 0x68
 800594e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005950:	b29b      	uxth	r3, r3
 8005952:	029b      	lsls	r3, r3, #10
 8005954:	b29b      	uxth	r3, r3
 8005956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800595a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800595e:	b29a      	uxth	r2, r3
 8005960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005962:	801a      	strh	r2, [r3, #0]
 8005964:	e019      	b.n	800599a <USB_EPStartXfer+0x516>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d115      	bne.n	800599a <USB_EPStartXfer+0x516>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	663b      	str	r3, [r7, #96]	; 0x60
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005978:	b29b      	uxth	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800597e:	4413      	add	r3, r2
 8005980:	663b      	str	r3, [r7, #96]	; 0x60
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	00da      	lsls	r2, r3, #3
 8005988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800598a:	4413      	add	r3, r2
 800598c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005994:	b29a      	uxth	r2, r3
 8005996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	653b      	str	r3, [r7, #80]	; 0x50
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d153      	bne.n	8005a4e <USB_EPStartXfer+0x5ca>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b6:	4413      	add	r3, r2
 80059b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	00da      	lsls	r2, r3, #3
 80059c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c2:	4413      	add	r3, r2
 80059c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059c8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d112      	bne.n	80059f6 <USB_EPStartXfer+0x572>
 80059d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059da:	b29a      	uxth	r2, r3
 80059dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f2:	801a      	strh	r2, [r3, #0]
 80059f4:	e043      	b.n	8005a7e <USB_EPStartXfer+0x5fa>
 80059f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f8:	2b3e      	cmp	r3, #62	; 0x3e
 80059fa:	d811      	bhi.n	8005a20 <USB_EPStartXfer+0x59c>
 80059fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	667b      	str	r3, [r7, #100]	; 0x64
 8005a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <USB_EPStartXfer+0x58e>
 8005a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a0e:	3301      	adds	r3, #1
 8005a10:	667b      	str	r3, [r7, #100]	; 0x64
 8005a12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	029b      	lsls	r3, r3, #10
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	e02e      	b.n	8005a7e <USB_EPStartXfer+0x5fa>
 8005a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	667b      	str	r3, [r7, #100]	; 0x64
 8005a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d102      	bne.n	8005a36 <USB_EPStartXfer+0x5b2>
 8005a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a32:	3b01      	subs	r3, #1
 8005a34:	667b      	str	r3, [r7, #100]	; 0x64
 8005a36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	029b      	lsls	r3, r3, #10
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	e017      	b.n	8005a7e <USB_EPStartXfer+0x5fa>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d113      	bne.n	8005a7e <USB_EPStartXfer+0x5fa>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a62:	4413      	add	r3, r2
 8005a64:	653b      	str	r3, [r7, #80]	; 0x50
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	00da      	lsls	r2, r3, #3
 8005a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a6e:	4413      	add	r3, r2
 8005a70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7c:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a94:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005a96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005a98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a9c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005a9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005aa0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005aa4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	441a      	add	r2, r3
 8005ab0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3780      	adds	r7, #128	; 0x80
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d020      	beq.n	8005b24 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af8:	81bb      	strh	r3, [r7, #12]
 8005afa:	89bb      	ldrh	r3, [r7, #12]
 8005afc:	f083 0310 	eor.w	r3, r3, #16
 8005b00:	81bb      	strh	r3, [r7, #12]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	441a      	add	r2, r3
 8005b0c:	89bb      	ldrh	r3, [r7, #12]
 8005b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8013      	strh	r3, [r2, #0]
 8005b22:	e01f      	b.n	8005b64 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	81fb      	strh	r3, [r7, #14]
 8005b3c:	89fb      	ldrh	r3, [r7, #14]
 8005b3e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b42:	81fb      	strh	r3, [r7, #14]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	441a      	add	r2, r3
 8005b4e:	89fb      	ldrh	r3, [r7, #14]
 8005b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b087      	sub	sp, #28
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	7b1b      	ldrb	r3, [r3, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f040 809d 	bne.w	8005cc0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d04c      	beq.n	8005c28 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	823b      	strh	r3, [r7, #16]
 8005b9c:	8a3b      	ldrh	r3, [r7, #16]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01b      	beq.n	8005bde <USB_EPClearStall+0x6c>
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbc:	81fb      	strh	r3, [r7, #14]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	441a      	add	r2, r3
 8005bc8:	89fb      	ldrh	r3, [r7, #14]
 8005bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	78db      	ldrb	r3, [r3, #3]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d06c      	beq.n	8005cc0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfc:	81bb      	strh	r3, [r7, #12]
 8005bfe:	89bb      	ldrh	r3, [r7, #12]
 8005c00:	f083 0320 	eor.w	r3, r3, #32
 8005c04:	81bb      	strh	r3, [r7, #12]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	441a      	add	r2, r3
 8005c10:	89bb      	ldrh	r3, [r7, #12]
 8005c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	8013      	strh	r3, [r2, #0]
 8005c26:	e04b      	b.n	8005cc0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	82fb      	strh	r3, [r7, #22]
 8005c36:	8afb      	ldrh	r3, [r7, #22]
 8005c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01b      	beq.n	8005c78 <USB_EPClearStall+0x106>
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c56:	82bb      	strh	r3, [r7, #20]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	441a      	add	r2, r3
 8005c62:	8abb      	ldrh	r3, [r7, #20]
 8005c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8e:	827b      	strh	r3, [r7, #18]
 8005c90:	8a7b      	ldrh	r3, [r7, #18]
 8005c92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c96:	827b      	strh	r3, [r7, #18]
 8005c98:	8a7b      	ldrh	r3, [r7, #18]
 8005c9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c9e:	827b      	strh	r3, [r7, #18]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	441a      	add	r2, r3
 8005caa:	8a7b      	ldrh	r3, [r7, #18]
 8005cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d103      	bne.n	8005ce8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2280      	movs	r2, #128	; 0x80
 8005ce4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005d08:	68fb      	ldr	r3, [r7, #12]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b08d      	sub	sp, #52	; 0x34
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	4611      	mov	r1, r2
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	80fb      	strh	r3, [r7, #6]
 8005d40:	4613      	mov	r3, r2
 8005d42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d44:	88bb      	ldrh	r3, [r7, #4]
 8005d46:	3301      	adds	r3, #1
 8005d48:	085b      	lsrs	r3, r3, #1
 8005d4a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d54:	88fa      	ldrh	r2, [r7, #6]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d64:	e01b      	b.n	8005d9e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	3301      	adds	r3, #1
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	3302      	adds	r3, #2
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	3301      	adds	r3, #1
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e0      	bne.n	8005d66 <USB_WritePMA+0x38>
  }
}
 8005da4:	bf00      	nop
 8005da6:	3734      	adds	r7, #52	; 0x34
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b08b      	sub	sp, #44	; 0x2c
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	4611      	mov	r1, r2
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	80fb      	strh	r3, [r7, #6]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005dc6:	88bb      	ldrh	r3, [r7, #4]
 8005dc8:	085b      	lsrs	r3, r3, #1
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dd6:	88fa      	ldrh	r2, [r7, #6]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
 8005de6:	e018      	b.n	8005e1a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	3302      	adds	r3, #2
 8005df4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3301      	adds	r3, #1
 8005e02:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3301      	adds	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	3b01      	subs	r3, #1
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e3      	bne.n	8005de8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005e20:	88bb      	ldrh	r3, [r7, #4]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	701a      	strb	r2, [r3, #0]
  }
}
 8005e3c:	bf00      	nop
 8005e3e:	372c      	adds	r7, #44	; 0x2c
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	460b      	mov	r3, r1
 8005e68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	4611      	mov	r1, r2
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	4798      	blx	r3
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
  }

  return USBD_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 ff10 	bl	8006cfe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005eec:	461a      	mov	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005efa:	f003 031f 	and.w	r3, r3, #31
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d00e      	beq.n	8005f20 <USBD_LL_SetupStage+0x5a>
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d302      	bcc.n	8005f0c <USBD_LL_SetupStage+0x46>
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d014      	beq.n	8005f34 <USBD_LL_SetupStage+0x6e>
 8005f0a:	e01d      	b.n	8005f48 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f9ef 	bl	80062f8 <USBD_StdDevReq>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1e:	e020      	b.n	8005f62 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fa53 	bl	80063d4 <USBD_StdItfReq>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	73fb      	strb	r3, [r7, #15]
      break;
 8005f32:	e016      	b.n	8005f62 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fa90 	bl	8006462 <USBD_StdEPReq>
 8005f42:	4603      	mov	r3, r0
 8005f44:	73fb      	strb	r3, [r7, #15]
      break;
 8005f46:	e00c      	b.n	8005f62 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f002 fe86 	bl	8008c68 <USBD_LL_StallEP>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f60:	bf00      	nop
  }

  return ret;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	460b      	mov	r3, r1
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f7a:	7afb      	ldrb	r3, [r7, #11]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d138      	bne.n	8005ff2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d14a      	bne.n	8006028 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d913      	bls.n	8005fc6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	bf28      	it	cs
 8005fb8:	4613      	movcs	r3, r2
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 ff14 	bl	8006dec <USBD_CtlContinueRx>
 8005fc4:	e030      	b.n	8006028 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d10b      	bne.n	8005fea <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 ff0f 	bl	8006e0e <USBD_CtlSendStatus>
 8005ff0:	e01a      	b.n	8006028 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d114      	bne.n	8006028 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00e      	beq.n	8006028 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	7afa      	ldrb	r2, [r7, #11]
 8006014:	4611      	mov	r1, r2
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	4798      	blx	r3
 800601a:	4603      	mov	r3, r0
 800601c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800601e:	7dfb      	ldrb	r3, [r7, #23]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006024:	7dfb      	ldrb	r3, [r7, #23]
 8006026:	e000      	b.n	800602a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	460b      	mov	r3, r1
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006040:	7afb      	ldrb	r3, [r7, #11]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d16b      	bne.n	800611e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3314      	adds	r3, #20
 800604a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006052:	2b02      	cmp	r3, #2
 8006054:	d156      	bne.n	8006104 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	429a      	cmp	r2, r3
 8006060:	d914      	bls.n	800608c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	1ad2      	subs	r2, r2, r3
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	461a      	mov	r2, r3
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fea6 	bl	8006dca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800607e:	2300      	movs	r3, #0
 8006080:	2200      	movs	r2, #0
 8006082:	2100      	movs	r1, #0
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f002 fe63 	bl	8008d50 <USBD_LL_PrepareReceive>
 800608a:	e03b      	b.n	8006104 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	429a      	cmp	r2, r3
 8006096:	d11c      	bne.n	80060d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d316      	bcc.n	80060d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d20f      	bcs.n	80060d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060b2:	2200      	movs	r2, #0
 80060b4:	2100      	movs	r1, #0
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fe87 	bl	8006dca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060c4:	2300      	movs	r3, #0
 80060c6:	2200      	movs	r2, #0
 80060c8:	2100      	movs	r1, #0
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f002 fe40 	bl	8008d50 <USBD_LL_PrepareReceive>
 80060d0:	e018      	b.n	8006104 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d10b      	bne.n	80060f6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060f6:	2180      	movs	r1, #128	; 0x80
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f002 fdb5 	bl	8008c68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fe98 	bl	8006e34 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800610a:	2b01      	cmp	r3, #1
 800610c:	d122      	bne.n	8006154 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff fe9a 	bl	8005e48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800611c:	e01a      	b.n	8006154 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b03      	cmp	r3, #3
 8006128:	d114      	bne.n	8006154 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	7afa      	ldrb	r2, [r7, #11]
 8006140:	4611      	mov	r1, r2
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	4798      	blx	r3
 8006146:	4603      	mov	r3, r0
 8006148:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	e000      	b.n	8006156 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800618e:	2303      	movs	r3, #3
 8006190:	e02f      	b.n	80061f2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00f      	beq.n	80061bc <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d009      	beq.n	80061bc <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6852      	ldr	r2, [r2, #4]
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	4611      	mov	r1, r2
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061bc:	2340      	movs	r3, #64	; 0x40
 80061be:	2200      	movs	r2, #0
 80061c0:	2100      	movs	r1, #0
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f002 fd36 	bl	8008c34 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2240      	movs	r2, #64	; 0x40
 80061d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80061d8:	2340      	movs	r3, #64	; 0x40
 80061da:	2200      	movs	r2, #0
 80061dc:	2180      	movs	r1, #128	; 0x80
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f002 fd28 	bl	8008c34 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2240      	movs	r2, #64	; 0x40
 80061ee:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006228:	b2da      	uxtb	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2204      	movs	r2, #4
 8006234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b04      	cmp	r3, #4
 8006258:	d106      	bne.n	8006268 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006260:	b2da      	uxtb	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006288:	2303      	movs	r3, #3
 800628a:	e012      	b.n	80062b2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b03      	cmp	r3, #3
 8006296:	d10b      	bne.n	80062b0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d005      	beq.n	80062b0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b087      	sub	sp, #28
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3301      	adds	r3, #1
 80062d0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062d8:	8a3b      	ldrh	r3, [r7, #16]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	b21a      	sxth	r2, r3
 80062de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	b21b      	sxth	r3, r3
 80062e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062e8:	89fb      	ldrh	r3, [r7, #14]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
	...

080062f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800630e:	2b20      	cmp	r3, #32
 8006310:	d004      	beq.n	800631c <USBD_StdDevReq+0x24>
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d002      	beq.n	800631c <USBD_StdDevReq+0x24>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <USBD_StdDevReq+0x38>
 800631a:	e050      	b.n	80063be <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	4798      	blx	r3
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
      break;
 800632e:	e04b      	b.n	80063c8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b09      	cmp	r3, #9
 8006336:	d83c      	bhi.n	80063b2 <USBD_StdDevReq+0xba>
 8006338:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <USBD_StdDevReq+0x48>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006395 	.word	0x08006395
 8006344:	080063a9 	.word	0x080063a9
 8006348:	080063b3 	.word	0x080063b3
 800634c:	0800639f 	.word	0x0800639f
 8006350:	080063b3 	.word	0x080063b3
 8006354:	08006373 	.word	0x08006373
 8006358:	08006369 	.word	0x08006369
 800635c:	080063b3 	.word	0x080063b3
 8006360:	0800638b 	.word	0x0800638b
 8006364:	0800637d 	.word	0x0800637d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f9d4 	bl	8006718 <USBD_GetDescriptor>
          break;
 8006370:	e024      	b.n	80063bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fb39 	bl	80069ec <USBD_SetAddress>
          break;
 800637a:	e01f      	b.n	80063bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fb78 	bl	8006a74 <USBD_SetConfig>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]
          break;
 8006388:	e018      	b.n	80063bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fc17 	bl	8006bc0 <USBD_GetConfig>
          break;
 8006392:	e013      	b.n	80063bc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fc47 	bl	8006c2a <USBD_GetStatus>
          break;
 800639c:	e00e      	b.n	80063bc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fc76 	bl	8006c92 <USBD_SetFeature>
          break;
 80063a6:	e009      	b.n	80063bc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fc85 	bl	8006cba <USBD_ClrFeature>
          break;
 80063b0:	e004      	b.n	80063bc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80063b2:	6839      	ldr	r1, [r7, #0]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fcdc 	bl	8006d72 <USBD_CtlError>
          break;
 80063ba:	bf00      	nop
      }
      break;
 80063bc:	e004      	b.n	80063c8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fcd6 	bl	8006d72 <USBD_CtlError>
      break;
 80063c6:	bf00      	nop
  }

  return ret;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop

080063d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d003      	beq.n	80063f6 <USBD_StdItfReq+0x22>
 80063ee:	2b40      	cmp	r3, #64	; 0x40
 80063f0:	d001      	beq.n	80063f6 <USBD_StdItfReq+0x22>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d12b      	bne.n	800644e <USBD_StdItfReq+0x7a>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	2b02      	cmp	r3, #2
 8006402:	d81d      	bhi.n	8006440 <USBD_StdItfReq+0x6c>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	889b      	ldrh	r3, [r3, #4]
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d813      	bhi.n	8006436 <USBD_StdItfReq+0x62>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	4798      	blx	r3
 800641c:	4603      	mov	r3, r0
 800641e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	88db      	ldrh	r3, [r3, #6]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d110      	bne.n	800644a <USBD_StdItfReq+0x76>
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10d      	bne.n	800644a <USBD_StdItfReq+0x76>
            {
              (void)USBD_CtlSendStatus(pdev);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fced 	bl	8006e0e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006434:	e009      	b.n	800644a <USBD_StdItfReq+0x76>
            USBD_CtlError(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fc9a 	bl	8006d72 <USBD_CtlError>
          break;
 800643e:	e004      	b.n	800644a <USBD_StdItfReq+0x76>

        default:
          USBD_CtlError(pdev, req);
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fc95 	bl	8006d72 <USBD_CtlError>
          break;
 8006448:	e000      	b.n	800644c <USBD_StdItfReq+0x78>
          break;
 800644a:	bf00      	nop
      }
      break;
 800644c:	e004      	b.n	8006458 <USBD_StdItfReq+0x84>

    default:
      USBD_CtlError(pdev, req);
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fc8e 	bl	8006d72 <USBD_CtlError>
      break;
 8006456:	bf00      	nop
  }

  return ret;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	889b      	ldrh	r3, [r3, #4]
 8006474:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800647e:	2b20      	cmp	r3, #32
 8006480:	d004      	beq.n	800648c <USBD_StdEPReq+0x2a>
 8006482:	2b40      	cmp	r3, #64	; 0x40
 8006484:	d002      	beq.n	800648c <USBD_StdEPReq+0x2a>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <USBD_StdEPReq+0x3e>
 800648a:	e13a      	b.n	8006702 <USBD_StdEPReq+0x2a0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	4798      	blx	r3
 800649a:	4603      	mov	r3, r0
 800649c:	73fb      	strb	r3, [r7, #15]
      break;
 800649e:	e135      	b.n	800670c <USBD_StdEPReq+0x2aa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	785b      	ldrb	r3, [r3, #1]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d03f      	beq.n	8006528 <USBD_StdEPReq+0xc6>
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d002      	beq.n	80064b2 <USBD_StdEPReq+0x50>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d07b      	beq.n	80065a8 <USBD_StdEPReq+0x146>
 80064b0:	e121      	b.n	80066f6 <USBD_StdEPReq+0x294>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d002      	beq.n	80064c4 <USBD_StdEPReq+0x62>
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d015      	beq.n	80064ee <USBD_StdEPReq+0x8c>
 80064c2:	e02b      	b.n	800651c <USBD_StdEPReq+0xba>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00c      	beq.n	80064e4 <USBD_StdEPReq+0x82>
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	2b80      	cmp	r3, #128	; 0x80
 80064ce:	d009      	beq.n	80064e4 <USBD_StdEPReq+0x82>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f002 fbc7 	bl	8008c68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064da:	2180      	movs	r1, #128	; 0x80
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f002 fbc3 	bl	8008c68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064e2:	e020      	b.n	8006526 <USBD_StdEPReq+0xc4>
                USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fc43 	bl	8006d72 <USBD_CtlError>
              break;
 80064ec:	e01b      	b.n	8006526 <USBD_StdEPReq+0xc4>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	885b      	ldrh	r3, [r3, #2]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10e      	bne.n	8006514 <USBD_StdEPReq+0xb2>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <USBD_StdEPReq+0xb2>
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d008      	beq.n	8006514 <USBD_StdEPReq+0xb2>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	88db      	ldrh	r3, [r3, #6]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d104      	bne.n	8006514 <USBD_StdEPReq+0xb2>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800650a:	7bbb      	ldrb	r3, [r7, #14]
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f002 fbaa 	bl	8008c68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fc7a 	bl	8006e0e <USBD_CtlSendStatus>

              break;
 800651a:	e004      	b.n	8006526 <USBD_StdEPReq+0xc4>

            default:
              USBD_CtlError(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fc27 	bl	8006d72 <USBD_CtlError>
              break;
 8006524:	bf00      	nop
          }
          break;
 8006526:	e0eb      	b.n	8006700 <USBD_StdEPReq+0x29e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d002      	beq.n	800653a <USBD_StdEPReq+0xd8>
 8006534:	2b03      	cmp	r3, #3
 8006536:	d015      	beq.n	8006564 <USBD_StdEPReq+0x102>
 8006538:	e02f      	b.n	800659a <USBD_StdEPReq+0x138>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800653a:	7bbb      	ldrb	r3, [r7, #14]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00c      	beq.n	800655a <USBD_StdEPReq+0xf8>
 8006540:	7bbb      	ldrb	r3, [r7, #14]
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d009      	beq.n	800655a <USBD_StdEPReq+0xf8>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006546:	7bbb      	ldrb	r3, [r7, #14]
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f002 fb8c 	bl	8008c68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006550:	2180      	movs	r1, #128	; 0x80
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f002 fb88 	bl	8008c68 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006558:	e025      	b.n	80065a6 <USBD_StdEPReq+0x144>
                USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fc08 	bl	8006d72 <USBD_CtlError>
              break;
 8006562:	e020      	b.n	80065a6 <USBD_StdEPReq+0x144>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	885b      	ldrh	r3, [r3, #2]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d11b      	bne.n	80065a4 <USBD_StdEPReq+0x142>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006572:	2b00      	cmp	r3, #0
 8006574:	d004      	beq.n	8006580 <USBD_StdEPReq+0x11e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006576:	7bbb      	ldrb	r3, [r7, #14]
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f002 fb87 	bl	8008c8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fc44 	bl	8006e0e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006598:	e004      	b.n	80065a4 <USBD_StdEPReq+0x142>

            default:
              USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fbe8 	bl	8006d72 <USBD_CtlError>
              break;
 80065a2:	e000      	b.n	80065a6 <USBD_StdEPReq+0x144>
              break;
 80065a4:	bf00      	nop
          }
          break;
 80065a6:	e0ab      	b.n	8006700 <USBD_StdEPReq+0x29e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d002      	beq.n	80065ba <USBD_StdEPReq+0x158>
 80065b4:	2b03      	cmp	r3, #3
 80065b6:	d032      	beq.n	800661e <USBD_StdEPReq+0x1bc>
 80065b8:	e097      	b.n	80066ea <USBD_StdEPReq+0x288>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d007      	beq.n	80065d0 <USBD_StdEPReq+0x16e>
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
 80065c2:	2b80      	cmp	r3, #128	; 0x80
 80065c4:	d004      	beq.n	80065d0 <USBD_StdEPReq+0x16e>
              {
                USBD_CtlError(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fbd2 	bl	8006d72 <USBD_CtlError>
                break;
 80065ce:	e091      	b.n	80066f4 <USBD_StdEPReq+0x292>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	da0b      	bge.n	80065f0 <USBD_StdEPReq+0x18e>
 80065d8:	7bbb      	ldrb	r3, [r7, #14]
 80065da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	3310      	adds	r3, #16
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	4413      	add	r3, r2
 80065ec:	3304      	adds	r3, #4
 80065ee:	e00b      	b.n	8006608 <USBD_StdEPReq+0x1a6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	4413      	add	r3, r2
 8006606:	3304      	adds	r3, #4
 8006608:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2202      	movs	r2, #2
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fbbc 	bl	8006d94 <USBD_CtlSendData>
              break;
 800661c:	e06a      	b.n	80066f4 <USBD_StdEPReq+0x292>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800661e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006622:	2b00      	cmp	r3, #0
 8006624:	da11      	bge.n	800664a <USBD_StdEPReq+0x1e8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	f003 020f 	and.w	r2, r3, #15
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	4613      	mov	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	440b      	add	r3, r1
 8006638:	3324      	adds	r3, #36	; 0x24
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d117      	bne.n	8006670 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fb95 	bl	8006d72 <USBD_CtlError>
                  break;
 8006648:	e054      	b.n	80066f4 <USBD_StdEPReq+0x292>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	f003 020f 	and.w	r2, r3, #15
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d104      	bne.n	8006670 <USBD_StdEPReq+0x20e>
                {
                  USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fb82 	bl	8006d72 <USBD_CtlError>
                  break;
 800666e:	e041      	b.n	80066f4 <USBD_StdEPReq+0x292>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006670:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006674:	2b00      	cmp	r3, #0
 8006676:	da0b      	bge.n	8006690 <USBD_StdEPReq+0x22e>
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	3310      	adds	r3, #16
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	4413      	add	r3, r2
 800668c:	3304      	adds	r3, #4
 800668e:	e00b      	b.n	80066a8 <USBD_StdEPReq+0x246>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	4413      	add	r3, r2
 80066a6:	3304      	adds	r3, #4
 80066a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066aa:	7bbb      	ldrb	r3, [r7, #14]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <USBD_StdEPReq+0x254>
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	2b80      	cmp	r3, #128	; 0x80
 80066b4:	d103      	bne.n	80066be <USBD_StdEPReq+0x25c>
              {
                pep->status = 0x0000U;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	e00e      	b.n	80066dc <USBD_StdEPReq+0x27a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066be:	7bbb      	ldrb	r3, [r7, #14]
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f002 faf6 	bl	8008cb4 <USBD_LL_IsStallEP>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <USBD_StdEPReq+0x274>
              {
                pep->status = 0x0001U;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2201      	movs	r2, #1
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e002      	b.n	80066dc <USBD_StdEPReq+0x27a>
              }
              else
              {
                pep->status = 0x0000U;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2202      	movs	r2, #2
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fb56 	bl	8006d94 <USBD_CtlSendData>
              break;
 80066e8:	e004      	b.n	80066f4 <USBD_StdEPReq+0x292>

            default:
              USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fb40 	bl	8006d72 <USBD_CtlError>
              break;
 80066f2:	bf00      	nop
          }
          break;
 80066f4:	e004      	b.n	8006700 <USBD_StdEPReq+0x29e>

        default:
          USBD_CtlError(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fb3a 	bl	8006d72 <USBD_CtlError>
          break;
 80066fe:	bf00      	nop
      }
      break;
 8006700:	e004      	b.n	800670c <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fb34 	bl	8006d72 <USBD_CtlError>
      break;
 800670a:	bf00      	nop
  }

  return ret;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	885b      	ldrh	r3, [r3, #2]
 8006732:	0a1b      	lsrs	r3, r3, #8
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	2b06      	cmp	r3, #6
 800673a:	f200 8128 	bhi.w	800698e <USBD_GetDescriptor+0x276>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <USBD_GetDescriptor+0x2c>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006761 	.word	0x08006761
 8006748:	08006779 	.word	0x08006779
 800674c:	080067b9 	.word	0x080067b9
 8006750:	0800698f 	.word	0x0800698f
 8006754:	0800698f 	.word	0x0800698f
 8006758:	0800692f 	.word	0x0800692f
 800675c:	0800695b 	.word	0x0800695b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	7c12      	ldrb	r2, [r2, #16]
 800676c:	f107 0108 	add.w	r1, r7, #8
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
 8006774:	60f8      	str	r0, [r7, #12]
      break;
 8006776:	e112      	b.n	800699e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	7c1b      	ldrb	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10d      	bne.n	800679c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	f107 0208 	add.w	r2, r7, #8
 800678c:	4610      	mov	r0, r2
 800678e:	4798      	blx	r3
 8006790:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3301      	adds	r3, #1
 8006796:	2202      	movs	r2, #2
 8006798:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800679a:	e100      	b.n	800699e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	f107 0208 	add.w	r2, r7, #8
 80067a8:	4610      	mov	r0, r2
 80067aa:	4798      	blx	r3
 80067ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3301      	adds	r3, #1
 80067b2:	2202      	movs	r2, #2
 80067b4:	701a      	strb	r2, [r3, #0]
      break;
 80067b6:	e0f2      	b.n	800699e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	885b      	ldrh	r3, [r3, #2]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b05      	cmp	r3, #5
 80067c0:	f200 80ac 	bhi.w	800691c <USBD_GetDescriptor+0x204>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <USBD_GetDescriptor+0xb4>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067e5 	.word	0x080067e5
 80067d0:	08006819 	.word	0x08006819
 80067d4:	0800684d 	.word	0x0800684d
 80067d8:	08006881 	.word	0x08006881
 80067dc:	080068b5 	.word	0x080068b5
 80067e0:	080068e9 	.word	0x080068e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	7c12      	ldrb	r2, [r2, #16]
 80067fc:	f107 0108 	add.w	r1, r7, #8
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
 8006804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006806:	e091      	b.n	800692c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fab1 	bl	8006d72 <USBD_CtlError>
            err++;
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	3301      	adds	r3, #1
 8006814:	72fb      	strb	r3, [r7, #11]
          break;
 8006816:	e089      	b.n	800692c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00b      	beq.n	800683c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	7c12      	ldrb	r2, [r2, #16]
 8006830:	f107 0108 	add.w	r1, r7, #8
 8006834:	4610      	mov	r0, r2
 8006836:	4798      	blx	r3
 8006838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800683a:	e077      	b.n	800692c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa97 	bl	8006d72 <USBD_CtlError>
            err++;
 8006844:	7afb      	ldrb	r3, [r7, #11]
 8006846:	3301      	adds	r3, #1
 8006848:	72fb      	strb	r3, [r7, #11]
          break;
 800684a:	e06f      	b.n	800692c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	7c12      	ldrb	r2, [r2, #16]
 8006864:	f107 0108 	add.w	r1, r7, #8
 8006868:	4610      	mov	r0, r2
 800686a:	4798      	blx	r3
 800686c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800686e:	e05d      	b.n	800692c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fa7d 	bl	8006d72 <USBD_CtlError>
            err++;
 8006878:	7afb      	ldrb	r3, [r7, #11]
 800687a:	3301      	adds	r3, #1
 800687c:	72fb      	strb	r3, [r7, #11]
          break;
 800687e:	e055      	b.n	800692c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	7c12      	ldrb	r2, [r2, #16]
 8006898:	f107 0108 	add.w	r1, r7, #8
 800689c:	4610      	mov	r0, r2
 800689e:	4798      	blx	r3
 80068a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068a2:	e043      	b.n	800692c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa63 	bl	8006d72 <USBD_CtlError>
            err++;
 80068ac:	7afb      	ldrb	r3, [r7, #11]
 80068ae:	3301      	adds	r3, #1
 80068b0:	72fb      	strb	r3, [r7, #11]
          break;
 80068b2:	e03b      	b.n	800692c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	7c12      	ldrb	r2, [r2, #16]
 80068cc:	f107 0108 	add.w	r1, r7, #8
 80068d0:	4610      	mov	r0, r2
 80068d2:	4798      	blx	r3
 80068d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068d6:	e029      	b.n	800692c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa49 	bl	8006d72 <USBD_CtlError>
            err++;
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	3301      	adds	r3, #1
 80068e4:	72fb      	strb	r3, [r7, #11]
          break;
 80068e6:	e021      	b.n	800692c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	7c12      	ldrb	r2, [r2, #16]
 8006900:	f107 0108 	add.w	r1, r7, #8
 8006904:	4610      	mov	r0, r2
 8006906:	4798      	blx	r3
 8006908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800690a:	e00f      	b.n	800692c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa2f 	bl	8006d72 <USBD_CtlError>
            err++;
 8006914:	7afb      	ldrb	r3, [r7, #11]
 8006916:	3301      	adds	r3, #1
 8006918:	72fb      	strb	r3, [r7, #11]
          break;
 800691a:	e007      	b.n	800692c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa27 	bl	8006d72 <USBD_CtlError>
          err++;
 8006924:	7afb      	ldrb	r3, [r7, #11]
 8006926:	3301      	adds	r3, #1
 8006928:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800692a:	bf00      	nop
      }
      break;
 800692c:	e037      	b.n	800699e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	7c1b      	ldrb	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	f107 0208 	add.w	r2, r7, #8
 8006942:	4610      	mov	r0, r2
 8006944:	4798      	blx	r3
 8006946:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006948:	e029      	b.n	800699e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fa10 	bl	8006d72 <USBD_CtlError>
        err++;
 8006952:	7afb      	ldrb	r3, [r7, #11]
 8006954:	3301      	adds	r3, #1
 8006956:	72fb      	strb	r3, [r7, #11]
      break;
 8006958:	e021      	b.n	800699e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	7c1b      	ldrb	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10d      	bne.n	800697e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	f107 0208 	add.w	r2, r7, #8
 800696e:	4610      	mov	r0, r2
 8006970:	4798      	blx	r3
 8006972:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3301      	adds	r3, #1
 8006978:	2207      	movs	r2, #7
 800697a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800697c:	e00f      	b.n	800699e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f9f6 	bl	8006d72 <USBD_CtlError>
        err++;
 8006986:	7afb      	ldrb	r3, [r7, #11]
 8006988:	3301      	adds	r3, #1
 800698a:	72fb      	strb	r3, [r7, #11]
      break;
 800698c:	e007      	b.n	800699e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f9ee 	bl	8006d72 <USBD_CtlError>
      err++;
 8006996:	7afb      	ldrb	r3, [r7, #11]
 8006998:	3301      	adds	r3, #1
 800699a:	72fb      	strb	r3, [r7, #11]
      break;
 800699c:	bf00      	nop
  }

  if (err != 0U)
 800699e:	7afb      	ldrb	r3, [r7, #11]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d11e      	bne.n	80069e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	88db      	ldrh	r3, [r3, #6]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d016      	beq.n	80069da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80069ac:	893b      	ldrh	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00e      	beq.n	80069d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	88da      	ldrh	r2, [r3, #6]
 80069b6:	893b      	ldrh	r3, [r7, #8]
 80069b8:	4293      	cmp	r3, r2
 80069ba:	bf28      	it	cs
 80069bc:	4613      	movcs	r3, r2
 80069be:	b29b      	uxth	r3, r3
 80069c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80069c2:	893b      	ldrh	r3, [r7, #8]
 80069c4:	461a      	mov	r2, r3
 80069c6:	68f9      	ldr	r1, [r7, #12]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f9e3 	bl	8006d94 <USBD_CtlSendData>
 80069ce:	e009      	b.n	80069e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f9cd 	bl	8006d72 <USBD_CtlError>
 80069d8:	e004      	b.n	80069e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fa17 	bl	8006e0e <USBD_CtlSendStatus>
 80069e0:	e000      	b.n	80069e4 <USBD_GetDescriptor+0x2cc>
    return;
 80069e2:	bf00      	nop
  }
}
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop

080069ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	889b      	ldrh	r3, [r3, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d131      	bne.n	8006a62 <USBD_SetAddress+0x76>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	88db      	ldrh	r3, [r3, #6]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d12d      	bne.n	8006a62 <USBD_SetAddress+0x76>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	885b      	ldrh	r3, [r3, #2]
 8006a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a0c:	d829      	bhi.n	8006a62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	885b      	ldrh	r3, [r3, #2]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d104      	bne.n	8006a30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f9a2 	bl	8006d72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2e:	e01c      	b.n	8006a6a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	7bfa      	ldrb	r2, [r7, #15]
 8006a34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f002 f95f 	bl	8008d00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f9e3 	bl	8006e0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d004      	beq.n	8006a58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a56:	e008      	b.n	8006a6a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a60:	e003      	b.n	8006a6a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f984 	bl	8006d72 <USBD_CtlError>
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	885b      	ldrh	r3, [r3, #2]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	4b4c      	ldr	r3, [pc, #304]	; (8006bbc <USBD_SetConfig+0x148>)
 8006a8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a8c:	4b4b      	ldr	r3, [pc, #300]	; (8006bbc <USBD_SetConfig+0x148>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d905      	bls.n	8006aa0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f96b 	bl	8006d72 <USBD_CtlError>
    return USBD_FAIL;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e088      	b.n	8006bb2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d002      	beq.n	8006ab2 <USBD_SetConfig+0x3e>
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d025      	beq.n	8006afc <USBD_SetConfig+0x88>
 8006ab0:	e071      	b.n	8006b96 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006ab2:	4b42      	ldr	r3, [pc, #264]	; (8006bbc <USBD_SetConfig+0x148>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d01c      	beq.n	8006af4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006aba:	4b40      	ldr	r3, [pc, #256]	; (8006bbc <USBD_SetConfig+0x148>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ac4:	4b3d      	ldr	r3, [pc, #244]	; (8006bbc <USBD_SetConfig+0x148>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff f9c7 	bl	8005e5e <USBD_SetClassConfig>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d004      	beq.n	8006ae4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f948 	bl	8006d72 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ae2:	e065      	b.n	8006bb0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f992 	bl	8006e0e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2203      	movs	r2, #3
 8006aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006af2:	e05d      	b.n	8006bb0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f98a 	bl	8006e0e <USBD_CtlSendStatus>
      break;
 8006afa:	e059      	b.n	8006bb0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006afc:	4b2f      	ldr	r3, [pc, #188]	; (8006bbc <USBD_SetConfig+0x148>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d112      	bne.n	8006b2a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006b0c:	4b2b      	ldr	r3, [pc, #172]	; (8006bbc <USBD_SetConfig+0x148>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b16:	4b29      	ldr	r3, [pc, #164]	; (8006bbc <USBD_SetConfig+0x148>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff f9ba 	bl	8005e96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f973 	bl	8006e0e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b28:	e042      	b.n	8006bb0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006b2a:	4b24      	ldr	r3, [pc, #144]	; (8006bbc <USBD_SetConfig+0x148>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d02a      	beq.n	8006b8e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f7ff f9a8 	bl	8005e96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b46:	4b1d      	ldr	r3, [pc, #116]	; (8006bbc <USBD_SetConfig+0x148>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b50:	4b1a      	ldr	r3, [pc, #104]	; (8006bbc <USBD_SetConfig+0x148>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff f981 	bl	8005e5e <USBD_SetClassConfig>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00f      	beq.n	8006b86 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f902 	bl	8006d72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff f98d 	bl	8005e96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b84:	e014      	b.n	8006bb0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f941 	bl	8006e0e <USBD_CtlSendStatus>
      break;
 8006b8c:	e010      	b.n	8006bb0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f93d 	bl	8006e0e <USBD_CtlSendStatus>
      break;
 8006b94:	e00c      	b.n	8006bb0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f8ea 	bl	8006d72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b9e:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <USBD_SetConfig+0x148>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff f976 	bl	8005e96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006baa:	2303      	movs	r3, #3
 8006bac:	73fb      	strb	r3, [r7, #15]
      break;
 8006bae:	bf00      	nop
  }

  return ret;
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	200001f4 	.word	0x200001f4

08006bc0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	88db      	ldrh	r3, [r3, #6]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d004      	beq.n	8006bdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f8cc 	bl	8006d72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006bda:	e022      	b.n	8006c22 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	db17      	blt.n	8006c18 <USBD_GetConfig+0x58>
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	dd02      	ble.n	8006bf2 <USBD_GetConfig+0x32>
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d00b      	beq.n	8006c08 <USBD_GetConfig+0x48>
 8006bf0:	e012      	b.n	8006c18 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f8c7 	bl	8006d94 <USBD_CtlSendData>
        break;
 8006c06:	e00c      	b.n	8006c22 <USBD_GetConfig+0x62>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f8bf 	bl	8006d94 <USBD_CtlSendData>
        break;
 8006c16:	e004      	b.n	8006c22 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f8a9 	bl	8006d72 <USBD_CtlError>
        break;
 8006c20:	bf00      	nop
}
 8006c22:	bf00      	nop
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d81e      	bhi.n	8006c80 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	88db      	ldrh	r3, [r3, #6]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d004      	beq.n	8006c54 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f890 	bl	8006d72 <USBD_CtlError>
        break;
 8006c52:	e01a      	b.n	8006c8a <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f043 0202 	orr.w	r2, r3, #2
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	330c      	adds	r3, #12
 8006c74:	2202      	movs	r2, #2
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f88b 	bl	8006d94 <USBD_CtlSendData>
      break;
 8006c7e:	e004      	b.n	8006c8a <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f875 	bl	8006d72 <USBD_CtlError>
      break;
 8006c88:	bf00      	nop
  }
}
 8006c8a:	bf00      	nop
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b082      	sub	sp, #8
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	885b      	ldrh	r3, [r3, #2]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d106      	bne.n	8006cb2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8ae 	bl	8006e0e <USBD_CtlSendStatus>
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b082      	sub	sp, #8
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d80b      	bhi.n	8006cea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d10c      	bne.n	8006cf4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f893 	bl	8006e0e <USBD_CtlSendStatus>
      }
      break;
 8006ce8:	e004      	b.n	8006cf4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f840 	bl	8006d72 <USBD_CtlError>
      break;
 8006cf2:	e000      	b.n	8006cf6 <USBD_ClrFeature+0x3c>
      break;
 8006cf4:	bf00      	nop
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	781a      	ldrb	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3301      	adds	r3, #1
 8006d18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	781a      	ldrb	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3301      	adds	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7ff fac6 	bl	80062ba <SWAPBYTE>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	461a      	mov	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f7ff fab9 	bl	80062ba <SWAPBYTE>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff faac 	bl	80062ba <SWAPBYTE>
 8006d62:	4603      	mov	r3, r0
 8006d64:	461a      	mov	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	80da      	strh	r2, [r3, #6]
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d7c:	2180      	movs	r1, #128	; 0x80
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 ff72 	bl	8008c68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d84:	2100      	movs	r1, #0
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 ff6e 	bl	8008c68 <USBD_LL_StallEP>
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	2100      	movs	r1, #0
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f001 ffb3 	bl	8008d26 <USBD_LL_Transmit>

  return USBD_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	2100      	movs	r1, #0
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f001 ffa2 	bl	8008d26 <USBD_LL_Transmit>

  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f001 ffa6 	bl	8008d50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2204      	movs	r2, #4
 8006e1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2200      	movs	r2, #0
 8006e22:	2100      	movs	r1, #0
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 ff7e 	bl	8008d26 <USBD_LL_Transmit>

  return USBD_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2205      	movs	r2, #5
 8006e40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e44:	2300      	movs	r3, #0
 8006e46:	2200      	movs	r2, #0
 8006e48:	2100      	movs	r1, #0
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 ff80 	bl	8008d50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08a      	sub	sp, #40	; 0x28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8006e64:	2300      	movs	r3, #0
 8006e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2bff      	cmp	r3, #255	; 0xff
 8006e76:	d000      	beq.n	8006e7a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8006e78:	e04a      	b.n	8006f10 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	3302      	adds	r3, #2
 8006e7e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	461a      	mov	r2, r3
 8006e88:	f640 4301 	movw	r3, #3073	; 0xc01
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d000      	beq.n	8006e92 <PeerToPeer_Event_Handler+0x36>
          break;
 8006e90:	e03d      	b.n	8006f0e <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	3302      	adds	r3, #2
 8006e96:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	885b      	ldrh	r3, [r3, #2]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	4b1e      	ldr	r3, [pc, #120]	; (8006f1c <PeerToPeer_Event_Handler+0xc0>)
 8006ea2:	889b      	ldrh	r3, [r3, #4]
 8006ea4:	3302      	adds	r3, #2
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d118      	bne.n	8006edc <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	7a1b      	ldrb	r3, [r3, #8]
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d007      	beq.n	8006ecc <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8006ec0:	f107 0308 	add.w	r3, r7, #8
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fb f9fb 	bl	80022c0 <P2PS_STM_App_Notification>
        break;
 8006eca:	e01f      	b.n	8006f0c <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8006ed0:	f107 0308 	add.w	r3, r7, #8
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fb f9f3 	bl	80022c0 <P2PS_STM_App_Notification>
        break;
 8006eda:	e017      	b.n	8006f0c <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	885b      	ldrh	r3, [r3, #2]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <PeerToPeer_Event_Handler+0xc0>)
 8006ee6:	885b      	ldrh	r3, [r3, #2]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d10e      	bne.n	8006f0c <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	88db      	ldrh	r3, [r3, #6]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	3308      	adds	r3, #8
 8006f00:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8006f02:	f107 0308 	add.w	r3, r7, #8
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fb f9da 	bl	80022c0 <P2PS_STM_App_Notification>
        break;
 8006f0c:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8006f0e:	bf00      	nop
  }

  return(return_value);
 8006f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8006f14:	4618      	mov	r0, r3
 8006f16:	3728      	adds	r7, #40	; 0x28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20000160 	.word	0x20000160

08006f20 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08a      	sub	sp, #40	; 0x28
 8006f24:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8006f26:	484a      	ldr	r0, [pc, #296]	; (8007050 <P2PS_STM_Init+0x130>)
 8006f28:	f000 f95a 	bl	80071e0 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8006f2c:	238f      	movs	r3, #143	; 0x8f
 8006f2e:	703b      	strb	r3, [r7, #0]
 8006f30:	23e5      	movs	r3, #229	; 0xe5
 8006f32:	707b      	strb	r3, [r7, #1]
 8006f34:	23b3      	movs	r3, #179	; 0xb3
 8006f36:	70bb      	strb	r3, [r7, #2]
 8006f38:	23d5      	movs	r3, #213	; 0xd5
 8006f3a:	70fb      	strb	r3, [r7, #3]
 8006f3c:	232e      	movs	r3, #46	; 0x2e
 8006f3e:	713b      	strb	r3, [r7, #4]
 8006f40:	237f      	movs	r3, #127	; 0x7f
 8006f42:	717b      	strb	r3, [r7, #5]
 8006f44:	234a      	movs	r3, #74	; 0x4a
 8006f46:	71bb      	strb	r3, [r7, #6]
 8006f48:	2398      	movs	r3, #152	; 0x98
 8006f4a:	71fb      	strb	r3, [r7, #7]
 8006f4c:	232a      	movs	r3, #42	; 0x2a
 8006f4e:	723b      	strb	r3, [r7, #8]
 8006f50:	2348      	movs	r3, #72	; 0x48
 8006f52:	727b      	strb	r3, [r7, #9]
 8006f54:	237a      	movs	r3, #122	; 0x7a
 8006f56:	72bb      	strb	r3, [r7, #10]
 8006f58:	23cc      	movs	r3, #204	; 0xcc
 8006f5a:	72fb      	strb	r3, [r7, #11]
 8006f5c:	2340      	movs	r3, #64	; 0x40
 8006f5e:	733b      	strb	r3, [r7, #12]
 8006f60:	23fe      	movs	r3, #254	; 0xfe
 8006f62:	737b      	strb	r3, [r7, #13]
 8006f64:	2300      	movs	r3, #0
 8006f66:	73bb      	strb	r3, [r7, #14]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8006f6c:	4639      	mov	r1, r7
 8006f6e:	4b39      	ldr	r3, [pc, #228]	; (8007054 <P2PS_STM_Init+0x134>)
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	2308      	movs	r3, #8
 8006f74:	2201      	movs	r2, #1
 8006f76:	2002      	movs	r0, #2
 8006f78:	f000 fcc2 	bl	8007900 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8006f7c:	2319      	movs	r3, #25
 8006f7e:	703b      	strb	r3, [r7, #0]
 8006f80:	23ed      	movs	r3, #237	; 0xed
 8006f82:	707b      	strb	r3, [r7, #1]
 8006f84:	2382      	movs	r3, #130	; 0x82
 8006f86:	70bb      	strb	r3, [r7, #2]
 8006f88:	23ae      	movs	r3, #174	; 0xae
 8006f8a:	70fb      	strb	r3, [r7, #3]
 8006f8c:	23ed      	movs	r3, #237	; 0xed
 8006f8e:	713b      	strb	r3, [r7, #4]
 8006f90:	2321      	movs	r3, #33	; 0x21
 8006f92:	717b      	strb	r3, [r7, #5]
 8006f94:	234c      	movs	r3, #76	; 0x4c
 8006f96:	71bb      	strb	r3, [r7, #6]
 8006f98:	239d      	movs	r3, #157	; 0x9d
 8006f9a:	71fb      	strb	r3, [r7, #7]
 8006f9c:	2341      	movs	r3, #65	; 0x41
 8006f9e:	723b      	strb	r3, [r7, #8]
 8006fa0:	2345      	movs	r3, #69	; 0x45
 8006fa2:	727b      	strb	r3, [r7, #9]
 8006fa4:	2322      	movs	r3, #34	; 0x22
 8006fa6:	72bb      	strb	r3, [r7, #10]
 8006fa8:	238e      	movs	r3, #142	; 0x8e
 8006faa:	72fb      	strb	r3, [r7, #11]
 8006fac:	2341      	movs	r3, #65	; 0x41
 8006fae:	733b      	strb	r3, [r7, #12]
 8006fb0:	23fe      	movs	r3, #254	; 0xfe
 8006fb2:	737b      	strb	r3, [r7, #13]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73bb      	strb	r3, [r7, #14]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006fbc:	4b25      	ldr	r3, [pc, #148]	; (8007054 <P2PS_STM_Init+0x134>)
 8006fbe:	8818      	ldrh	r0, [r3, #0]
 8006fc0:	463a      	mov	r2, r7
 8006fc2:	4b25      	ldr	r3, [pc, #148]	; (8007058 <P2PS_STM_Init+0x138>)
 8006fc4:	9305      	str	r3, [sp, #20]
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	9304      	str	r3, [sp, #16]
 8006fca:	230a      	movs	r3, #10
 8006fcc:	9303      	str	r3, [sp, #12]
 8006fce:	2301      	movs	r3, #1
 8006fd0:	9302      	str	r3, [sp, #8]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	9301      	str	r3, [sp, #4]
 8006fd6:	2306      	movs	r3, #6
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	2302      	movs	r3, #2
 8006fdc:	2102      	movs	r1, #2
 8006fde:	f000 fd3e 	bl	8007a5e <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8006fe2:	2319      	movs	r3, #25
 8006fe4:	703b      	strb	r3, [r7, #0]
 8006fe6:	23ed      	movs	r3, #237	; 0xed
 8006fe8:	707b      	strb	r3, [r7, #1]
 8006fea:	2382      	movs	r3, #130	; 0x82
 8006fec:	70bb      	strb	r3, [r7, #2]
 8006fee:	23ae      	movs	r3, #174	; 0xae
 8006ff0:	70fb      	strb	r3, [r7, #3]
 8006ff2:	23ed      	movs	r3, #237	; 0xed
 8006ff4:	713b      	strb	r3, [r7, #4]
 8006ff6:	2321      	movs	r3, #33	; 0x21
 8006ff8:	717b      	strb	r3, [r7, #5]
 8006ffa:	234c      	movs	r3, #76	; 0x4c
 8006ffc:	71bb      	strb	r3, [r7, #6]
 8006ffe:	239d      	movs	r3, #157	; 0x9d
 8007000:	71fb      	strb	r3, [r7, #7]
 8007002:	2341      	movs	r3, #65	; 0x41
 8007004:	723b      	strb	r3, [r7, #8]
 8007006:	2345      	movs	r3, #69	; 0x45
 8007008:	727b      	strb	r3, [r7, #9]
 800700a:	2322      	movs	r3, #34	; 0x22
 800700c:	72bb      	strb	r3, [r7, #10]
 800700e:	238e      	movs	r3, #142	; 0x8e
 8007010:	72fb      	strb	r3, [r7, #11]
 8007012:	2342      	movs	r3, #66	; 0x42
 8007014:	733b      	strb	r3, [r7, #12]
 8007016:	23fe      	movs	r3, #254	; 0xfe
 8007018:	737b      	strb	r3, [r7, #13]
 800701a:	2300      	movs	r3, #0
 800701c:	73bb      	strb	r3, [r7, #14]
 800701e:	2300      	movs	r3, #0
 8007020:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <P2PS_STM_Init+0x134>)
 8007024:	8818      	ldrh	r0, [r3, #0]
 8007026:	463a      	mov	r2, r7
 8007028:	4b0c      	ldr	r3, [pc, #48]	; (800705c <P2PS_STM_Init+0x13c>)
 800702a:	9305      	str	r3, [sp, #20]
 800702c:	2301      	movs	r3, #1
 800702e:	9304      	str	r3, [sp, #16]
 8007030:	230a      	movs	r3, #10
 8007032:	9303      	str	r3, [sp, #12]
 8007034:	2301      	movs	r3, #1
 8007036:	9302      	str	r3, [sp, #8]
 8007038:	2300      	movs	r3, #0
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	2310      	movs	r3, #16
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	2302      	movs	r3, #2
 8007042:	2102      	movs	r1, #2
 8007044:	f000 fd0b 	bl	8007a5e <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8007048:	bf00      	nop
}
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	08006e5d 	.word	0x08006e5d
 8007054:	20000160 	.word	0x20000160
 8007058:	20000162 	.word	0x20000162
 800705c:	20000164 	.word	0x20000164

08007060 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af02      	add	r7, sp, #8
 8007066:	4603      	mov	r3, r0
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800706c:	2342      	movs	r3, #66	; 0x42
 800706e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8007070:	88fb      	ldrh	r3, [r7, #6]
 8007072:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8007076:	4293      	cmp	r3, r2
 8007078:	d000      	beq.n	800707c <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 800707a:	e00c      	b.n	8007096 <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800707c:	4b08      	ldr	r3, [pc, #32]	; (80070a0 <P2PS_STM_App_Update_Char+0x40>)
 800707e:	8818      	ldrh	r0, [r3, #0]
 8007080:	4b07      	ldr	r3, [pc, #28]	; (80070a0 <P2PS_STM_App_Update_Char+0x40>)
 8007082:	8899      	ldrh	r1, [r3, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	2302      	movs	r3, #2
 800708a:	2200      	movs	r2, #0
 800708c:	f000 fdd1 	bl	8007c32 <aci_gatt_update_char_value>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]
      break;
 8007094:	bf00      	nop
  }

  return result;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20000160 	.word	0x20000160

080070a4 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
  return;
 80070a8:	bf00      	nop
}
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 80070b2:	b480      	push	{r7}
 80070b4:	af00      	add	r7, sp, #0
  return;
 80070b6:	bf00      	nop
}
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <DIS_Init>:
__weak void DIS_Init( void )
{
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
  return;
 80070c4:	bf00      	nop
}
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 80070ce:	b480      	push	{r7}
 80070d0:	af00      	add	r7, sp, #0
  return;
 80070d2:	bf00      	nop
}
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HIDS_Init>:
__weak void HIDS_Init( void )
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  return;
 80070e0:	bf00      	nop
}
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <HRS_Init>:
__weak void HRS_Init( void )
{
 80070ea:	b480      	push	{r7}
 80070ec:	af00      	add	r7, sp, #0
  return;
 80070ee:	bf00      	nop
}
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <HTS_Init>:
__weak void HTS_Init( void )
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  return;
 80070fc:	bf00      	nop
}
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <IAS_Init>:
__weak void IAS_Init( void )
{
 8007106:	b480      	push	{r7}
 8007108:	af00      	add	r7, sp, #0
  return;
 800710a:	bf00      	nop
}
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <LLS_Init>:
__weak void LLS_Init( void )
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  return;
 8007118:	bf00      	nop
}
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <TPS_Init>:
__weak void TPS_Init( void )
{
 8007122:	b480      	push	{r7}
 8007124:	af00      	add	r7, sp, #0
  return;
 8007126:	bf00      	nop
}
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
  return;
 8007134:	bf00      	nop
}
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800713e:	b480      	push	{r7}
 8007140:	af00      	add	r7, sp, #0
  return;
 8007142:	bf00      	nop
}
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <MESH_Init>:
__weak void MESH_Init( void )
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  return;
 8007150:	bf00      	nop
}
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800715a:	b480      	push	{r7}
 800715c:	af00      	add	r7, sp, #0
  return;
 800715e:	bf00      	nop
}
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  return;
 800716c:	bf00      	nop
}
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800717c:	4b04      	ldr	r3, [pc, #16]	; (8007190 <SVCCTL_Init+0x18>)
 800717e:	2200      	movs	r2, #0
 8007180:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007182:	4b04      	ldr	r3, [pc, #16]	; (8007194 <SVCCTL_Init+0x1c>)
 8007184:	2200      	movs	r2, #0
 8007186:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007188:	f000 f806 	bl	8007198 <SVCCTL_SvcInit>

  return;
 800718c:	bf00      	nop
}
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000168 	.word	0x20000168
 8007194:	20000170 	.word	0x20000170

08007198 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	af00      	add	r7, sp, #0
  BLS_Init();
 800719c:	f7ff ff82 	bl	80070a4 <BLS_Init>

  CRS_STM_Init();
 80071a0:	f7ff ff87 	bl	80070b2 <CRS_STM_Init>

  DIS_Init();
 80071a4:	f7ff ff8c 	bl	80070c0 <DIS_Init>

  EDS_STM_Init();
 80071a8:	f7ff ff91 	bl	80070ce <EDS_STM_Init>

  HIDS_Init();
 80071ac:	f7ff ff96 	bl	80070dc <HIDS_Init>

  HRS_Init();
 80071b0:	f7ff ff9b 	bl	80070ea <HRS_Init>

  HTS_Init();
 80071b4:	f7ff ffa0 	bl	80070f8 <HTS_Init>

  IAS_Init();
 80071b8:	f7ff ffa5 	bl	8007106 <IAS_Init>

  LLS_Init();
 80071bc:	f7ff ffaa 	bl	8007114 <LLS_Init>

  TPS_Init();
 80071c0:	f7ff ffaf 	bl	8007122 <TPS_Init>

  MOTENV_STM_Init();
 80071c4:	f7ff ffb4 	bl	8007130 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80071c8:	f7ff feaa 	bl	8006f20 <P2PS_STM_Init>

  OTAS_STM_Init();
 80071cc:	f7ff ffb7 	bl	800713e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80071d0:	f7ff ffc3 	bl	800715a <BVOPUS_STM_Init>

  MESH_Init();
 80071d4:	f7ff ffba 	bl	800714c <MESH_Init>

  SVCCTL_InitCustomSvc();
 80071d8:	f7ff ffc6 	bl	8007168 <SVCCTL_InitCustomSvc>
  
  return;
 80071dc:	bf00      	nop
}
 80071de:	bd80      	pop	{r7, pc}

080071e0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80071e8:	4b09      	ldr	r3, [pc, #36]	; (8007210 <SVCCTL_RegisterSvcHandler+0x30>)
 80071ea:	791b      	ldrb	r3, [r3, #4]
 80071ec:	4619      	mov	r1, r3
 80071ee:	4a08      	ldr	r2, [pc, #32]	; (8007210 <SVCCTL_RegisterSvcHandler+0x30>)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80071f6:	4b06      	ldr	r3, [pc, #24]	; (8007210 <SVCCTL_RegisterSvcHandler+0x30>)
 80071f8:	791b      	ldrb	r3, [r3, #4]
 80071fa:	3301      	adds	r3, #1
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	4b04      	ldr	r3, [pc, #16]	; (8007210 <SVCCTL_RegisterSvcHandler+0x30>)
 8007200:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007202:	bf00      	nop
}
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20000168 	.word	0x20000168

08007214 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3301      	adds	r3, #1
 8007220:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	2bff      	cmp	r3, #255	; 0xff
 800722c:	d000      	beq.n	8007230 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800722e:	e025      	b.n	800727c <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	3302      	adds	r3, #2
 8007234:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007240:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007244:	d000      	beq.n	8007248 <SVCCTL_UserEvtRx+0x34>
          break;
 8007246:	e018      	b.n	800727a <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007248:	2300      	movs	r3, #0
 800724a:	757b      	strb	r3, [r7, #21]
 800724c:	e00d      	b.n	800726a <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800724e:	7d7b      	ldrb	r3, [r7, #21]
 8007250:	4a18      	ldr	r2, [pc, #96]	; (80072b4 <SVCCTL_UserEvtRx+0xa0>)
 8007252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3
 800725a:	4603      	mov	r3, r0
 800725c:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d108      	bne.n	8007276 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007264:	7d7b      	ldrb	r3, [r7, #21]
 8007266:	3301      	adds	r3, #1
 8007268:	757b      	strb	r3, [r7, #21]
 800726a:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <SVCCTL_UserEvtRx+0xa0>)
 800726c:	791b      	ldrb	r3, [r3, #4]
 800726e:	7d7a      	ldrb	r2, [r7, #21]
 8007270:	429a      	cmp	r2, r3
 8007272:	d3ec      	bcc.n	800724e <SVCCTL_UserEvtRx+0x3a>
          break;
 8007274:	e000      	b.n	8007278 <SVCCTL_UserEvtRx+0x64>
              break;
 8007276:	bf00      	nop
          break;
 8007278:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800727a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d009      	beq.n	8007296 <SVCCTL_UserEvtRx+0x82>
 8007282:	2b02      	cmp	r3, #2
 8007284:	d00a      	beq.n	800729c <SVCCTL_UserEvtRx+0x88>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fa fd76 	bl	8001d7c <SVCCTL_App_Notification>
 8007290:	4603      	mov	r3, r0
 8007292:	75bb      	strb	r3, [r7, #22]
      break;
 8007294:	e008      	b.n	80072a8 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007296:	2301      	movs	r3, #1
 8007298:	75bb      	strb	r3, [r7, #22]
      break;
 800729a:	e005      	b.n	80072a8 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800729c:	2300      	movs	r3, #0
 800729e:	75bb      	strb	r3, [r7, #22]
      break;
 80072a0:	e002      	b.n	80072a8 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80072a2:	2301      	movs	r3, #1
 80072a4:	75bb      	strb	r3, [r7, #22]
      break;
 80072a6:	bf00      	nop
  }

  return (return_status);
 80072a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	20000168 	.word	0x20000168

080072b8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b088      	sub	sp, #32
 80072bc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072c2:	f107 0308 	add.w	r3, r7, #8
 80072c6:	2218      	movs	r2, #24
 80072c8:	2100      	movs	r1, #0
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fedd 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 80072d0:	233f      	movs	r3, #63	; 0x3f
 80072d2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80072d4:	2381      	movs	r3, #129	; 0x81
 80072d6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80072d8:	1dfb      	adds	r3, r7, #7
 80072da:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80072dc:	2301      	movs	r3, #1
 80072de:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072e0:	f107 0308 	add.w	r3, r7, #8
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 ff78 	bl	80081dc <hci_send_req>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	da01      	bge.n	80072f6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80072f2:	23ff      	movs	r3, #255	; 0xff
 80072f4:	e000      	b.n	80072f8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80072f6:	79fb      	ldrb	r3, [r7, #7]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007300:	b5b0      	push	{r4, r5, r7, lr}
 8007302:	b0ce      	sub	sp, #312	; 0x138
 8007304:	af00      	add	r7, sp, #0
 8007306:	4605      	mov	r5, r0
 8007308:	460c      	mov	r4, r1
 800730a:	4610      	mov	r0, r2
 800730c:	4619      	mov	r1, r3
 800730e:	1dfb      	adds	r3, r7, #7
 8007310:	462a      	mov	r2, r5
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	1d3b      	adds	r3, r7, #4
 8007316:	4622      	mov	r2, r4
 8007318:	801a      	strh	r2, [r3, #0]
 800731a:	1cbb      	adds	r3, r7, #2
 800731c:	4602      	mov	r2, r0
 800731e:	801a      	strh	r2, [r3, #0]
 8007320:	1dbb      	adds	r3, r7, #6
 8007322:	460a      	mov	r2, r1
 8007324:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007326:	f107 0310 	add.w	r3, r7, #16
 800732a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800732e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007332:	3308      	adds	r3, #8
 8007334:	f107 0210 	add.w	r2, r7, #16
 8007338:	4413      	add	r3, r2
 800733a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800733e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007342:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007346:	4413      	add	r3, r2
 8007348:	3309      	adds	r3, #9
 800734a:	f107 0210 	add.w	r2, r7, #16
 800734e:	4413      	add	r3, r2
 8007350:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007354:	f107 030f 	add.w	r3, r7, #15
 8007358:	2200      	movs	r2, #0
 800735a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007362:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007366:	1dfa      	adds	r2, r7, #7
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800736c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007370:	3301      	adds	r3, #1
 8007372:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007376:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800737a:	1d3a      	adds	r2, r7, #4
 800737c:	8812      	ldrh	r2, [r2, #0]
 800737e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007386:	3302      	adds	r3, #2
 8007388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800738c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007390:	1cba      	adds	r2, r7, #2
 8007392:	8812      	ldrh	r2, [r2, #0]
 8007394:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800739c:	3302      	adds	r3, #2
 800739e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80073a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073a6:	1dba      	adds	r2, r7, #6
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80073ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073b0:	3301      	adds	r3, #1
 80073b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80073b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073ba:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80073be:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80073c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073c4:	3301      	adds	r3, #1
 80073c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80073ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073ce:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80073d2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80073d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073d8:	3301      	adds	r3, #1
 80073da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80073de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073e2:	3308      	adds	r3, #8
 80073e4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80073e8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fe3c 	bl	800806a <Osal_MemCpy>
    index_input += Local_Name_Length;
 80073f2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80073f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80073fa:	4413      	add	r3, r2
 80073fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007400:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007404:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007408:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800740a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800740e:	3301      	adds	r3, #1
 8007410:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007414:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007418:	3301      	adds	r3, #1
 800741a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800741e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fe21 	bl	800806a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007428:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800742c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007430:	4413      	add	r3, r2
 8007432:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800743e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007440:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007444:	3302      	adds	r3, #2
 8007446:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800744a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800744e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007452:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007454:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007458:	3302      	adds	r3, #2
 800745a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800745e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007462:	2218      	movs	r2, #24
 8007464:	2100      	movs	r1, #0
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fe0f 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 800746c:	233f      	movs	r3, #63	; 0x3f
 800746e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007472:	2383      	movs	r3, #131	; 0x83
 8007474:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007478:	f107 0310 	add.w	r3, r7, #16
 800747c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007480:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007484:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007488:	f107 030f 	add.w	r3, r7, #15
 800748c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007490:	2301      	movs	r3, #1
 8007492:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007496:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800749a:	2100      	movs	r1, #0
 800749c:	4618      	mov	r0, r3
 800749e:	f000 fe9d 	bl	80081dc <hci_send_req>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da01      	bge.n	80074ac <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 80074a8:	23ff      	movs	r3, #255	; 0xff
 80074aa:	e002      	b.n	80074b2 <aci_gap_set_discoverable+0x1b2>
  return status;
 80074ac:	f107 030f 	add.w	r3, r7, #15
 80074b0:	781b      	ldrb	r3, [r3, #0]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bdb0      	pop	{r4, r5, r7, pc}

080074bc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b0cc      	sub	sp, #304	; 0x130
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4602      	mov	r2, r0
 80074c4:	1dfb      	adds	r3, r7, #7
 80074c6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80074c8:	f107 0310 	add.w	r3, r7, #16
 80074cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80074d0:	f107 030f 	add.w	r3, r7, #15
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80074de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e2:	1dfa      	adds	r2, r7, #7
 80074e4:	7812      	ldrb	r2, [r2, #0]
 80074e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80074e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074ec:	3301      	adds	r3, #1
 80074ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074f6:	2218      	movs	r2, #24
 80074f8:	2100      	movs	r1, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fdc5 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007500:	233f      	movs	r3, #63	; 0x3f
 8007502:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007506:	2385      	movs	r3, #133	; 0x85
 8007508:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800750c:	f107 0310 	add.w	r3, r7, #16
 8007510:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007514:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007518:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800751c:	f107 030f 	add.w	r3, r7, #15
 8007520:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007524:	2301      	movs	r3, #1
 8007526:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800752a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800752e:	2100      	movs	r1, #0
 8007530:	4618      	mov	r0, r3
 8007532:	f000 fe53 	bl	80081dc <hci_send_req>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	da01      	bge.n	8007540 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800753c:	23ff      	movs	r3, #255	; 0xff
 800753e:	e002      	b.n	8007546 <aci_gap_set_io_capability+0x8a>
  return status;
 8007540:	f107 030f 	add.w	r3, r7, #15
 8007544:	781b      	ldrb	r3, [r3, #0]
}
 8007546:	4618      	mov	r0, r3
 8007548:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007550:	b5b0      	push	{r4, r5, r7, lr}
 8007552:	b0cc      	sub	sp, #304	; 0x130
 8007554:	af00      	add	r7, sp, #0
 8007556:	4605      	mov	r5, r0
 8007558:	460c      	mov	r4, r1
 800755a:	4610      	mov	r0, r2
 800755c:	4619      	mov	r1, r3
 800755e:	1dfb      	adds	r3, r7, #7
 8007560:	462a      	mov	r2, r5
 8007562:	701a      	strb	r2, [r3, #0]
 8007564:	1dbb      	adds	r3, r7, #6
 8007566:	4622      	mov	r2, r4
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	1d7b      	adds	r3, r7, #5
 800756c:	4602      	mov	r2, r0
 800756e:	701a      	strb	r2, [r3, #0]
 8007570:	1d3b      	adds	r3, r7, #4
 8007572:	460a      	mov	r2, r1
 8007574:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007576:	f107 0310 	add.w	r3, r7, #16
 800757a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800757e:	f107 030f 	add.w	r3, r7, #15
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800758c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007590:	1dfa      	adds	r2, r7, #7
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007596:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800759a:	3301      	adds	r3, #1
 800759c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80075a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a4:	1dba      	adds	r2, r7, #6
 80075a6:	7812      	ldrb	r2, [r2, #0]
 80075a8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80075aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075ae:	3301      	adds	r3, #1
 80075b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80075b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b8:	1d7a      	adds	r2, r7, #5
 80075ba:	7812      	ldrb	r2, [r2, #0]
 80075bc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80075be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075c2:	3301      	adds	r3, #1
 80075c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80075c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075cc:	1d3a      	adds	r2, r7, #4
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80075d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075d6:	3301      	adds	r3, #1
 80075d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80075dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80075e4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80075e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075ea:	3301      	adds	r3, #1
 80075ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80075f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80075f8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80075fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075fe:	3301      	adds	r3, #1
 8007600:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007604:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007608:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800760c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800760e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007612:	3301      	adds	r3, #1
 8007614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007620:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007624:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007628:	3304      	adds	r3, #4
 800762a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800762e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007632:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007636:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007638:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800763c:	3301      	adds	r3, #1
 800763e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007642:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007646:	2218      	movs	r2, #24
 8007648:	2100      	movs	r1, #0
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fd1d 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007650:	233f      	movs	r3, #63	; 0x3f
 8007652:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007656:	2386      	movs	r3, #134	; 0x86
 8007658:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800765c:	f107 0310 	add.w	r3, r7, #16
 8007660:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007664:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007668:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800766c:	f107 030f 	add.w	r3, r7, #15
 8007670:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007674:	2301      	movs	r3, #1
 8007676:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800767a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800767e:	2100      	movs	r1, #0
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fdab 	bl	80081dc <hci_send_req>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	da01      	bge.n	8007690 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800768c:	23ff      	movs	r3, #255	; 0xff
 800768e:	e002      	b.n	8007696 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8007690:	f107 030f 	add.w	r3, r7, #15
 8007694:	781b      	ldrb	r3, [r3, #0]
}
 8007696:	4618      	mov	r0, r3
 8007698:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800769c:	46bd      	mov	sp, r7
 800769e:	bdb0      	pop	{r4, r5, r7, pc}

080076a0 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80076a0:	b590      	push	{r4, r7, lr}
 80076a2:	b0cd      	sub	sp, #308	; 0x134
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	4604      	mov	r4, r0
 80076a8:	4608      	mov	r0, r1
 80076aa:	4611      	mov	r1, r2
 80076ac:	463a      	mov	r2, r7
 80076ae:	6013      	str	r3, [r2, #0]
 80076b0:	1dfb      	adds	r3, r7, #7
 80076b2:	4622      	mov	r2, r4
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	1dbb      	adds	r3, r7, #6
 80076b8:	4602      	mov	r2, r0
 80076ba:	701a      	strb	r2, [r3, #0]
 80076bc:	1d7b      	adds	r3, r7, #5
 80076be:	460a      	mov	r2, r1
 80076c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80076c2:	f107 0310 	add.w	r3, r7, #16
 80076c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80076ca:	f107 0308 	add.w	r3, r7, #8
 80076ce:	2207      	movs	r2, #7
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fcd9 	bl	800808a <Osal_MemSet>
  int index_input = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80076de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e2:	1dfa      	adds	r2, r7, #7
 80076e4:	7812      	ldrb	r2, [r2, #0]
 80076e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80076e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076ec:	3301      	adds	r3, #1
 80076ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80076f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f6:	1dba      	adds	r2, r7, #6
 80076f8:	7812      	ldrb	r2, [r2, #0]
 80076fa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80076fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007700:	3301      	adds	r3, #1
 8007702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800770a:	1d7a      	adds	r2, r7, #5
 800770c:	7812      	ldrb	r2, [r2, #0]
 800770e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007710:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007714:	3301      	adds	r3, #1
 8007716:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800771a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800771e:	2218      	movs	r2, #24
 8007720:	2100      	movs	r1, #0
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fcb1 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007728:	233f      	movs	r3, #63	; 0x3f
 800772a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800772e:	238a      	movs	r3, #138	; 0x8a
 8007730:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007734:	f107 0310 	add.w	r3, r7, #16
 8007738:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800773c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007740:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007744:	f107 0308 	add.w	r3, r7, #8
 8007748:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800774c:	2307      	movs	r3, #7
 800774e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007752:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007756:	2100      	movs	r1, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fd3f 	bl	80081dc <hci_send_req>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	da01      	bge.n	8007768 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8007764:	23ff      	movs	r3, #255	; 0xff
 8007766:	e021      	b.n	80077ac <aci_gap_init+0x10c>
  if ( resp.Status )
 8007768:	f107 0308 	add.w	r3, r7, #8
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <aci_gap_init+0xda>
    return resp.Status;
 8007772:	f107 0308 	add.w	r3, r7, #8
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	e018      	b.n	80077ac <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800777a:	f107 0308 	add.w	r3, r7, #8
 800777e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007782:	b29a      	uxth	r2, r3
 8007784:	463b      	mov	r3, r7
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800778a:	f107 0308 	add.w	r3, r7, #8
 800778e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007792:	b29a      	uxth	r2, r3
 8007794:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007798:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800779a:	f107 0308 	add.w	r3, r7, #8
 800779e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80077a8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd90      	pop	{r4, r7, pc}

080077b6 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b0cc      	sub	sp, #304	; 0x130
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	4602      	mov	r2, r0
 80077be:	463b      	mov	r3, r7
 80077c0:	6019      	str	r1, [r3, #0]
 80077c2:	1dfb      	adds	r3, r7, #7
 80077c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80077c6:	f107 0310 	add.w	r3, r7, #16
 80077ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80077ce:	f107 030f 	add.w	r3, r7, #15
 80077d2:	2200      	movs	r2, #0
 80077d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80077dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e0:	1dfa      	adds	r2, r7, #7
 80077e2:	7812      	ldrb	r2, [r2, #0]
 80077e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80077e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077ea:	3301      	adds	r3, #1
 80077ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80077f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f4:	1c58      	adds	r0, r3, #1
 80077f6:	1dfb      	adds	r3, r7, #7
 80077f8:	781a      	ldrb	r2, [r3, #0]
 80077fa:	463b      	mov	r3, r7
 80077fc:	6819      	ldr	r1, [r3, #0]
 80077fe:	f000 fc34 	bl	800806a <Osal_MemCpy>
  index_input += AdvDataLen;
 8007802:	1dfb      	adds	r3, r7, #7
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800780a:	4413      	add	r3, r2
 800780c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007810:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007814:	2218      	movs	r2, #24
 8007816:	2100      	movs	r1, #0
 8007818:	4618      	mov	r0, r3
 800781a:	f000 fc36 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 800781e:	233f      	movs	r3, #63	; 0x3f
 8007820:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007824:	238e      	movs	r3, #142	; 0x8e
 8007826:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800782a:	f107 0310 	add.w	r3, r7, #16
 800782e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007832:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007836:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800783a:	f107 030f 	add.w	r3, r7, #15
 800783e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007842:	2301      	movs	r3, #1
 8007844:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007848:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800784c:	2100      	movs	r1, #0
 800784e:	4618      	mov	r0, r3
 8007850:	f000 fcc4 	bl	80081dc <hci_send_req>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	da01      	bge.n	800785e <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800785a:	23ff      	movs	r3, #255	; 0xff
 800785c:	e002      	b.n	8007864 <aci_gap_update_adv_data+0xae>
  return status;
 800785e:	f107 030f 	add.w	r3, r7, #15
 8007862:	781b      	ldrb	r3, [r3, #0]
}
 8007864:	4618      	mov	r0, r3
 8007866:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b088      	sub	sp, #32
 8007872:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007878:	f107 0308 	add.w	r3, r7, #8
 800787c:	2218      	movs	r2, #24
 800787e:	2100      	movs	r1, #0
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fc02 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007886:	233f      	movs	r3, #63	; 0x3f
 8007888:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800788a:	2392      	movs	r3, #146	; 0x92
 800788c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800788e:	1dfb      	adds	r3, r7, #7
 8007890:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007892:	2301      	movs	r3, #1
 8007894:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007896:	f107 0308 	add.w	r3, r7, #8
 800789a:	2100      	movs	r1, #0
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fc9d 	bl	80081dc <hci_send_req>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	da01      	bge.n	80078ac <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80078a8:	23ff      	movs	r3, #255	; 0xff
 80078aa:	e000      	b.n	80078ae <aci_gap_configure_whitelist+0x40>
  return status;
 80078ac:	79fb      	ldrb	r3, [r7, #7]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b088      	sub	sp, #32
 80078ba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078c0:	f107 0308 	add.w	r3, r7, #8
 80078c4:	2218      	movs	r2, #24
 80078c6:	2100      	movs	r1, #0
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fbde 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 80078ce:	233f      	movs	r3, #63	; 0x3f
 80078d0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80078d2:	f240 1301 	movw	r3, #257	; 0x101
 80078d6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80078d8:	1dfb      	adds	r3, r7, #7
 80078da:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80078dc:	2301      	movs	r3, #1
 80078de:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078e0:	f107 0308 	add.w	r3, r7, #8
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fc78 	bl	80081dc <hci_send_req>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	da01      	bge.n	80078f6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80078f2:	23ff      	movs	r3, #255	; 0xff
 80078f4:	e000      	b.n	80078f8 <aci_gatt_init+0x42>
  return status;
 80078f6:	79fb      	ldrb	r3, [r7, #7]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007900:	b590      	push	{r4, r7, lr}
 8007902:	b0cf      	sub	sp, #316	; 0x13c
 8007904:	af00      	add	r7, sp, #0
 8007906:	4604      	mov	r4, r0
 8007908:	4638      	mov	r0, r7
 800790a:	6001      	str	r1, [r0, #0]
 800790c:	4610      	mov	r0, r2
 800790e:	4619      	mov	r1, r3
 8007910:	1dfb      	adds	r3, r7, #7
 8007912:	4622      	mov	r2, r4
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	1dbb      	adds	r3, r7, #6
 8007918:	4602      	mov	r2, r0
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	1d7b      	adds	r3, r7, #5
 800791e:	460a      	mov	r2, r1
 8007920:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007922:	f107 0310 	add.w	r3, r7, #16
 8007926:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800792a:	1dfb      	adds	r3, r7, #7
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d007      	beq.n	8007942 <aci_gatt_add_service+0x42>
 8007932:	1dfb      	adds	r3, r7, #7
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d101      	bne.n	800793e <aci_gatt_add_service+0x3e>
 800793a:	2311      	movs	r3, #17
 800793c:	e002      	b.n	8007944 <aci_gatt_add_service+0x44>
 800793e:	2301      	movs	r3, #1
 8007940:	e000      	b.n	8007944 <aci_gatt_add_service+0x44>
 8007942:	2303      	movs	r3, #3
 8007944:	f107 0210 	add.w	r2, r7, #16
 8007948:	4413      	add	r3, r2
 800794a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800794e:	f107 030c 	add.w	r3, r7, #12
 8007952:	2203      	movs	r2, #3
 8007954:	2100      	movs	r1, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fb97 	bl	800808a <Osal_MemSet>
  int index_input = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007962:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007966:	1dfa      	adds	r2, r7, #7
 8007968:	7812      	ldrb	r2, [r2, #0]
 800796a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800796c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007970:	3301      	adds	r3, #1
 8007972:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007976:	1dfb      	adds	r3, r7, #7
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d002      	beq.n	8007984 <aci_gatt_add_service+0x84>
 800797e:	2b02      	cmp	r3, #2
 8007980:	d004      	beq.n	800798c <aci_gatt_add_service+0x8c>
 8007982:	e007      	b.n	8007994 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8007984:	2302      	movs	r3, #2
 8007986:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800798a:	e005      	b.n	8007998 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800798c:	2310      	movs	r3, #16
 800798e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007992:	e001      	b.n	8007998 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8007994:	2347      	movs	r3, #71	; 0x47
 8007996:	e05d      	b.n	8007a54 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007998:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800799c:	1c58      	adds	r0, r3, #1
 800799e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80079a2:	463b      	mov	r3, r7
 80079a4:	6819      	ldr	r1, [r3, #0]
 80079a6:	f000 fb60 	bl	800806a <Osal_MemCpy>
    index_input += size;
 80079aa:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80079ae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80079b2:	4413      	add	r3, r2
 80079b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80079b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079bc:	1dba      	adds	r2, r7, #6
 80079be:	7812      	ldrb	r2, [r2, #0]
 80079c0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80079c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079c6:	3301      	adds	r3, #1
 80079c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80079cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d0:	1d7a      	adds	r2, r7, #5
 80079d2:	7812      	ldrb	r2, [r2, #0]
 80079d4:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80079d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079da:	3301      	adds	r3, #1
 80079dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079e4:	2218      	movs	r2, #24
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fb4e 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 80079ee:	233f      	movs	r3, #63	; 0x3f
 80079f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80079f4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80079f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80079fc:	f107 0310 	add.w	r3, r7, #16
 8007a00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007a14:	2303      	movs	r3, #3
 8007a16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fbdb 	bl	80081dc <hci_send_req>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	da01      	bge.n	8007a30 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8007a2c:	23ff      	movs	r3, #255	; 0xff
 8007a2e:	e011      	b.n	8007a54 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8007a30:	f107 030c 	add.w	r3, r7, #12
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <aci_gatt_add_service+0x142>
    return resp.Status;
 8007a3a:	f107 030c 	add.w	r3, r7, #12
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	e008      	b.n	8007a54 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8007a42:	f107 030c 	add.w	r3, r7, #12
 8007a46:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007a50:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd90      	pop	{r4, r7, pc}

08007a5e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007a5e:	b590      	push	{r4, r7, lr}
 8007a60:	b0d1      	sub	sp, #324	; 0x144
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	4604      	mov	r4, r0
 8007a66:	4608      	mov	r0, r1
 8007a68:	f107 0108 	add.w	r1, r7, #8
 8007a6c:	600a      	str	r2, [r1, #0]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	f107 030e 	add.w	r3, r7, #14
 8007a74:	4622      	mov	r2, r4
 8007a76:	801a      	strh	r2, [r3, #0]
 8007a78:	f107 030d 	add.w	r3, r7, #13
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	1dbb      	adds	r3, r7, #6
 8007a82:	460a      	mov	r2, r1
 8007a84:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007a86:	f107 0318 	add.w	r3, r7, #24
 8007a8a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007a8e:	f107 030d 	add.w	r3, r7, #13
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d008      	beq.n	8007aaa <aci_gatt_add_char+0x4c>
 8007a98:	f107 030d 	add.w	r3, r7, #13
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d101      	bne.n	8007aa6 <aci_gatt_add_char+0x48>
 8007aa2:	2313      	movs	r3, #19
 8007aa4:	e002      	b.n	8007aac <aci_gatt_add_char+0x4e>
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e000      	b.n	8007aac <aci_gatt_add_char+0x4e>
 8007aaa:	2305      	movs	r3, #5
 8007aac:	f107 0218 	add.w	r2, r7, #24
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007ab6:	f107 0314 	add.w	r3, r7, #20
 8007aba:	2203      	movs	r2, #3
 8007abc:	2100      	movs	r1, #0
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fae3 	bl	800808a <Osal_MemSet>
  int index_input = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007aca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007ace:	f107 020e 	add.w	r2, r7, #14
 8007ad2:	8812      	ldrh	r2, [r2, #0]
 8007ad4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007ad6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ada:	3302      	adds	r3, #2
 8007adc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007ae0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007ae4:	f107 020d 	add.w	r2, r7, #13
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007aec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007af0:	3301      	adds	r3, #1
 8007af2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007af6:	f107 030d 	add.w	r3, r7, #13
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d002      	beq.n	8007b06 <aci_gatt_add_char+0xa8>
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d004      	beq.n	8007b0e <aci_gatt_add_char+0xb0>
 8007b04:	e007      	b.n	8007b16 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8007b06:	2302      	movs	r3, #2
 8007b08:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007b0c:	e005      	b.n	8007b1a <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8007b0e:	2310      	movs	r3, #16
 8007b10:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007b14:	e001      	b.n	8007b1a <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8007b16:	2347      	movs	r3, #71	; 0x47
 8007b18:	e086      	b.n	8007c28 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007b1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007b1e:	1cd8      	adds	r0, r3, #3
 8007b20:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007b24:	f107 0308 	add.w	r3, r7, #8
 8007b28:	6819      	ldr	r1, [r3, #0]
 8007b2a:	f000 fa9e 	bl	800806a <Osal_MemCpy>
    index_input += size;
 8007b2e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007b32:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007b36:	4413      	add	r3, r2
 8007b38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007b3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b40:	1dba      	adds	r2, r7, #6
 8007b42:	8812      	ldrh	r2, [r2, #0]
 8007b44:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007b46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b4a:	3302      	adds	r3, #2
 8007b4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007b50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b54:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007b58:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007b5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b5e:	3301      	adds	r3, #1
 8007b60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007b64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b68:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007b6c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007b6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b72:	3301      	adds	r3, #1
 8007b74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007b78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b7c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007b80:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007b82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b86:	3301      	adds	r3, #1
 8007b88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007b8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b90:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007b94:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007b96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007ba0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ba4:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007ba8:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007baa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007bae:	3301      	adds	r3, #1
 8007bb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007bb4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007bb8:	2218      	movs	r2, #24
 8007bba:	2100      	movs	r1, #0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fa64 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007bc2:	233f      	movs	r3, #63	; 0x3f
 8007bc4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007bc8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007bcc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007bd0:	f107 0318 	add.w	r3, r7, #24
 8007bd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007bd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007bdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007be0:	f107 0314 	add.w	r3, r7, #20
 8007be4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007be8:	2303      	movs	r3, #3
 8007bea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 faf1 	bl	80081dc <hci_send_req>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	da01      	bge.n	8007c04 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8007c00:	23ff      	movs	r3, #255	; 0xff
 8007c02:	e011      	b.n	8007c28 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8007c04:	f107 0314 	add.w	r3, r7, #20
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8007c0e:	f107 0314 	add.w	r3, r7, #20
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	e008      	b.n	8007c28 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8007c16:	f107 0314 	add.w	r3, r7, #20
 8007c1a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007c24:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd90      	pop	{r4, r7, pc}

08007c32 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007c32:	b5b0      	push	{r4, r5, r7, lr}
 8007c34:	b0cc      	sub	sp, #304	; 0x130
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	4605      	mov	r5, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4619      	mov	r1, r3
 8007c40:	1dbb      	adds	r3, r7, #6
 8007c42:	462a      	mov	r2, r5
 8007c44:	801a      	strh	r2, [r3, #0]
 8007c46:	1d3b      	adds	r3, r7, #4
 8007c48:	4622      	mov	r2, r4
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	1cfb      	adds	r3, r7, #3
 8007c4e:	4602      	mov	r2, r0
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	1cbb      	adds	r3, r7, #2
 8007c54:	460a      	mov	r2, r1
 8007c56:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007c58:	f107 0310 	add.w	r3, r7, #16
 8007c5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c60:	f107 030f 	add.w	r3, r7, #15
 8007c64:	2200      	movs	r2, #0
 8007c66:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c72:	1dba      	adds	r2, r7, #6
 8007c74:	8812      	ldrh	r2, [r2, #0]
 8007c76:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007c78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c86:	1d3a      	adds	r2, r7, #4
 8007c88:	8812      	ldrh	r2, [r2, #0]
 8007c8a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007c8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c90:	3302      	adds	r3, #2
 8007c92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c9a:	1cfa      	adds	r2, r7, #3
 8007c9c:	7812      	ldrb	r2, [r2, #0]
 8007c9e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007ca0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cae:	1cba      	adds	r2, r7, #2
 8007cb0:	7812      	ldrb	r2, [r2, #0]
 8007cb2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cb8:	3301      	adds	r3, #1
 8007cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc2:	1d98      	adds	r0, r3, #6
 8007cc4:	1cbb      	adds	r3, r7, #2
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007cce:	f000 f9cc 	bl	800806a <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007cd2:	1cbb      	adds	r3, r7, #2
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007cda:	4413      	add	r3, r2
 8007cdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ce0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ce4:	2218      	movs	r2, #24
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 f9ce 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007cee:	233f      	movs	r3, #63	; 0x3f
 8007cf0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007cf4:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007cf8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007cfc:	f107 0310 	add.w	r3, r7, #16
 8007d00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d0c:	f107 030f 	add.w	r3, r7, #15
 8007d10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 fa5b 	bl	80081dc <hci_send_req>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	da01      	bge.n	8007d30 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8007d2c:	23ff      	movs	r3, #255	; 0xff
 8007d2e:	e002      	b.n	8007d36 <aci_gatt_update_char_value+0x104>
  return status;
 8007d30:	f107 030f 	add.w	r3, r7, #15
 8007d34:	781b      	ldrb	r3, [r3, #0]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bdb0      	pop	{r4, r5, r7, pc}

08007d40 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b0cc      	sub	sp, #304	; 0x130
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	463b      	mov	r3, r7
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	1dfb      	adds	r3, r7, #7
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	701a      	strb	r2, [r3, #0]
 8007d50:	1dbb      	adds	r3, r7, #6
 8007d52:	460a      	mov	r2, r1
 8007d54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d5e:	f107 030f 	add.w	r3, r7, #15
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d70:	1dfa      	adds	r2, r7, #7
 8007d72:	7812      	ldrb	r2, [r2, #0]
 8007d74:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d84:	1dba      	adds	r2, r7, #6
 8007d86:	7812      	ldrb	r2, [r2, #0]
 8007d88:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d8e:	3301      	adds	r3, #1
 8007d90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d98:	1c98      	adds	r0, r3, #2
 8007d9a:	1dbb      	adds	r3, r7, #6
 8007d9c:	781a      	ldrb	r2, [r3, #0]
 8007d9e:	463b      	mov	r3, r7
 8007da0:	6819      	ldr	r1, [r3, #0]
 8007da2:	f000 f962 	bl	800806a <Osal_MemCpy>
  index_input += Length;
 8007da6:	1dbb      	adds	r3, r7, #6
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007dae:	4413      	add	r3, r2
 8007db0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007db4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007db8:	2218      	movs	r2, #24
 8007dba:	2100      	movs	r1, #0
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 f964 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007dc2:	233f      	movs	r3, #63	; 0x3f
 8007dc4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007dc8:	230c      	movs	r3, #12
 8007dca:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007dce:	f107 0310 	add.w	r3, r7, #16
 8007dd2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007dd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007dde:	f107 030f 	add.w	r3, r7, #15
 8007de2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007dec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007df0:	2100      	movs	r1, #0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 f9f2 	bl	80081dc <hci_send_req>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	da01      	bge.n	8007e02 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8007dfe:	23ff      	movs	r3, #255	; 0xff
 8007e00:	e002      	b.n	8007e08 <aci_hal_write_config_data+0xc8>
  return status;
 8007e02:	f107 030f 	add.w	r3, r7, #15
 8007e06:	781b      	ldrb	r3, [r3, #0]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b0cc      	sub	sp, #304	; 0x130
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	4602      	mov	r2, r0
 8007e1a:	1dfb      	adds	r3, r7, #7
 8007e1c:	701a      	strb	r2, [r3, #0]
 8007e1e:	1dbb      	adds	r3, r7, #6
 8007e20:	460a      	mov	r2, r1
 8007e22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007e24:	f107 0310 	add.w	r3, r7, #16
 8007e28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e2c:	f107 030f 	add.w	r3, r7, #15
 8007e30:	2200      	movs	r2, #0
 8007e32:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3e:	1dfa      	adds	r2, r7, #7
 8007e40:	7812      	ldrb	r2, [r2, #0]
 8007e42:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007e44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e48:	3301      	adds	r3, #1
 8007e4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e52:	1dba      	adds	r2, r7, #6
 8007e54:	7812      	ldrb	r2, [r2, #0]
 8007e56:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e66:	2218      	movs	r2, #24
 8007e68:	2100      	movs	r1, #0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 f90d 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e70:	233f      	movs	r3, #63	; 0x3f
 8007e72:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007e76:	230f      	movs	r3, #15
 8007e78:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e7c:	f107 0310 	add.w	r3, r7, #16
 8007e80:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e8c:	f107 030f 	add.w	r3, r7, #15
 8007e90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e94:	2301      	movs	r3, #1
 8007e96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 f99b 	bl	80081dc <hci_send_req>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da01      	bge.n	8007eb0 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007eac:	23ff      	movs	r3, #255	; 0xff
 8007eae:	e002      	b.n	8007eb6 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8007eb0:	f107 030f 	add.w	r3, r7, #15
 8007eb4:	781b      	ldrb	r3, [r3, #0]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b0cc      	sub	sp, #304	; 0x130
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	1dbb      	adds	r3, r7, #6
 8007eca:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007ecc:	f107 0310 	add.w	r3, r7, #16
 8007ed0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ed4:	f107 030f 	add.w	r3, r7, #15
 8007ed8:	2200      	movs	r2, #0
 8007eda:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee6:	1dba      	adds	r2, r7, #6
 8007ee8:	8812      	ldrh	r2, [r2, #0]
 8007eea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007eec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ef0:	3302      	adds	r3, #2
 8007ef2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007efa:	2218      	movs	r2, #24
 8007efc:	2100      	movs	r1, #0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 f8c3 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f04:	233f      	movs	r3, #63	; 0x3f
 8007f06:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007f0a:	2318      	movs	r3, #24
 8007f0c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f10:	f107 0310 	add.w	r3, r7, #16
 8007f14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f20:	f107 030f 	add.w	r3, r7, #15
 8007f24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f32:	2100      	movs	r1, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 f951 	bl	80081dc <hci_send_req>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	da01      	bge.n	8007f44 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8007f40:	23ff      	movs	r3, #255	; 0xff
 8007f42:	e002      	b.n	8007f4a <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8007f44:	f107 030f 	add.w	r3, r7, #15
 8007f48:	781b      	ldrb	r3, [r3, #0]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f5e:	f107 0308 	add.w	r3, r7, #8
 8007f62:	2218      	movs	r2, #24
 8007f64:	2100      	movs	r1, #0
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 f88f 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x03;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007f70:	2303      	movs	r3, #3
 8007f72:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007f74:	1dfb      	adds	r3, r7, #7
 8007f76:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f7c:	f107 0308 	add.w	r3, r7, #8
 8007f80:	2100      	movs	r1, #0
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 f92a 	bl	80081dc <hci_send_req>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	da01      	bge.n	8007f92 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007f8e:	23ff      	movs	r3, #255	; 0xff
 8007f90:	e000      	b.n	8007f94 <hci_reset+0x40>
  return status;
 8007f92:	79fb      	ldrb	r3, [r7, #7]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3720      	adds	r7, #32
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b0cd      	sub	sp, #308	; 0x134
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	1dfb      	adds	r3, r7, #7
 8007faa:	4622      	mov	r2, r4
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	1dbb      	adds	r3, r7, #6
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	701a      	strb	r2, [r3, #0]
 8007fb4:	1d7b      	adds	r3, r7, #5
 8007fb6:	460a      	mov	r2, r1
 8007fb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007fba:	f107 0310 	add.w	r3, r7, #16
 8007fbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007fc2:	f107 030f 	add.w	r3, r7, #15
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd4:	1dfa      	adds	r2, r7, #7
 8007fd6:	7812      	ldrb	r2, [r2, #0]
 8007fd8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007fda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fde:	3301      	adds	r3, #1
 8007fe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe8:	1dba      	adds	r2, r7, #6
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffc:	1d7a      	adds	r2, r7, #5
 8007ffe:	7812      	ldrb	r2, [r2, #0]
 8008000:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008002:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008006:	3301      	adds	r3, #1
 8008008:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800800c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008010:	2218      	movs	r2, #24
 8008012:	2100      	movs	r1, #0
 8008014:	4618      	mov	r0, r3
 8008016:	f000 f838 	bl	800808a <Osal_MemSet>
  rq.ogf = 0x08;
 800801a:	2308      	movs	r3, #8
 800801c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008020:	2331      	movs	r3, #49	; 0x31
 8008022:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008026:	f107 0310 	add.w	r3, r7, #16
 800802a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800802e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008032:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008036:	f107 030f 	add.w	r3, r7, #15
 800803a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800803e:	2301      	movs	r3, #1
 8008040:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008044:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f8c6 	bl	80081dc <hci_send_req>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	da01      	bge.n	800805a <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8008056:	23ff      	movs	r3, #255	; 0xff
 8008058:	e002      	b.n	8008060 <hci_le_set_default_phy+0xc4>
  return status;
 800805a:	f107 030f 	add.w	r3, r7, #15
 800805e:	781b      	ldrb	r3, [r3, #0]
}
 8008060:	4618      	mov	r0, r3
 8008062:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008066:	46bd      	mov	sp, r7
 8008068:	bd90      	pop	{r4, r7, pc}

0800806a <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	60f8      	str	r0, [r7, #12]
 8008072:	60b9      	str	r1, [r7, #8]
 8008074:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f001 fa00 	bl	8009480 <memcpy>
 8008080:	4603      	mov	r3, r0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	60b9      	str	r1, [r7, #8]
 8008094:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	68b9      	ldr	r1, [r7, #8]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f001 f9fb 	bl	8009496 <memset>
 80080a0:	4603      	mov	r3, r0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b088      	sub	sp, #32
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80080b2:	f107 030c 	add.w	r3, r7, #12
 80080b6:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	2121      	movs	r1, #33	; 0x21
 80080c2:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80080c6:	f000 fa1f 	bl	8008508 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	330b      	adds	r3, #11
 80080ce:	78db      	ldrb	r3, [r3, #3]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3720      	adds	r7, #32
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80080e0:	f107 030c 	add.w	r3, r7, #12
 80080e4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	210f      	movs	r1, #15
 80080f0:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80080f4:	f000 fa08 	bl	8008508 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	330b      	adds	r3, #11
 80080fc:	78db      	ldrb	r3, [r3, #3]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3720      	adds	r7, #32
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	4a08      	ldr	r2, [pc, #32]	; (8008138 <hci_init+0x30>)
 8008118:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800811a:	4a08      	ldr	r2, [pc, #32]	; (800813c <hci_init+0x34>)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008120:	4806      	ldr	r0, [pc, #24]	; (800813c <hci_init+0x34>)
 8008122:	f000 f973 	bl	800840c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f000 f8d4 	bl	80082d8 <TlInit>

  return;
 8008130:	bf00      	nop
}
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	20000220 	.word	0x20000220
 800813c:	200001f8 	.word	0x200001f8

08008140 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008146:	4822      	ldr	r0, [pc, #136]	; (80081d0 <hci_user_evt_proc+0x90>)
 8008148:	f000 fe50 	bl	8008dec <LST_is_empty>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d12b      	bne.n	80081aa <hci_user_evt_proc+0x6a>
 8008152:	4b20      	ldr	r3, [pc, #128]	; (80081d4 <hci_user_evt_proc+0x94>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d027      	beq.n	80081aa <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800815a:	f107 030c 	add.w	r3, r7, #12
 800815e:	4619      	mov	r1, r3
 8008160:	481b      	ldr	r0, [pc, #108]	; (80081d0 <hci_user_evt_proc+0x90>)
 8008162:	f000 feca 	bl	8008efa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008166:	4b1c      	ldr	r3, [pc, #112]	; (80081d8 <hci_user_evt_proc+0x98>)
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00c      	beq.n	8008188 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008172:	2301      	movs	r3, #1
 8008174:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008176:	4b18      	ldr	r3, [pc, #96]	; (80081d8 <hci_user_evt_proc+0x98>)
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	1d3a      	adds	r2, r7, #4
 800817c:	4610      	mov	r0, r2
 800817e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008180:	793a      	ldrb	r2, [r7, #4]
 8008182:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <hci_user_evt_proc+0x94>)
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	e002      	b.n	800818e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008188:	4b12      	ldr	r3, [pc, #72]	; (80081d4 <hci_user_evt_proc+0x94>)
 800818a:	2201      	movs	r2, #1
 800818c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800818e:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <hci_user_evt_proc+0x94>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d004      	beq.n	80081a0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fc03 	bl	80089a4 <TL_MM_EvtDone>
 800819e:	e004      	b.n	80081aa <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4619      	mov	r1, r3
 80081a4:	480a      	ldr	r0, [pc, #40]	; (80081d0 <hci_user_evt_proc+0x90>)
 80081a6:	f000 fe41 	bl	8008e2c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80081aa:	4809      	ldr	r0, [pc, #36]	; (80081d0 <hci_user_evt_proc+0x90>)
 80081ac:	f000 fe1e 	bl	8008dec <LST_is_empty>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d107      	bne.n	80081c6 <hci_user_evt_proc+0x86>
 80081b6:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <hci_user_evt_proc+0x94>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80081be:	4804      	ldr	r0, [pc, #16]	; (80081d0 <hci_user_evt_proc+0x90>)
 80081c0:	f7fa f825 	bl	800220e <hci_notify_asynch_evt>
  }


  return;
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop
}
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000178 	.word	0x20000178
 80081d4:	20000184 	.word	0x20000184
 80081d8:	200001f8 	.word	0x200001f8

080081dc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80081e8:	2000      	movs	r0, #0
 80081ea:	f000 f8cb 	bl	8008384 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80081ee:	2300      	movs	r3, #0
 80081f0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	885b      	ldrh	r3, [r3, #2]
 80081f6:	b21b      	sxth	r3, r3
 80081f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081fc:	b21a      	sxth	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	029b      	lsls	r3, r3, #10
 8008204:	b21b      	sxth	r3, r3
 8008206:	4313      	orrs	r3, r2
 8008208:	b21b      	sxth	r3, r3
 800820a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	b2d9      	uxtb	r1, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	8bbb      	ldrh	r3, [r7, #28]
 8008218:	4618      	mov	r0, r3
 800821a:	f000 f88d 	bl	8008338 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800821e:	e04e      	b.n	80082be <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008220:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008224:	f7fa f80a 	bl	800223c <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008228:	e043      	b.n	80082b2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800822a:	f107 030c 	add.w	r3, r7, #12
 800822e:	4619      	mov	r1, r3
 8008230:	4828      	ldr	r0, [pc, #160]	; (80082d4 <hci_send_req+0xf8>)
 8008232:	f000 fe62 	bl	8008efa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	7a5b      	ldrb	r3, [r3, #9]
 800823a:	2b0f      	cmp	r3, #15
 800823c:	d114      	bne.n	8008268 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	330b      	adds	r3, #11
 8008242:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	885b      	ldrh	r3, [r3, #2]
 8008248:	b29b      	uxth	r3, r3
 800824a:	8bba      	ldrh	r2, [r7, #28]
 800824c:	429a      	cmp	r2, r3
 800824e:	d104      	bne.n	800825a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	7812      	ldrb	r2, [r2, #0]
 8008258:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	785b      	ldrb	r3, [r3, #1]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d027      	beq.n	80082b2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008262:	2301      	movs	r3, #1
 8008264:	77fb      	strb	r3, [r7, #31]
 8008266:	e024      	b.n	80082b2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	330b      	adds	r3, #11
 800826c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008274:	b29b      	uxth	r3, r3
 8008276:	8bba      	ldrh	r2, [r7, #28]
 8008278:	429a      	cmp	r2, r3
 800827a:	d114      	bne.n	80082a6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	7a9b      	ldrb	r3, [r3, #10]
 8008280:	3b03      	subs	r3, #3
 8008282:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	695a      	ldr	r2, [r3, #20]
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	429a      	cmp	r2, r3
 800828c:	bfa8      	it	ge
 800828e:	461a      	movge	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6918      	ldr	r0, [r3, #16]
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	1cd9      	adds	r1, r3, #3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	461a      	mov	r2, r3
 80082a2:	f001 f8ed 	bl	8009480 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80082ae:	2301      	movs	r3, #1
 80082b0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80082b2:	4808      	ldr	r0, [pc, #32]	; (80082d4 <hci_send_req+0xf8>)
 80082b4:	f000 fd9a 	bl	8008dec <LST_is_empty>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0b5      	beq.n	800822a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80082be:	7ffb      	ldrb	r3, [r7, #31]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0ad      	beq.n	8008220 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80082c4:	2001      	movs	r0, #1
 80082c6:	f000 f85d 	bl	8008384 <NotifyCmdStatus>

  return 0;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3720      	adds	r7, #32
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000218 	.word	0x20000218

080082d8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80082e0:	480f      	ldr	r0, [pc, #60]	; (8008320 <TlInit+0x48>)
 80082e2:	f000 fd73 	bl	8008dcc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80082e6:	4a0f      	ldr	r2, [pc, #60]	; (8008324 <TlInit+0x4c>)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80082ec:	480e      	ldr	r0, [pc, #56]	; (8008328 <TlInit+0x50>)
 80082ee:	f000 fd6d 	bl	8008dcc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80082f2:	4b0e      	ldr	r3, [pc, #56]	; (800832c <TlInit+0x54>)
 80082f4:	2201      	movs	r2, #1
 80082f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80082f8:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <TlInit+0x58>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008304:	4b0b      	ldr	r3, [pc, #44]	; (8008334 <TlInit+0x5c>)
 8008306:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008308:	4b09      	ldr	r3, [pc, #36]	; (8008330 <TlInit+0x58>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f107 0208 	add.w	r2, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
  }

  return;
 8008314:	bf00      	nop
 8008316:	bf00      	nop
}
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000218 	.word	0x20000218
 8008324:	20000180 	.word	0x20000180
 8008328:	20000178 	.word	0x20000178
 800832c:	20000184 	.word	0x20000184
 8008330:	200001f8 	.word	0x200001f8
 8008334:	080083c5 	.word	0x080083c5

08008338 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	603a      	str	r2, [r7, #0]
 8008342:	80fb      	strh	r3, [r7, #6]
 8008344:	460b      	mov	r3, r1
 8008346:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008348:	4b0c      	ldr	r3, [pc, #48]	; (800837c <SendCmd+0x44>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	88fa      	ldrh	r2, [r7, #6]
 800834e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008352:	4b0a      	ldr	r3, [pc, #40]	; (800837c <SendCmd+0x44>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	797a      	ldrb	r2, [r7, #5]
 8008358:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800835a:	4b08      	ldr	r3, [pc, #32]	; (800837c <SendCmd+0x44>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	330c      	adds	r3, #12
 8008360:	797a      	ldrb	r2, [r7, #5]
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f001 f88b 	bl	8009480 <memcpy>

  hciContext.io.Send(0,0);
 800836a:	4b05      	ldr	r3, [pc, #20]	; (8008380 <SendCmd+0x48>)
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2100      	movs	r1, #0
 8008370:	2000      	movs	r0, #0
 8008372:	4798      	blx	r3

  return;
 8008374:	bf00      	nop
}
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20000180 	.word	0x20000180
 8008380:	200001f8 	.word	0x200001f8

08008384 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800838e:	79fb      	ldrb	r3, [r7, #7]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d108      	bne.n	80083a6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008394:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <NotifyCmdStatus+0x3c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00d      	beq.n	80083b8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800839c:	4b08      	ldr	r3, [pc, #32]	; (80083c0 <NotifyCmdStatus+0x3c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2000      	movs	r0, #0
 80083a2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80083a4:	e008      	b.n	80083b8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80083a6:	4b06      	ldr	r3, [pc, #24]	; (80083c0 <NotifyCmdStatus+0x3c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d004      	beq.n	80083b8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80083ae:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <NotifyCmdStatus+0x3c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2001      	movs	r0, #1
 80083b4:	4798      	blx	r3
  return;
 80083b6:	bf00      	nop
 80083b8:	bf00      	nop
}
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20000220 	.word	0x20000220

080083c4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	7a5b      	ldrb	r3, [r3, #9]
 80083d0:	2b0f      	cmp	r3, #15
 80083d2:	d003      	beq.n	80083dc <TlEvtReceived+0x18>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	7a5b      	ldrb	r3, [r3, #9]
 80083d8:	2b0e      	cmp	r3, #14
 80083da:	d107      	bne.n	80083ec <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4809      	ldr	r0, [pc, #36]	; (8008404 <TlEvtReceived+0x40>)
 80083e0:	f000 fd48 	bl	8008e74 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80083e4:	2000      	movs	r0, #0
 80083e6:	f7f9 ff1e 	bl	8002226 <hci_cmd_resp_release>
 80083ea:	e006      	b.n	80083fa <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4806      	ldr	r0, [pc, #24]	; (8008408 <TlEvtReceived+0x44>)
 80083f0:	f000 fd40 	bl	8008e74 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80083f4:	4804      	ldr	r0, [pc, #16]	; (8008408 <TlEvtReceived+0x44>)
 80083f6:	f7f9 ff0a 	bl	800220e <hci_notify_asynch_evt>
  }

  return;
 80083fa:	bf00      	nop
}
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000218 	.word	0x20000218
 8008408:	20000178 	.word	0x20000178

0800840c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a05      	ldr	r2, [pc, #20]	; (800842c <hci_register_io_bus+0x20>)
 8008418:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a04      	ldr	r2, [pc, #16]	; (8008430 <hci_register_io_bus+0x24>)
 800841e:	611a      	str	r2, [r3, #16]

  return;
 8008420:	bf00      	nop
}
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	0800871d 	.word	0x0800871d
 8008430:	08008785 	.word	0x08008785

08008434 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	4a08      	ldr	r2, [pc, #32]	; (8008464 <shci_init+0x30>)
 8008444:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008446:	4a08      	ldr	r2, [pc, #32]	; (8008468 <shci_init+0x34>)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800844c:	4806      	ldr	r0, [pc, #24]	; (8008468 <shci_init+0x34>)
 800844e:	f000 f911 	bl	8008674 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f894 	bl	8008584 <TlInit>

  return;
 800845c:	bf00      	nop
}
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000244 	.word	0x20000244
 8008468:	20000224 	.word	0x20000224

0800846c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008472:	4822      	ldr	r0, [pc, #136]	; (80084fc <shci_user_evt_proc+0x90>)
 8008474:	f000 fcba 	bl	8008dec <LST_is_empty>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d12b      	bne.n	80084d6 <shci_user_evt_proc+0x6a>
 800847e:	4b20      	ldr	r3, [pc, #128]	; (8008500 <shci_user_evt_proc+0x94>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d027      	beq.n	80084d6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008486:	f107 030c 	add.w	r3, r7, #12
 800848a:	4619      	mov	r1, r3
 800848c:	481b      	ldr	r0, [pc, #108]	; (80084fc <shci_user_evt_proc+0x90>)
 800848e:	f000 fd34 	bl	8008efa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008492:	4b1c      	ldr	r3, [pc, #112]	; (8008504 <shci_user_evt_proc+0x98>)
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00c      	beq.n	80084b4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800849e:	2301      	movs	r3, #1
 80084a0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80084a2:	4b18      	ldr	r3, [pc, #96]	; (8008504 <shci_user_evt_proc+0x98>)
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	1d3a      	adds	r2, r7, #4
 80084a8:	4610      	mov	r0, r2
 80084aa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80084ac:	793a      	ldrb	r2, [r7, #4]
 80084ae:	4b14      	ldr	r3, [pc, #80]	; (8008500 <shci_user_evt_proc+0x94>)
 80084b0:	701a      	strb	r2, [r3, #0]
 80084b2:	e002      	b.n	80084ba <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80084b4:	4b12      	ldr	r3, [pc, #72]	; (8008500 <shci_user_evt_proc+0x94>)
 80084b6:	2201      	movs	r2, #1
 80084b8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80084ba:	4b11      	ldr	r3, [pc, #68]	; (8008500 <shci_user_evt_proc+0x94>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 fa6d 	bl	80089a4 <TL_MM_EvtDone>
 80084ca:	e004      	b.n	80084d6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4619      	mov	r1, r3
 80084d0:	480a      	ldr	r0, [pc, #40]	; (80084fc <shci_user_evt_proc+0x90>)
 80084d2:	f000 fcab 	bl	8008e2c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80084d6:	4809      	ldr	r0, [pc, #36]	; (80084fc <shci_user_evt_proc+0x90>)
 80084d8:	f000 fc88 	bl	8008dec <LST_is_empty>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d107      	bne.n	80084f2 <shci_user_evt_proc+0x86>
 80084e2:	4b07      	ldr	r3, [pc, #28]	; (8008500 <shci_user_evt_proc+0x94>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80084ea:	4804      	ldr	r0, [pc, #16]	; (80084fc <shci_user_evt_proc+0x90>)
 80084ec:	f7f8 f83a 	bl	8000564 <shci_notify_asynch_evt>
  }


  return;
 80084f0:	bf00      	nop
 80084f2:	bf00      	nop
}
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000188 	.word	0x20000188
 8008500:	20000198 	.word	0x20000198
 8008504:	20000224 	.word	0x20000224

08008508 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	60ba      	str	r2, [r7, #8]
 8008510:	607b      	str	r3, [r7, #4]
 8008512:	4603      	mov	r3, r0
 8008514:	81fb      	strh	r3, [r7, #14]
 8008516:	460b      	mov	r3, r1
 8008518:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800851a:	2000      	movs	r0, #0
 800851c:	f000 f864 	bl	80085e8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008520:	4b16      	ldr	r3, [pc, #88]	; (800857c <shci_send+0x74>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	89fa      	ldrh	r2, [r7, #14]
 8008526:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800852a:	4b14      	ldr	r3, [pc, #80]	; (800857c <shci_send+0x74>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	7b7a      	ldrb	r2, [r7, #13]
 8008530:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008532:	4b12      	ldr	r3, [pc, #72]	; (800857c <shci_send+0x74>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	330c      	adds	r3, #12
 8008538:	7b7a      	ldrb	r2, [r7, #13]
 800853a:	68b9      	ldr	r1, [r7, #8]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 ff9f 	bl	8009480 <memcpy>

  shciContext.io.Send(0,0);
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <shci_send+0x78>)
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	2100      	movs	r1, #0
 8008548:	2000      	movs	r0, #0
 800854a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800854c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008550:	f7f8 f81f 	bl	8000592 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f103 0008 	add.w	r0, r3, #8
 800855a:	4b08      	ldr	r3, [pc, #32]	; (800857c <shci_send+0x74>)
 800855c:	6819      	ldr	r1, [r3, #0]
 800855e:	4b07      	ldr	r3, [pc, #28]	; (800857c <shci_send+0x74>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	789b      	ldrb	r3, [r3, #2]
 8008564:	3303      	adds	r3, #3
 8008566:	461a      	mov	r2, r3
 8008568:	f000 ff8a 	bl	8009480 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800856c:	2001      	movs	r0, #1
 800856e:	f000 f83b 	bl	80085e8 <Cmd_SetStatus>

  return;
 8008572:	bf00      	nop
}
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20000194 	.word	0x20000194
 8008580:	20000224 	.word	0x20000224

08008584 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800858c:	4a10      	ldr	r2, [pc, #64]	; (80085d0 <TlInit+0x4c>)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008592:	4810      	ldr	r0, [pc, #64]	; (80085d4 <TlInit+0x50>)
 8008594:	f000 fc1a 	bl	8008dcc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008598:	2001      	movs	r0, #1
 800859a:	f000 f825 	bl	80085e8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800859e:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <TlInit+0x54>)
 80085a0:	2201      	movs	r2, #1
 80085a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80085a4:	4b0d      	ldr	r3, [pc, #52]	; (80085dc <TlInit+0x58>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00c      	beq.n	80085c6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80085b0:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <TlInit+0x5c>)
 80085b2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80085b4:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <TlInit+0x60>)
 80085b6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80085b8:	4b08      	ldr	r3, [pc, #32]	; (80085dc <TlInit+0x58>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f107 020c 	add.w	r2, r7, #12
 80085c0:	4610      	mov	r0, r2
 80085c2:	4798      	blx	r3
  }

  return;
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
}
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20000194 	.word	0x20000194
 80085d4:	20000188 	.word	0x20000188
 80085d8:	20000198 	.word	0x20000198
 80085dc:	20000224 	.word	0x20000224
 80085e0:	08008639 	.word	0x08008639
 80085e4:	08008651 	.word	0x08008651

080085e8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10b      	bne.n	8008610 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80085f8:	4b0d      	ldr	r3, [pc, #52]	; (8008630 <Cmd_SetStatus+0x48>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008600:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <Cmd_SetStatus+0x48>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2000      	movs	r0, #0
 8008606:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008608:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <Cmd_SetStatus+0x4c>)
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800860e:	e00b      	b.n	8008628 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008610:	4b08      	ldr	r3, [pc, #32]	; (8008634 <Cmd_SetStatus+0x4c>)
 8008612:	2201      	movs	r2, #1
 8008614:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008616:	4b06      	ldr	r3, [pc, #24]	; (8008630 <Cmd_SetStatus+0x48>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800861e:	4b04      	ldr	r3, [pc, #16]	; (8008630 <Cmd_SetStatus+0x48>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2001      	movs	r0, #1
 8008624:	4798      	blx	r3
  return;
 8008626:	bf00      	nop
 8008628:	bf00      	nop
}
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	20000244 	.word	0x20000244
 8008634:	20000190 	.word	0x20000190

08008638 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008640:	2000      	movs	r0, #0
 8008642:	f7f7 ff9b 	bl	800057c <shci_cmd_resp_release>

  return;
 8008646:	bf00      	nop
}
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	4805      	ldr	r0, [pc, #20]	; (8008670 <TlUserEvtReceived+0x20>)
 800865c:	f000 fc0a 	bl	8008e74 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008660:	4803      	ldr	r0, [pc, #12]	; (8008670 <TlUserEvtReceived+0x20>)
 8008662:	f7f7 ff7f 	bl	8000564 <shci_notify_asynch_evt>

  return;
 8008666:	bf00      	nop
}
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000188 	.word	0x20000188

08008674 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a05      	ldr	r2, [pc, #20]	; (8008694 <shci_register_io_bus+0x20>)
 8008680:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a04      	ldr	r2, [pc, #16]	; (8008698 <shci_register_io_bus+0x24>)
 8008686:	611a      	str	r2, [r3, #16]

  return;
 8008688:	bf00      	nop
}
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	08008831 	.word	0x08008831
 8008698:	08008885 	.word	0x08008885

0800869c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80086a0:	f7fa f852 	bl	8002748 <HW_IPCC_Enable>

  return;
 80086a4:	bf00      	nop
}
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <TL_Init>:


void TL_Init( void )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80086ac:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <TL_Init+0x48>)
 80086ae:	4a11      	ldr	r2, [pc, #68]	; (80086f4 <TL_Init+0x4c>)
 80086b0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80086b2:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <TL_Init+0x48>)
 80086b4:	4a10      	ldr	r2, [pc, #64]	; (80086f8 <TL_Init+0x50>)
 80086b6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80086b8:	4b0d      	ldr	r3, [pc, #52]	; (80086f0 <TL_Init+0x48>)
 80086ba:	4a10      	ldr	r2, [pc, #64]	; (80086fc <TL_Init+0x54>)
 80086bc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80086be:	4b0c      	ldr	r3, [pc, #48]	; (80086f0 <TL_Init+0x48>)
 80086c0:	4a0f      	ldr	r2, [pc, #60]	; (8008700 <TL_Init+0x58>)
 80086c2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 80086c4:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <TL_Init+0x48>)
 80086c6:	4a0f      	ldr	r2, [pc, #60]	; (8008704 <TL_Init+0x5c>)
 80086c8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80086ca:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <TL_Init+0x48>)
 80086cc:	4a0e      	ldr	r2, [pc, #56]	; (8008708 <TL_Init+0x60>)
 80086ce:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80086d0:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <TL_Init+0x48>)
 80086d2:	4a0e      	ldr	r2, [pc, #56]	; (800870c <TL_Init+0x64>)
 80086d4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80086d6:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <TL_Init+0x48>)
 80086d8:	4a0d      	ldr	r2, [pc, #52]	; (8008710 <TL_Init+0x68>)
 80086da:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80086dc:	4b04      	ldr	r3, [pc, #16]	; (80086f0 <TL_Init+0x48>)
 80086de:	4a0d      	ldr	r2, [pc, #52]	; (8008714 <TL_Init+0x6c>)
 80086e0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80086e2:	4b03      	ldr	r3, [pc, #12]	; (80086f0 <TL_Init+0x48>)
 80086e4:	4a0c      	ldr	r2, [pc, #48]	; (8008718 <TL_Init+0x70>)
 80086e6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80086e8:	f7fa f842 	bl	8002770 <HW_IPCC_Init>

  return;
 80086ec:	bf00      	nop
}
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20030000 	.word	0x20030000
 80086f4:	20030134 	.word	0x20030134
 80086f8:	20030154 	.word	0x20030154
 80086fc:	20030164 	.word	0x20030164
 8008700:	20030170 	.word	0x20030170
 8008704:	20030178 	.word	0x20030178
 8008708:	20030180 	.word	0x20030180
 800870c:	20030188 	.word	0x20030188
 8008710:	200301a4 	.word	0x200301a4
 8008714:	200301a8 	.word	0x200301a8
 8008718:	200301b4 	.word	0x200301b4

0800871c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008728:	4811      	ldr	r0, [pc, #68]	; (8008770 <TL_BLE_Init+0x54>)
 800872a:	f000 fb4f 	bl	8008dcc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800872e:	4b11      	ldr	r3, [pc, #68]	; (8008774 <TL_BLE_Init+0x58>)
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	689a      	ldr	r2, [r3, #8]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	4a0c      	ldr	r2, [pc, #48]	; (8008778 <TL_BLE_Init+0x5c>)
 8008748:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	4a08      	ldr	r2, [pc, #32]	; (8008770 <TL_BLE_Init+0x54>)
 800874e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008750:	f7fa f824 	bl	800279c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a08      	ldr	r2, [pc, #32]	; (800877c <TL_BLE_Init+0x60>)
 800875a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	4a07      	ldr	r2, [pc, #28]	; (8008780 <TL_BLE_Init+0x64>)
 8008762:	6013      	str	r3, [r2, #0]

  return 0;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	200301d0 	.word	0x200301d0
 8008774:	20030000 	.word	0x20030000
 8008778:	20030a48 	.word	0x20030a48
 800877c:	20000250 	.word	0x20000250
 8008780:	20000254 	.word	0x20000254

08008784 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008790:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <TL_BLE_SendCmd+0x34>)
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2201      	movs	r2, #1
 8008798:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800879a:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <TL_BLE_SendCmd+0x34>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4619      	mov	r1, r3
 80087a2:	2001      	movs	r0, #1
 80087a4:	f000 f96c 	bl	8008a80 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80087a8:	f7fa f802 	bl	80027b0 <HW_IPCC_BLE_SendCmd>

  return 0;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20030000 	.word	0x20030000

080087bc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80087c2:	e01c      	b.n	80087fe <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80087c4:	1d3b      	adds	r3, r7, #4
 80087c6:	4619      	mov	r1, r3
 80087c8:	4812      	ldr	r0, [pc, #72]	; (8008814 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80087ca:	f000 fb96 	bl	8008efa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	7a5b      	ldrb	r3, [r3, #9]
 80087d2:	2b0f      	cmp	r3, #15
 80087d4:	d003      	beq.n	80087de <HW_IPCC_BLE_RxEvtNot+0x22>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7a5b      	ldrb	r3, [r3, #9]
 80087da:	2b0e      	cmp	r3, #14
 80087dc:	d105      	bne.n	80087ea <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4619      	mov	r1, r3
 80087e2:	2002      	movs	r0, #2
 80087e4:	f000 f94c 	bl	8008a80 <OutputDbgTrace>
 80087e8:	e004      	b.n	80087f4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4619      	mov	r1, r3
 80087ee:	2003      	movs	r0, #3
 80087f0:	f000 f946 	bl	8008a80 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80087f4:	4b08      	ldr	r3, [pc, #32]	; (8008818 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	4610      	mov	r0, r2
 80087fc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80087fe:	4805      	ldr	r0, [pc, #20]	; (8008814 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008800:	f000 faf4 	bl	8008dec <LST_is_empty>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0dc      	beq.n	80087c4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800880a:	bf00      	nop
}
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	200301d0 	.word	0x200301d0
 8008818:	20000250 	.word	0x20000250

0800881c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008820:	4b02      	ldr	r3, [pc, #8]	; (800882c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4798      	blx	r3

  return;
 8008826:	bf00      	nop
}
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000254 	.word	0x20000254

08008830 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800883c:	480d      	ldr	r0, [pc, #52]	; (8008874 <TL_SYS_Init+0x44>)
 800883e:	f000 fac5 	bl	8008dcc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008842:	4b0d      	ldr	r3, [pc, #52]	; (8008878 <TL_SYS_Init+0x48>)
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	4a08      	ldr	r2, [pc, #32]	; (8008874 <TL_SYS_Init+0x44>)
 8008854:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008856:	f7f9 ffcd 	bl	80027f4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a07      	ldr	r2, [pc, #28]	; (800887c <TL_SYS_Init+0x4c>)
 8008860:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	4a06      	ldr	r2, [pc, #24]	; (8008880 <TL_SYS_Init+0x50>)
 8008868:	6013      	str	r3, [r2, #0]

  return 0;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	200301d8 	.word	0x200301d8
 8008878:	20030000 	.word	0x20030000
 800887c:	20000258 	.word	0x20000258
 8008880:	2000025c 	.word	0x2000025c

08008884 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008890:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <TL_SYS_SendCmd+0x34>)
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2210      	movs	r2, #16
 8008898:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800889a:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <TL_SYS_SendCmd+0x34>)
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4619      	mov	r1, r3
 80088a2:	2004      	movs	r0, #4
 80088a4:	f000 f8ec 	bl	8008a80 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80088a8:	f7f9 ffae 	bl	8002808 <HW_IPCC_SYS_SendCmd>

  return 0;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20030000 	.word	0x20030000

080088bc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80088c0:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4619      	mov	r1, r3
 80088c8:	2005      	movs	r0, #5
 80088ca:	f000 f8d9 	bl	8008a80 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a03      	ldr	r2, [pc, #12]	; (80088e0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80088d4:	68d2      	ldr	r2, [r2, #12]
 80088d6:	6812      	ldr	r2, [r2, #0]
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3

  return;
 80088dc:	bf00      	nop
}
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	20030000 	.word	0x20030000
 80088e4:	20000258 	.word	0x20000258

080088e8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80088ee:	e00e      	b.n	800890e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80088f0:	1d3b      	adds	r3, r7, #4
 80088f2:	4619      	mov	r1, r3
 80088f4:	480b      	ldr	r0, [pc, #44]	; (8008924 <HW_IPCC_SYS_EvtNot+0x3c>)
 80088f6:	f000 fb00 	bl	8008efa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4619      	mov	r1, r3
 80088fe:	2006      	movs	r0, #6
 8008900:	f000 f8be 	bl	8008a80 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008904:	4b08      	ldr	r3, [pc, #32]	; (8008928 <HW_IPCC_SYS_EvtNot+0x40>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	4610      	mov	r0, r2
 800890c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800890e:	4805      	ldr	r0, [pc, #20]	; (8008924 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008910:	f000 fa6c 	bl	8008dec <LST_is_empty>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0ea      	beq.n	80088f0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800891a:	bf00      	nop
}
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	200301d8 	.word	0x200301d8
 8008928:	2000025c 	.word	0x2000025c

0800892c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008934:	4817      	ldr	r0, [pc, #92]	; (8008994 <TL_MM_Init+0x68>)
 8008936:	f000 fa49 	bl	8008dcc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800893a:	4817      	ldr	r0, [pc, #92]	; (8008998 <TL_MM_Init+0x6c>)
 800893c:	f000 fa46 	bl	8008dcc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008940:	4b16      	ldr	r3, [pc, #88]	; (800899c <TL_MM_Init+0x70>)
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	4a16      	ldr	r2, [pc, #88]	; (80089a0 <TL_MM_Init+0x74>)
 8008946:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008948:	4b15      	ldr	r3, [pc, #84]	; (80089a0 <TL_MM_Init+0x74>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6892      	ldr	r2, [r2, #8]
 8008950:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008952:	4b13      	ldr	r3, [pc, #76]	; (80089a0 <TL_MM_Init+0x74>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	68d2      	ldr	r2, [r2, #12]
 800895a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800895c:	4b10      	ldr	r3, [pc, #64]	; (80089a0 <TL_MM_Init+0x74>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a0c      	ldr	r2, [pc, #48]	; (8008994 <TL_MM_Init+0x68>)
 8008962:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008964:	4b0e      	ldr	r3, [pc, #56]	; (80089a0 <TL_MM_Init+0x74>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800896e:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <TL_MM_Init+0x74>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	6852      	ldr	r2, [r2, #4]
 8008976:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008978:	4b09      	ldr	r3, [pc, #36]	; (80089a0 <TL_MM_Init+0x74>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	6912      	ldr	r2, [r2, #16]
 8008980:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008982:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <TL_MM_Init+0x74>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	6952      	ldr	r2, [r2, #20]
 800898a:	619a      	str	r2, [r3, #24]

  return;
 800898c:	bf00      	nop
}
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	200301c0 	.word	0x200301c0
 8008998:	20000248 	.word	0x20000248
 800899c:	20030000 	.word	0x20030000
 80089a0:	20000260 	.word	0x20000260

080089a4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4807      	ldr	r0, [pc, #28]	; (80089cc <TL_MM_EvtDone+0x28>)
 80089b0:	f000 fa60 	bl	8008e74 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80089b4:	6879      	ldr	r1, [r7, #4]
 80089b6:	2000      	movs	r0, #0
 80089b8:	f000 f862 	bl	8008a80 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80089bc:	4804      	ldr	r0, [pc, #16]	; (80089d0 <TL_MM_EvtDone+0x2c>)
 80089be:	f7f9 ff49 	bl	8002854 <HW_IPCC_MM_SendFreeBuf>

  return;
 80089c2:	bf00      	nop
}
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20000248 	.word	0x20000248
 80089d0:	080089d5 	.word	0x080089d5

080089d4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80089da:	e00c      	b.n	80089f6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80089dc:	1d3b      	adds	r3, r7, #4
 80089de:	4619      	mov	r1, r3
 80089e0:	480a      	ldr	r0, [pc, #40]	; (8008a0c <SendFreeBuf+0x38>)
 80089e2:	f000 fa8a 	bl	8008efa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80089e6:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <SendFreeBuf+0x3c>)
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 fa3f 	bl	8008e74 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80089f6:	4805      	ldr	r0, [pc, #20]	; (8008a0c <SendFreeBuf+0x38>)
 80089f8:	f000 f9f8 	bl	8008dec <LST_is_empty>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d0ec      	beq.n	80089dc <SendFreeBuf+0x8>
  }

  return;
 8008a02:	bf00      	nop
}
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000248 	.word	0x20000248
 8008a10:	20030000 	.word	0x20030000

08008a14 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008a18:	4805      	ldr	r0, [pc, #20]	; (8008a30 <TL_TRACES_Init+0x1c>)
 8008a1a:	f000 f9d7 	bl	8008dcc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008a1e:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <TL_TRACES_Init+0x20>)
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	4a03      	ldr	r2, [pc, #12]	; (8008a30 <TL_TRACES_Init+0x1c>)
 8008a24:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008a26:	f7f9 ff4b 	bl	80028c0 <HW_IPCC_TRACES_Init>

  return;
 8008a2a:	bf00      	nop
}
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	200301c8 	.word	0x200301c8
 8008a34:	20030000 	.word	0x20030000

08008a38 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008a3e:	e008      	b.n	8008a52 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008a40:	1d3b      	adds	r3, r7, #4
 8008a42:	4619      	mov	r1, r3
 8008a44:	4808      	ldr	r0, [pc, #32]	; (8008a68 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008a46:	f000 fa58 	bl	8008efa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 f80d 	bl	8008a6c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008a52:	4805      	ldr	r0, [pc, #20]	; (8008a68 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008a54:	f000 f9ca 	bl	8008dec <LST_is_empty>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0f0      	beq.n	8008a40 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008a5e:	bf00      	nop
}
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	200301c8 	.word	0x200301c8

08008a6c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	6039      	str	r1, [r7, #0]
 8008a8a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	2b06      	cmp	r3, #6
 8008a90:	d849      	bhi.n	8008b26 <OutputDbgTrace+0xa6>
 8008a92:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <OutputDbgTrace+0x18>)
 8008a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a98:	08008ab5 	.word	0x08008ab5
 8008a9c:	08008ad7 	.word	0x08008ad7
 8008aa0:	08008add 	.word	0x08008add
 8008aa4:	08008af7 	.word	0x08008af7
 8008aa8:	08008b03 	.word	0x08008b03
 8008aac:	08008b09 	.word	0x08008b09
 8008ab0:	08008b1b 	.word	0x08008b1b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	7a5b      	ldrb	r3, [r3, #9]
 8008abc:	2b0f      	cmp	r3, #15
 8008abe:	d004      	beq.n	8008aca <OutputDbgTrace+0x4a>
 8008ac0:	2bff      	cmp	r3, #255	; 0xff
 8008ac2:	d004      	beq.n	8008ace <OutputDbgTrace+0x4e>
 8008ac4:	2b0e      	cmp	r3, #14
 8008ac6:	d004      	beq.n	8008ad2 <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008ac8:	e004      	b.n	8008ad4 <OutputDbgTrace+0x54>
          break;
 8008aca:	bf00      	nop
 8008acc:	e02c      	b.n	8008b28 <OutputDbgTrace+0xa8>
          break;
 8008ace:	bf00      	nop
 8008ad0:	e02a      	b.n	8008b28 <OutputDbgTrace+0xa8>
          break;
 8008ad2:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008ad4:	e028      	b.n	8008b28 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008ada:	e025      	b.n	8008b28 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	7a5b      	ldrb	r3, [r3, #9]
 8008ae4:	2b0e      	cmp	r3, #14
 8008ae6:	d002      	beq.n	8008aee <OutputDbgTrace+0x6e>
 8008ae8:	2b0f      	cmp	r3, #15
 8008aea:	d002      	beq.n	8008af2 <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008aec:	e002      	b.n	8008af4 <OutputDbgTrace+0x74>
          break;
 8008aee:	bf00      	nop
 8008af0:	e01a      	b.n	8008b28 <OutputDbgTrace+0xa8>
          break;
 8008af2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008af4:	e018      	b.n	8008b28 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	7a5b      	ldrb	r3, [r3, #9]
 8008afe:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008b00:	e012      	b.n	8008b28 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008b06:	e00f      	b.n	8008b28 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	7a5b      	ldrb	r3, [r3, #9]
 8008b10:	2b0e      	cmp	r3, #14
 8008b12:	d000      	beq.n	8008b16 <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008b14:	e000      	b.n	8008b18 <OutputDbgTrace+0x98>
          break;
 8008b16:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008b18:	e006      	b.n	8008b28 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	7a5b      	ldrb	r3, [r3, #9]
 8008b22:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008b24:	e000      	b.n	8008b28 <OutputDbgTrace+0xa8>

    default:
      break;
 8008b26:	bf00      	nop
  }

  return;
 8008b28:	bf00      	nop
}
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_PCD_SetupStageCallback>:
 * @brief  SetupStage callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage(hpcd->pData, (uint8_t *) hpcd->Setup);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f7fd f9bb 	bl	8005ec6 <USBD_LL_SetupStage>
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_PCD_DataOutStageCallback>:
 * @param  hpcd: PCD handle
 * @param  epnum: Endpoint Number
 * @retval None
 */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8008b6a:	78fb      	ldrb	r3, [r7, #3]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	015b      	lsls	r3, r3, #5
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	f7fd f9f6 	bl	8005f6c <USBD_LL_DataOutStage>
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <HAL_PCD_DataInStageCallback>:
 * @param  hpcd: PCD handle
 * @param  epnum: Endpoint Number
 * @retval None
 */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8008b9a:	78fb      	ldrb	r3, [r7, #3]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	015b      	lsls	r3, r3, #5
 8008ba0:	4413      	add	r3, r2
 8008ba2:	333c      	adds	r3, #60	; 0x3c
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	78fb      	ldrb	r3, [r7, #3]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f7fd fa42 	bl	8006032 <USBD_LL_DataInStage>
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <HAL_PCD_SOFCallback>:
 * @brief  SOF callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF(hpcd->pData);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fd fb56 	bl	8006276 <USBD_LL_SOF>
}
 8008bca:	bf00      	nop
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <HAL_PCD_ResetCallback>:
 * @brief  Reset callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
    /* Reset Device */
    USBD_LL_Reset(hpcd->pData);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fd fabc 	bl	800615e <USBD_LL_Reset>

    /* Set USB Current Speed */
    USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008bec:	2101      	movs	r1, #1
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fd fb03 	bl	80061fa <USBD_LL_SetSpeed>
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_PCD_SuspendCallback>:
 * @brief  Suspend callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode */
    USBD_LL_Suspend(hpcd->pData);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fd fb05 	bl	800621a <USBD_LL_Suspend>
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_PCD_ResumeCallback>:
 * @brief  Resume callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
    USBD_LL_Resume(hpcd->pData);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fd fb0d 	bl	8006246 <USBD_LL_Resume>
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_LL_OpenEP>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr,
        uint8_t ep_type, uint16_t ep_mps)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	4611      	mov	r1, r2
 8008c40:	461a      	mov	r2, r3
 8008c42:	4603      	mov	r3, r0
 8008c44:	70fb      	strb	r3, [r7, #3]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70bb      	strb	r3, [r7, #2]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	803b      	strh	r3, [r7, #0]
    HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c54:	78bb      	ldrb	r3, [r7, #2]
 8008c56:	883a      	ldrh	r2, [r7, #0]
 8008c58:	78f9      	ldrb	r1, [r7, #3]
 8008c5a:	f7fa fda4 	bl	80037a6 <HAL_PCD_EP_Open>

    return USBD_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_LL_StallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c7a:	78fa      	ldrb	r2, [r7, #3]
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fa fe64 	bl	800394c <HAL_PCD_EP_SetStall>
    return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_LL_ClearStallEP>:
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b082      	sub	sp, #8
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ca0:	78fa      	ldrb	r2, [r7, #3]
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fa feab 	bl	8003a00 <HAL_PCD_EP_ClrStall>
    return USBD_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_LL_IsStallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef *hpcd = pdev->pData;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cc6:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80)
 8008cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	da08      	bge.n	8008ce2 <USBD_LL_IsStallEP+0x2e>
    {
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	015b      	lsls	r3, r3, #5
 8008cda:	4413      	add	r3, r2
 8008cdc:	332a      	adds	r3, #42	; 0x2a
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	e008      	b.n	8008cf4 <USBD_LL_IsStallEP+0x40>
    }
    else
    {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	015b      	lsls	r3, r3, #5
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008cf2:	781b      	ldrb	r3, [r3, #0]
    }
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <USBD_LL_SetUSBAddress>:
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev,
        uint8_t dev_addr)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d12:	78fa      	ldrb	r2, [r7, #3]
 8008d14:	4611      	mov	r1, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fa fd20 	bl	800375c <HAL_PCD_SetAddress>
    return USBD_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_LL_Transmit>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr,
        uint8_t * pbuf, uint32_t size)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	603b      	str	r3, [r7, #0]
 8008d32:	460b      	mov	r3, r1
 8008d34:	72fb      	strb	r3, [r7, #11]
    HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d3c:	7af9      	ldrb	r1, [r7, #11]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	f7fa fdca 	bl	80038da <HAL_PCD_EP_Transmit>
    return USBD_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_LL_PrepareReceive>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr,
        uint8_t * pbuf, uint32_t size)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	607a      	str	r2, [r7, #4]
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	72fb      	strb	r3, [r7, #11]
    HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d66:	7af9      	ldrb	r1, [r7, #11]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	f7fa fd7b 	bl	8003866 <HAL_PCD_EP_Receive>
    return USBD_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008d86:	4b0f      	ldr	r3, [pc, #60]	; (8008dc4 <OTP_Read+0x48>)
 8008d88:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008d8a:	e002      	b.n	8008d92 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3b08      	subs	r3, #8
 8008d90:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3307      	adds	r3, #7
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	79fa      	ldrb	r2, [r7, #7]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d003      	beq.n	8008da6 <OTP_Read+0x2a>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4a09      	ldr	r2, [pc, #36]	; (8008dc8 <OTP_Read+0x4c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d1f2      	bne.n	8008d8c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3307      	adds	r3, #7
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	79fa      	ldrb	r2, [r7, #7]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d001      	beq.n	8008db6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008db6:	68fb      	ldr	r3, [r7, #12]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	1fff73f8 	.word	0x1fff73f8
 8008dc8:	1fff7000 	.word	0x1fff7000

08008dcc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	605a      	str	r2, [r3, #4]
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008df4:	f3ef 8310 	mrs	r3, PRIMASK
 8008df8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008dfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008dfe:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d102      	bne.n	8008e10 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	75fb      	strb	r3, [r7, #23]
 8008e0e:	e001      	b.n	8008e14 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 8008e10:	2300      	movs	r3, #0
 8008e12:	75fb      	strb	r3, [r7, #23]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	371c      	adds	r7, #28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e36:	f3ef 8310 	mrs	r3, PRIMASK
 8008e3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008e3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e40:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	605a      	str	r2, [r3, #4]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008e68:	bf00      	nop
 8008e6a:	371c      	adds	r7, #28
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e82:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e84:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008e86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e88:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008eb0:	bf00      	nop
 8008eb2:	371c      	adds	r7, #28
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008ecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ece:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	6812      	ldr	r2, [r2, #0]
 8008ed8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	6852      	ldr	r2, [r2, #4]
 8008ee2:	605a      	str	r2, [r3, #4]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b086      	sub	sp, #24
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f04:	f3ef 8310 	mrs	r3, PRIMASK
 8008f08:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008f0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f0e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7ff ffcd 	bl	8008ebc <LST_remove_node>
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008f2c:	bf00      	nop
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008f38:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <UTIL_LPM_Init+0x1c>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008f3e:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <UTIL_LPM_Init+0x20>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008f44:	bf00      	nop
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	20000264 	.word	0x20000264
 8008f54:	20000268 	.word	0x20000268

08008f58 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f64:	f3ef 8310 	mrs	r3, PRIMASK
 8008f68:	613b      	str	r3, [r7, #16]
  return(result);
 8008f6a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008f6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f6e:	b672      	cpsid	i
  
  switch(state)
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d009      	beq.n	8008f8a <UTIL_LPM_SetOffMode+0x32>
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d000      	beq.n	8008f7c <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8008f7a:	e00e      	b.n	8008f9a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8008f7c:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <UTIL_LPM_SetOffMode+0x58>)
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	4a0a      	ldr	r2, [pc, #40]	; (8008fb0 <UTIL_LPM_SetOffMode+0x58>)
 8008f86:	6013      	str	r3, [r2, #0]
      break;
 8008f88:	e007      	b.n	8008f9a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	43da      	mvns	r2, r3
 8008f8e:	4b08      	ldr	r3, [pc, #32]	; (8008fb0 <UTIL_LPM_SetOffMode+0x58>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4013      	ands	r3, r2
 8008f94:	4a06      	ldr	r2, [pc, #24]	; (8008fb0 <UTIL_LPM_SetOffMode+0x58>)
 8008f96:	6013      	str	r3, [r2, #0]
      break;
 8008f98:	bf00      	nop
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008fa4:	bf00      	nop
 8008fa6:	371c      	adds	r7, #28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	20000268 	.word	0x20000268

08008fb4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fba:	f3ef 8310 	mrs	r3, PRIMASK
 8008fbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fc0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8008fc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008fc4:	b672      	cpsid	i

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8008fc6:	4b12      	ldr	r3, [pc, #72]	; (8009010 <UTIL_LPM_EnterLowPower+0x5c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d006      	beq.n	8008fdc <UTIL_LPM_EnterLowPower+0x28>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8008fce:	4b11      	ldr	r3, [pc, #68]	; (8009014 <UTIL_LPM_EnterLowPower+0x60>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8008fd4:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <UTIL_LPM_EnterLowPower+0x60>)
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	4798      	blx	r3
 8008fda:	e010      	b.n	8008ffe <UTIL_LPM_EnterLowPower+0x4a>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8008fdc:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <UTIL_LPM_EnterLowPower+0x64>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d006      	beq.n	8008ff2 <UTIL_LPM_EnterLowPower+0x3e>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8008fe4:	4b0b      	ldr	r3, [pc, #44]	; (8009014 <UTIL_LPM_EnterLowPower+0x60>)
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8008fea:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <UTIL_LPM_EnterLowPower+0x60>)
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	4798      	blx	r3
 8008ff0:	e005      	b.n	8008ffe <UTIL_LPM_EnterLowPower+0x4a>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8008ff2:	4b08      	ldr	r3, [pc, #32]	; (8009014 <UTIL_LPM_EnterLowPower+0x60>)
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8008ff8:	4b06      	ldr	r3, [pc, #24]	; (8009014 <UTIL_LPM_EnterLowPower+0x60>)
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	4798      	blx	r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8009008:	bf00      	nop
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20000264 	.word	0x20000264
 8009014:	08009624 	.word	0x08009624
 8009018:	20000268 	.word	0x20000268

0800901c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08c      	sub	sp, #48	; 0x30
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009024:	4b65      	ldr	r3, [pc, #404]	; (80091bc <UTIL_SEQ_Run+0x1a0>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800902a:	4b64      	ldr	r3, [pc, #400]	; (80091bc <UTIL_SEQ_Run+0x1a0>)
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4013      	ands	r3, r2
 8009032:	4a62      	ldr	r2, [pc, #392]	; (80091bc <UTIL_SEQ_Run+0x1a0>)
 8009034:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8009036:	e081      	b.n	800913c <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 8009038:	2300      	movs	r3, #0
 800903a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800903c:	e002      	b.n	8009044 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	3301      	adds	r3, #1
 8009042:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8009044:	4a5e      	ldr	r2, [pc, #376]	; (80091c0 <UTIL_SEQ_Run+0x1a4>)
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800904c:	4b5d      	ldr	r3, [pc, #372]	; (80091c4 <UTIL_SEQ_Run+0x1a8>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	401a      	ands	r2, r3
 8009052:	4b5a      	ldr	r3, [pc, #360]	; (80091bc <UTIL_SEQ_Run+0x1a0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4013      	ands	r3, r2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d0f0      	beq.n	800903e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800905c:	4a58      	ldr	r2, [pc, #352]	; (80091c0 <UTIL_SEQ_Run+0x1a4>)
 800905e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009060:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009064:	4b57      	ldr	r3, [pc, #348]	; (80091c4 <UTIL_SEQ_Run+0x1a8>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	401a      	ands	r2, r3
 800906a:	4b54      	ldr	r3, [pc, #336]	; (80091bc <UTIL_SEQ_Run+0x1a0>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4013      	ands	r3, r2
 8009070:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009072:	4a53      	ldr	r2, [pc, #332]	; (80091c0 <UTIL_SEQ_Run+0x1a4>)
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	4413      	add	r3, r2
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	4013      	ands	r3, r2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d106      	bne.n	8009092 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009084:	4a4e      	ldr	r2, [pc, #312]	; (80091c0 <UTIL_SEQ_Run+0x1a4>)
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	00db      	lsls	r3, r3, #3
 800908a:	4413      	add	r3, r2
 800908c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009090:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009092:	4a4b      	ldr	r2, [pc, #300]	; (80091c0 <UTIL_SEQ_Run+0x1a4>)
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	4413      	add	r3, r2
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	4013      	ands	r3, r2
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f98f 	bl	80093c4 <SEQ_BitPosition>
 80090a6:	4603      	mov	r3, r0
 80090a8:	461a      	mov	r2, r3
 80090aa:	4b47      	ldr	r3, [pc, #284]	; (80091c8 <UTIL_SEQ_Run+0x1ac>)
 80090ac:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80090ae:	4a44      	ldr	r2, [pc, #272]	; (80091c0 <UTIL_SEQ_Run+0x1a4>)
 80090b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	4413      	add	r3, r2
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	4b43      	ldr	r3, [pc, #268]	; (80091c8 <UTIL_SEQ_Run+0x1ac>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2101      	movs	r1, #1
 80090be:	fa01 f303 	lsl.w	r3, r1, r3
 80090c2:	43db      	mvns	r3, r3
 80090c4:	401a      	ands	r2, r3
 80090c6:	493e      	ldr	r1, [pc, #248]	; (80091c0 <UTIL_SEQ_Run+0x1a4>)
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	440b      	add	r3, r1
 80090ce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090d0:	f3ef 8310 	mrs	r3, PRIMASK
 80090d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80090d6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80090d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80090da:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80090dc:	4b3a      	ldr	r3, [pc, #232]	; (80091c8 <UTIL_SEQ_Run+0x1ac>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2201      	movs	r2, #1
 80090e2:	fa02 f303 	lsl.w	r3, r2, r3
 80090e6:	43da      	mvns	r2, r3
 80090e8:	4b38      	ldr	r3, [pc, #224]	; (80091cc <UTIL_SEQ_Run+0x1b0>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4013      	ands	r3, r2
 80090ee:	4a37      	ldr	r2, [pc, #220]	; (80091cc <UTIL_SEQ_Run+0x1b0>)
 80090f0:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80090f2:	2302      	movs	r3, #2
 80090f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090f6:	e013      	b.n	8009120 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	3b01      	subs	r3, #1
 80090fc:	4a30      	ldr	r2, [pc, #192]	; (80091c0 <UTIL_SEQ_Run+0x1a4>)
 80090fe:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009102:	4b31      	ldr	r3, [pc, #196]	; (80091c8 <UTIL_SEQ_Run+0x1ac>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2201      	movs	r2, #1
 8009108:	fa02 f303 	lsl.w	r3, r2, r3
 800910c:	43da      	mvns	r2, r3
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009110:	3b01      	subs	r3, #1
 8009112:	400a      	ands	r2, r1
 8009114:	492a      	ldr	r1, [pc, #168]	; (80091c0 <UTIL_SEQ_Run+0x1a4>)
 8009116:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800911a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911c:	3b01      	subs	r3, #1
 800911e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e8      	bne.n	80090f8 <UTIL_SEQ_Run+0xdc>
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009130:	4b25      	ldr	r3, [pc, #148]	; (80091c8 <UTIL_SEQ_Run+0x1ac>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a26      	ldr	r2, [pc, #152]	; (80091d0 <UTIL_SEQ_Run+0x1b4>)
 8009136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800913a:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800913c:	4b23      	ldr	r3, [pc, #140]	; (80091cc <UTIL_SEQ_Run+0x1b0>)
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b20      	ldr	r3, [pc, #128]	; (80091c4 <UTIL_SEQ_Run+0x1a8>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	401a      	ands	r2, r3
 8009146:	4b1d      	ldr	r3, [pc, #116]	; (80091bc <UTIL_SEQ_Run+0x1a0>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4013      	ands	r3, r2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d007      	beq.n	8009160 <UTIL_SEQ_Run+0x144>
 8009150:	4b20      	ldr	r3, [pc, #128]	; (80091d4 <UTIL_SEQ_Run+0x1b8>)
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	4b20      	ldr	r3, [pc, #128]	; (80091d8 <UTIL_SEQ_Run+0x1bc>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4013      	ands	r3, r2
 800915a:	2b00      	cmp	r3, #0
 800915c:	f43f af6c 	beq.w	8009038 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009160:	4b19      	ldr	r3, [pc, #100]	; (80091c8 <UTIL_SEQ_Run+0x1ac>)
 8009162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009166:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009168:	f000 f91e 	bl	80093a8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800916c:	f3ef 8310 	mrs	r3, PRIMASK
 8009170:	613b      	str	r3, [r7, #16]
  return(result);
 8009172:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009174:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009176:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8009178:	4b14      	ldr	r3, [pc, #80]	; (80091cc <UTIL_SEQ_Run+0x1b0>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	4b11      	ldr	r3, [pc, #68]	; (80091c4 <UTIL_SEQ_Run+0x1a8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	401a      	ands	r2, r3
 8009182:	4b0e      	ldr	r3, [pc, #56]	; (80091bc <UTIL_SEQ_Run+0x1a0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4013      	ands	r3, r2
 8009188:	2b00      	cmp	r3, #0
 800918a:	d108      	bne.n	800919e <UTIL_SEQ_Run+0x182>
 800918c:	4b11      	ldr	r3, [pc, #68]	; (80091d4 <UTIL_SEQ_Run+0x1b8>)
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <UTIL_SEQ_Run+0x1bc>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4013      	ands	r3, r2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 800919a:	f7f7 f9d0 	bl	800053e <UTIL_SEQ_Idle>
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 80091a8:	f000 f905 	bl	80093b6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80091ac:	4a03      	ldr	r2, [pc, #12]	; (80091bc <UTIL_SEQ_Run+0x1a0>)
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b0:	6013      	str	r3, [r2, #0]

  return;
 80091b2:	bf00      	nop
}
 80091b4:	3730      	adds	r7, #48	; 0x30
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000030 	.word	0x20000030
 80091c0:	200002fc 	.word	0x200002fc
 80091c4:	2000002c 	.word	0x2000002c
 80091c8:	20000278 	.word	0x20000278
 80091cc:	2000026c 	.word	0x2000026c
 80091d0:	2000027c 	.word	0x2000027c
 80091d4:	20000270 	.word	0x20000270
 80091d8:	20000274 	.word	0x20000274

080091dc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091e8:	f3ef 8310 	mrs	r3, PRIMASK
 80091ec:	617b      	str	r3, [r7, #20]
  return(result);
 80091ee:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80091f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80091f2:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 f8e5 	bl	80093c4 <SEQ_BitPosition>
 80091fa:	4603      	mov	r3, r0
 80091fc:	4619      	mov	r1, r3
 80091fe:	4a06      	ldr	r2, [pc, #24]	; (8009218 <UTIL_SEQ_RegTask+0x3c>)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009210:	bf00      	nop
}
 8009212:	3720      	adds	r7, #32
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	2000027c 	.word	0x2000027c

0800921c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009226:	f3ef 8310 	mrs	r3, PRIMASK
 800922a:	60fb      	str	r3, [r7, #12]
  return(result);
 800922c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800922e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009230:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 8009232:	4b0d      	ldr	r3, [pc, #52]	; (8009268 <UTIL_SEQ_SetTask+0x4c>)
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4313      	orrs	r3, r2
 800923a:	4a0b      	ldr	r2, [pc, #44]	; (8009268 <UTIL_SEQ_SetTask+0x4c>)
 800923c:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800923e:	4a0b      	ldr	r2, [pc, #44]	; (800926c <UTIL_SEQ_SetTask+0x50>)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	431a      	orrs	r2, r3
 800924a:	4908      	ldr	r1, [pc, #32]	; (800926c <UTIL_SEQ_SetTask+0x50>)
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800925c:	bf00      	nop
}
 800925e:	371c      	adds	r7, #28
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	2000026c 	.word	0x2000026c
 800926c:	200002fc 	.word	0x200002fc

08009270 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009278:	f3ef 8310 	mrs	r3, PRIMASK
 800927c:	60fb      	str	r3, [r7, #12]
  return(result);
 800927e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009282:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	43da      	mvns	r2, r3
 8009288:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <UTIL_SEQ_PauseTask+0x38>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4013      	ands	r3, r2
 800928e:	4a06      	ldr	r2, [pc, #24]	; (80092a8 <UTIL_SEQ_PauseTask+0x38>)
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800929c:	bf00      	nop
}
 800929e:	371c      	adds	r7, #28
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	2000002c 	.word	0x2000002c

080092ac <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092b4:	f3ef 8310 	mrs	r3, PRIMASK
 80092b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80092ba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80092bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092be:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 80092c0:	4b08      	ldr	r3, [pc, #32]	; (80092e4 <UTIL_SEQ_ResumeTask+0x38>)
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	4a06      	ldr	r2, [pc, #24]	; (80092e4 <UTIL_SEQ_ResumeTask+0x38>)
 80092ca:	6013      	str	r3, [r2, #0]
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80092d6:	bf00      	nop
}
 80092d8:	371c      	adds	r7, #28
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	2000002c 	.word	0x2000002c

080092e8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092f0:	f3ef 8310 	mrs	r3, PRIMASK
 80092f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80092f6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80092f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092fa:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 80092fc:	4b08      	ldr	r3, [pc, #32]	; (8009320 <UTIL_SEQ_SetEvt+0x38>)
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4313      	orrs	r3, r2
 8009304:	4a06      	ldr	r2, [pc, #24]	; (8009320 <UTIL_SEQ_SetEvt+0x38>)
 8009306:	6013      	str	r3, [r2, #0]
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009312:	bf00      	nop
}
 8009314:	371c      	adds	r7, #28
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20000270 	.word	0x20000270

08009324 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800932c:	4b1b      	ldr	r3, [pc, #108]	; (800939c <UTIL_SEQ_WaitEvt+0x78>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009332:	4b1a      	ldr	r3, [pc, #104]	; (800939c <UTIL_SEQ_WaitEvt+0x78>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800933a:	d102      	bne.n	8009342 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	e005      	b.n	800934e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8009342:	4b16      	ldr	r3, [pc, #88]	; (800939c <UTIL_SEQ_WaitEvt+0x78>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2201      	movs	r2, #1
 8009348:	fa02 f303 	lsl.w	r3, r2, r3
 800934c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800934e:	4b14      	ldr	r3, [pc, #80]	; (80093a0 <UTIL_SEQ_WaitEvt+0x7c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8009354:	4a12      	ldr	r2, [pc, #72]	; (80093a0 <UTIL_SEQ_WaitEvt+0x7c>)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800935a:	e005      	b.n	8009368 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800935c:	4b10      	ldr	r3, [pc, #64]	; (80093a0 <UTIL_SEQ_WaitEvt+0x7c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4619      	mov	r1, r3
 8009362:	6978      	ldr	r0, [r7, #20]
 8009364:	f7f7 f8f1 	bl	800054a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8009368:	4b0e      	ldr	r3, [pc, #56]	; (80093a4 <UTIL_SEQ_WaitEvt+0x80>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	4b0c      	ldr	r3, [pc, #48]	; (80093a0 <UTIL_SEQ_WaitEvt+0x7c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4013      	ands	r3, r2
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0f2      	beq.n	800935c <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009376:	4a09      	ldr	r2, [pc, #36]	; (800939c <UTIL_SEQ_WaitEvt+0x78>)
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800937c:	4b08      	ldr	r3, [pc, #32]	; (80093a0 <UTIL_SEQ_WaitEvt+0x7c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	43da      	mvns	r2, r3
 8009382:	4b08      	ldr	r3, [pc, #32]	; (80093a4 <UTIL_SEQ_WaitEvt+0x80>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4013      	ands	r3, r2
 8009388:	4a06      	ldr	r2, [pc, #24]	; (80093a4 <UTIL_SEQ_WaitEvt+0x80>)
 800938a:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800938c:	4a04      	ldr	r2, [pc, #16]	; (80093a0 <UTIL_SEQ_WaitEvt+0x7c>)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6013      	str	r3, [r2, #0]

  return;
 8009392:	bf00      	nop
}
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20000278 	.word	0x20000278
 80093a0:	20000274 	.word	0x20000274
 80093a4:	20000270 	.word	0x20000270

080093a8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80093a8:	b480      	push	{r7}
 80093aa:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80093ac:	bf00      	nop
}
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80093b6:	b480      	push	{r7}
 80093b8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80093ba:	bf00      	nop
}
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	0c1b      	lsrs	r3, r3, #16
 80093d4:	041b      	lsls	r3, r3, #16
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d104      	bne.n	80093e4 <SEQ_BitPosition+0x20>
 80093da:	2310      	movs	r3, #16
 80093dc:	73fb      	strb	r3, [r7, #15]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	041b      	lsls	r3, r3, #16
 80093e2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d105      	bne.n	80093fa <SEQ_BitPosition+0x36>
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
 80093f0:	3308      	adds	r3, #8
 80093f2:	73fb      	strb	r3, [r7, #15]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	021b      	lsls	r3, r3, #8
 80093f8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d105      	bne.n	8009410 <SEQ_BitPosition+0x4c>
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	3304      	adds	r3, #4
 8009408:	73fb      	strb	r3, [r7, #15]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	011b      	lsls	r3, r3, #4
 800940e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	0f1b      	lsrs	r3, r3, #28
 8009414:	4a07      	ldr	r2, [pc, #28]	; (8009434 <SEQ_BitPosition+0x70>)
 8009416:	5cd2      	ldrb	r2, [r2, r3]
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	4413      	add	r3, r2
 800941c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	f1c3 031f 	rsb	r3, r3, #31
 8009424:	b2db      	uxtb	r3, r3
}
 8009426:	4618      	mov	r0, r3
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	080096f4 	.word	0x080096f4

08009438 <__libc_init_array>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	4e0d      	ldr	r6, [pc, #52]	; (8009470 <__libc_init_array+0x38>)
 800943c:	4c0d      	ldr	r4, [pc, #52]	; (8009474 <__libc_init_array+0x3c>)
 800943e:	1ba4      	subs	r4, r4, r6
 8009440:	10a4      	asrs	r4, r4, #2
 8009442:	2500      	movs	r5, #0
 8009444:	42a5      	cmp	r5, r4
 8009446:	d109      	bne.n	800945c <__libc_init_array+0x24>
 8009448:	4e0b      	ldr	r6, [pc, #44]	; (8009478 <__libc_init_array+0x40>)
 800944a:	4c0c      	ldr	r4, [pc, #48]	; (800947c <__libc_init_array+0x44>)
 800944c:	f000 f82c 	bl	80094a8 <_init>
 8009450:	1ba4      	subs	r4, r4, r6
 8009452:	10a4      	asrs	r4, r4, #2
 8009454:	2500      	movs	r5, #0
 8009456:	42a5      	cmp	r5, r4
 8009458:	d105      	bne.n	8009466 <__libc_init_array+0x2e>
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009460:	4798      	blx	r3
 8009462:	3501      	adds	r5, #1
 8009464:	e7ee      	b.n	8009444 <__libc_init_array+0xc>
 8009466:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800946a:	4798      	blx	r3
 800946c:	3501      	adds	r5, #1
 800946e:	e7f2      	b.n	8009456 <__libc_init_array+0x1e>
 8009470:	08009704 	.word	0x08009704
 8009474:	08009704 	.word	0x08009704
 8009478:	08009704 	.word	0x08009704
 800947c:	08009708 	.word	0x08009708

08009480 <memcpy>:
 8009480:	b510      	push	{r4, lr}
 8009482:	1e43      	subs	r3, r0, #1
 8009484:	440a      	add	r2, r1
 8009486:	4291      	cmp	r1, r2
 8009488:	d100      	bne.n	800948c <memcpy+0xc>
 800948a:	bd10      	pop	{r4, pc}
 800948c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009490:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009494:	e7f7      	b.n	8009486 <memcpy+0x6>

08009496 <memset>:
 8009496:	4402      	add	r2, r0
 8009498:	4603      	mov	r3, r0
 800949a:	4293      	cmp	r3, r2
 800949c:	d100      	bne.n	80094a0 <memset+0xa>
 800949e:	4770      	bx	lr
 80094a0:	f803 1b01 	strb.w	r1, [r3], #1
 80094a4:	e7f9      	b.n	800949a <memset+0x4>
	...

080094a8 <_init>:
 80094a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094aa:	bf00      	nop
 80094ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ae:	bc08      	pop	{r3}
 80094b0:	469e      	mov	lr, r3
 80094b2:	4770      	bx	lr

080094b4 <_fini>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	bf00      	nop
 80094b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ba:	bc08      	pop	{r3}
 80094bc:	469e      	mov	lr, r3
 80094be:	4770      	bx	lr
